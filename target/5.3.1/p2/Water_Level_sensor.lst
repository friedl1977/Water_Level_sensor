
/Users/friedl/Desktop/Projects/Water_Level_sensor/target/5.3.1/p2/Water_Level_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  085fc000  085fc000  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000006c  085fc018  085fc018  0000c018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  085fc084  085fc084  0000c084  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .dynalib      00000008  023fc5a0  085fc090  0000c5a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .psram_text   00003a54  023fc5a8  085fc098  0000c5a8  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  5 .data_alt     00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  6 .bss_alt      00000000  023ffffc  023ffffc  00020000  2**0
                  CONTENTS
  7 .data         00000090  1007adac  085ffaec  0001adac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          000001ac  1007ae3c  1007ae3c  0002ae3c  2**2
                  ALLOC
  9 .secure_ram_text 00000000  1007e000  1007e000  00020000  2**0
                  CONTENTS
 10 .backup       00000004  1007b400  085ffb7c  0001b400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .module_info_suffix_align 00000438  085ffb80  085ffb80  0001fb80  2**0
                  ALLOC
 12 .module_info_product 00000006  085fffb8  085fffb8  0001fb80  2**0
                  ALLOC
 13 .module_info_suffix 0000003e  085fffbe  085fffbe  0001ffbe  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .module_info_crc 00000004  085ffffc  085ffffc  0001fffc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 15 .debug_info   0013253c  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00013772  00000000  00000000  0015253c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_loc    0003da5d  00000000  00000000  00165cae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_aranges 00002e28  00000000  00000000  001a370b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_ranges 0000b958  00000000  00000000  001a6533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00026831  00000000  00000000  001b1e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line   0004126f  00000000  00000000  001d86bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_str    000d47fb  00000000  00000000  0021992b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_frame  000083cc  00000000  00000000  002ee128  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

085fc018 <module_user_pre_init>:
 * Initializes this user module. Returns the start of the heap.
 */
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
    // NOTE: Must invoke APIs in ROM
    // Copy .data
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc018:	480e      	ldr	r0, [pc, #56]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc01a:	490f      	ldr	r1, [pc, #60]	; (85fc058 <module_user_pre_init+0x40>)
__attribute__((section(".xip.text"))) void* module_user_pre_init() {
 85fc01c:	b508      	push	{r3, lr}
    if ( (&link_global_data_start != &link_global_data_initial_values) && (link_global_data_size != 0))
 85fc01e:	4288      	cmp	r0, r1
 85fc020:	d005      	beq.n	85fc02e <module_user_pre_init+0x16>
 85fc022:	4a0e      	ldr	r2, [pc, #56]	; (85fc05c <module_user_pre_init+0x44>)
 85fc024:	4282      	cmp	r2, r0
 85fc026:	d002      	beq.n	85fc02e <module_user_pre_init+0x16>
    {
        _memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 85fc028:	4b0d      	ldr	r3, [pc, #52]	; (85fc060 <module_user_pre_init+0x48>)
 85fc02a:	1a12      	subs	r2, r2, r0
 85fc02c:	4798      	blx	r3
    }

    // Initialize .bss
    _memset(&link_bss_location, 0, link_bss_size );
 85fc02e:	480d      	ldr	r0, [pc, #52]	; (85fc064 <module_user_pre_init+0x4c>)
 85fc030:	4a0d      	ldr	r2, [pc, #52]	; (85fc068 <module_user_pre_init+0x50>)
 85fc032:	2100      	movs	r1, #0
 85fc034:	4b0d      	ldr	r3, [pc, #52]	; (85fc06c <module_user_pre_init+0x54>)
 85fc036:	1a12      	subs	r2, r2, r0
 85fc038:	4798      	blx	r3

    // Copy .psram_text
    if ( (&link_psram_code_start != &link_psram_code_flash_start) && (link_psram_code_size != 0))
 85fc03a:	480d      	ldr	r0, [pc, #52]	; (85fc070 <module_user_pre_init+0x58>)
 85fc03c:	490d      	ldr	r1, [pc, #52]	; (85fc074 <module_user_pre_init+0x5c>)
 85fc03e:	4288      	cmp	r0, r1
 85fc040:	d005      	beq.n	85fc04e <module_user_pre_init+0x36>
 85fc042:	4a0d      	ldr	r2, [pc, #52]	; (85fc078 <module_user_pre_init+0x60>)
 85fc044:	4282      	cmp	r2, r0
 85fc046:	d002      	beq.n	85fc04e <module_user_pre_init+0x36>
    {
        _memcpy(&link_psram_code_start, &link_psram_code_flash_start, link_psram_code_size);
 85fc048:	4b05      	ldr	r3, [pc, #20]	; (85fc060 <module_user_pre_init+0x48>)
 85fc04a:	1a12      	subs	r2, r2, r0
 85fc04c:	4798      	blx	r3
    }

    return &link_global_data_start;
}
 85fc04e:	4801      	ldr	r0, [pc, #4]	; (85fc054 <module_user_pre_init+0x3c>)
 85fc050:	bd08      	pop	{r3, pc}
 85fc052:	bf00      	nop
 85fc054:	1007adac 	.word	0x1007adac
 85fc058:	085ffaec 	.word	0x085ffaec
 85fc05c:	1007ae3c 	.word	0x1007ae3c
 85fc060:	10110d2d 	.word	0x10110d2d
 85fc064:	1007ae3c 	.word	0x1007ae3c
 85fc068:	1007afe8 	.word	0x1007afe8
 85fc06c:	10110ea1 	.word	0x10110ea1
 85fc070:	023fc5a0 	.word	0x023fc5a0
 85fc074:	085fc090 	.word	0x085fc090
 85fc078:	023ffffc 	.word	0x023ffffc

085fc07c <dynalib_preinit>:
 85fc07c:	085fc019 00000000                       .._.....

Disassembly of section .psram_text:

023fc5a8 <__aeabi_drsub>:
 23fc5a8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 23fc5ac:	e002      	b.n	23fc5b4 <__adddf3>
 23fc5ae:	bf00      	nop

023fc5b0 <__aeabi_dsub>:
 23fc5b0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

023fc5b4 <__adddf3>:
 23fc5b4:	b530      	push	{r4, r5, lr}
 23fc5b6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 23fc5ba:	ea4f 0543 	mov.w	r5, r3, lsl #1
 23fc5be:	ea94 0f05 	teq	r4, r5
 23fc5c2:	bf08      	it	eq
 23fc5c4:	ea90 0f02 	teqeq	r0, r2
 23fc5c8:	bf1f      	itttt	ne
 23fc5ca:	ea54 0c00 	orrsne.w	ip, r4, r0
 23fc5ce:	ea55 0c02 	orrsne.w	ip, r5, r2
 23fc5d2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 23fc5d6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc5da:	f000 80e2 	beq.w	23fc7a2 <__adddf3+0x1ee>
 23fc5de:	ea4f 5454 	mov.w	r4, r4, lsr #21
 23fc5e2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 23fc5e6:	bfb8      	it	lt
 23fc5e8:	426d      	neglt	r5, r5
 23fc5ea:	dd0c      	ble.n	23fc606 <__adddf3+0x52>
 23fc5ec:	442c      	add	r4, r5
 23fc5ee:	ea80 0202 	eor.w	r2, r0, r2
 23fc5f2:	ea81 0303 	eor.w	r3, r1, r3
 23fc5f6:	ea82 0000 	eor.w	r0, r2, r0
 23fc5fa:	ea83 0101 	eor.w	r1, r3, r1
 23fc5fe:	ea80 0202 	eor.w	r2, r0, r2
 23fc602:	ea81 0303 	eor.w	r3, r1, r3
 23fc606:	2d36      	cmp	r5, #54	; 0x36
 23fc608:	bf88      	it	hi
 23fc60a:	bd30      	pophi	{r4, r5, pc}
 23fc60c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 23fc610:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fc614:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 23fc618:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 23fc61c:	d002      	beq.n	23fc624 <__adddf3+0x70>
 23fc61e:	4240      	negs	r0, r0
 23fc620:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc624:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 23fc628:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fc62c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 23fc630:	d002      	beq.n	23fc638 <__adddf3+0x84>
 23fc632:	4252      	negs	r2, r2
 23fc634:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 23fc638:	ea94 0f05 	teq	r4, r5
 23fc63c:	f000 80a7 	beq.w	23fc78e <__adddf3+0x1da>
 23fc640:	f1a4 0401 	sub.w	r4, r4, #1
 23fc644:	f1d5 0e20 	rsbs	lr, r5, #32
 23fc648:	db0d      	blt.n	23fc666 <__adddf3+0xb2>
 23fc64a:	fa02 fc0e 	lsl.w	ip, r2, lr
 23fc64e:	fa22 f205 	lsr.w	r2, r2, r5
 23fc652:	1880      	adds	r0, r0, r2
 23fc654:	f141 0100 	adc.w	r1, r1, #0
 23fc658:	fa03 f20e 	lsl.w	r2, r3, lr
 23fc65c:	1880      	adds	r0, r0, r2
 23fc65e:	fa43 f305 	asr.w	r3, r3, r5
 23fc662:	4159      	adcs	r1, r3
 23fc664:	e00e      	b.n	23fc684 <__adddf3+0xd0>
 23fc666:	f1a5 0520 	sub.w	r5, r5, #32
 23fc66a:	f10e 0e20 	add.w	lr, lr, #32
 23fc66e:	2a01      	cmp	r2, #1
 23fc670:	fa03 fc0e 	lsl.w	ip, r3, lr
 23fc674:	bf28      	it	cs
 23fc676:	f04c 0c02 	orrcs.w	ip, ip, #2
 23fc67a:	fa43 f305 	asr.w	r3, r3, r5
 23fc67e:	18c0      	adds	r0, r0, r3
 23fc680:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 23fc684:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc688:	d507      	bpl.n	23fc69a <__adddf3+0xe6>
 23fc68a:	f04f 0e00 	mov.w	lr, #0
 23fc68e:	f1dc 0c00 	rsbs	ip, ip, #0
 23fc692:	eb7e 0000 	sbcs.w	r0, lr, r0
 23fc696:	eb6e 0101 	sbc.w	r1, lr, r1
 23fc69a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 23fc69e:	d31b      	bcc.n	23fc6d8 <__adddf3+0x124>
 23fc6a0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 23fc6a4:	d30c      	bcc.n	23fc6c0 <__adddf3+0x10c>
 23fc6a6:	0849      	lsrs	r1, r1, #1
 23fc6a8:	ea5f 0030 	movs.w	r0, r0, rrx
 23fc6ac:	ea4f 0c3c 	mov.w	ip, ip, rrx
 23fc6b0:	f104 0401 	add.w	r4, r4, #1
 23fc6b4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 23fc6b8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 23fc6bc:	f080 809a 	bcs.w	23fc7f4 <__adddf3+0x240>
 23fc6c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 23fc6c4:	bf08      	it	eq
 23fc6c6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fc6ca:	f150 0000 	adcs.w	r0, r0, #0
 23fc6ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc6d2:	ea41 0105 	orr.w	r1, r1, r5
 23fc6d6:	bd30      	pop	{r4, r5, pc}
 23fc6d8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 23fc6dc:	4140      	adcs	r0, r0
 23fc6de:	eb41 0101 	adc.w	r1, r1, r1
 23fc6e2:	3c01      	subs	r4, #1
 23fc6e4:	bf28      	it	cs
 23fc6e6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 23fc6ea:	d2e9      	bcs.n	23fc6c0 <__adddf3+0x10c>
 23fc6ec:	f091 0f00 	teq	r1, #0
 23fc6f0:	bf04      	itt	eq
 23fc6f2:	4601      	moveq	r1, r0
 23fc6f4:	2000      	moveq	r0, #0
 23fc6f6:	fab1 f381 	clz	r3, r1
 23fc6fa:	bf08      	it	eq
 23fc6fc:	3320      	addeq	r3, #32
 23fc6fe:	f1a3 030b 	sub.w	r3, r3, #11
 23fc702:	f1b3 0220 	subs.w	r2, r3, #32
 23fc706:	da0c      	bge.n	23fc722 <__adddf3+0x16e>
 23fc708:	320c      	adds	r2, #12
 23fc70a:	dd08      	ble.n	23fc71e <__adddf3+0x16a>
 23fc70c:	f102 0c14 	add.w	ip, r2, #20
 23fc710:	f1c2 020c 	rsb	r2, r2, #12
 23fc714:	fa01 f00c 	lsl.w	r0, r1, ip
 23fc718:	fa21 f102 	lsr.w	r1, r1, r2
 23fc71c:	e00c      	b.n	23fc738 <__adddf3+0x184>
 23fc71e:	f102 0214 	add.w	r2, r2, #20
 23fc722:	bfd8      	it	le
 23fc724:	f1c2 0c20 	rsble	ip, r2, #32
 23fc728:	fa01 f102 	lsl.w	r1, r1, r2
 23fc72c:	fa20 fc0c 	lsr.w	ip, r0, ip
 23fc730:	bfdc      	itt	le
 23fc732:	ea41 010c 	orrle.w	r1, r1, ip
 23fc736:	4090      	lslle	r0, r2
 23fc738:	1ae4      	subs	r4, r4, r3
 23fc73a:	bfa2      	ittt	ge
 23fc73c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 23fc740:	4329      	orrge	r1, r5
 23fc742:	bd30      	popge	{r4, r5, pc}
 23fc744:	ea6f 0404 	mvn.w	r4, r4
 23fc748:	3c1f      	subs	r4, #31
 23fc74a:	da1c      	bge.n	23fc786 <__adddf3+0x1d2>
 23fc74c:	340c      	adds	r4, #12
 23fc74e:	dc0e      	bgt.n	23fc76e <__adddf3+0x1ba>
 23fc750:	f104 0414 	add.w	r4, r4, #20
 23fc754:	f1c4 0220 	rsb	r2, r4, #32
 23fc758:	fa20 f004 	lsr.w	r0, r0, r4
 23fc75c:	fa01 f302 	lsl.w	r3, r1, r2
 23fc760:	ea40 0003 	orr.w	r0, r0, r3
 23fc764:	fa21 f304 	lsr.w	r3, r1, r4
 23fc768:	ea45 0103 	orr.w	r1, r5, r3
 23fc76c:	bd30      	pop	{r4, r5, pc}
 23fc76e:	f1c4 040c 	rsb	r4, r4, #12
 23fc772:	f1c4 0220 	rsb	r2, r4, #32
 23fc776:	fa20 f002 	lsr.w	r0, r0, r2
 23fc77a:	fa01 f304 	lsl.w	r3, r1, r4
 23fc77e:	ea40 0003 	orr.w	r0, r0, r3
 23fc782:	4629      	mov	r1, r5
 23fc784:	bd30      	pop	{r4, r5, pc}
 23fc786:	fa21 f004 	lsr.w	r0, r1, r4
 23fc78a:	4629      	mov	r1, r5
 23fc78c:	bd30      	pop	{r4, r5, pc}
 23fc78e:	f094 0f00 	teq	r4, #0
 23fc792:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 23fc796:	bf06      	itte	eq
 23fc798:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 23fc79c:	3401      	addeq	r4, #1
 23fc79e:	3d01      	subne	r5, #1
 23fc7a0:	e74e      	b.n	23fc640 <__adddf3+0x8c>
 23fc7a2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc7a6:	bf18      	it	ne
 23fc7a8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 23fc7ac:	d029      	beq.n	23fc802 <__adddf3+0x24e>
 23fc7ae:	ea94 0f05 	teq	r4, r5
 23fc7b2:	bf08      	it	eq
 23fc7b4:	ea90 0f02 	teqeq	r0, r2
 23fc7b8:	d005      	beq.n	23fc7c6 <__adddf3+0x212>
 23fc7ba:	ea54 0c00 	orrs.w	ip, r4, r0
 23fc7be:	bf04      	itt	eq
 23fc7c0:	4619      	moveq	r1, r3
 23fc7c2:	4610      	moveq	r0, r2
 23fc7c4:	bd30      	pop	{r4, r5, pc}
 23fc7c6:	ea91 0f03 	teq	r1, r3
 23fc7ca:	bf1e      	ittt	ne
 23fc7cc:	2100      	movne	r1, #0
 23fc7ce:	2000      	movne	r0, #0
 23fc7d0:	bd30      	popne	{r4, r5, pc}
 23fc7d2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 23fc7d6:	d105      	bne.n	23fc7e4 <__adddf3+0x230>
 23fc7d8:	0040      	lsls	r0, r0, #1
 23fc7da:	4149      	adcs	r1, r1
 23fc7dc:	bf28      	it	cs
 23fc7de:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 23fc7e2:	bd30      	pop	{r4, r5, pc}
 23fc7e4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 23fc7e8:	bf3c      	itt	cc
 23fc7ea:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 23fc7ee:	bd30      	popcc	{r4, r5, pc}
 23fc7f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc7f4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 23fc7f8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fc7fc:	f04f 0000 	mov.w	r0, #0
 23fc800:	bd30      	pop	{r4, r5, pc}
 23fc802:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 23fc806:	bf1a      	itte	ne
 23fc808:	4619      	movne	r1, r3
 23fc80a:	4610      	movne	r0, r2
 23fc80c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 23fc810:	bf1c      	itt	ne
 23fc812:	460b      	movne	r3, r1
 23fc814:	4602      	movne	r2, r0
 23fc816:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fc81a:	bf06      	itte	eq
 23fc81c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 23fc820:	ea91 0f03 	teqeq	r1, r3
 23fc824:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 23fc828:	bd30      	pop	{r4, r5, pc}
 23fc82a:	bf00      	nop

023fc82c <__aeabi_ui2d>:
 23fc82c:	f090 0f00 	teq	r0, #0
 23fc830:	bf04      	itt	eq
 23fc832:	2100      	moveq	r1, #0
 23fc834:	4770      	bxeq	lr
 23fc836:	b530      	push	{r4, r5, lr}
 23fc838:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc83c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc840:	f04f 0500 	mov.w	r5, #0
 23fc844:	f04f 0100 	mov.w	r1, #0
 23fc848:	e750      	b.n	23fc6ec <__adddf3+0x138>
 23fc84a:	bf00      	nop

023fc84c <__aeabi_i2d>:
 23fc84c:	f090 0f00 	teq	r0, #0
 23fc850:	bf04      	itt	eq
 23fc852:	2100      	moveq	r1, #0
 23fc854:	4770      	bxeq	lr
 23fc856:	b530      	push	{r4, r5, lr}
 23fc858:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc85c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc860:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 23fc864:	bf48      	it	mi
 23fc866:	4240      	negmi	r0, r0
 23fc868:	f04f 0100 	mov.w	r1, #0
 23fc86c:	e73e      	b.n	23fc6ec <__adddf3+0x138>
 23fc86e:	bf00      	nop

023fc870 <__aeabi_f2d>:
 23fc870:	0042      	lsls	r2, r0, #1
 23fc872:	ea4f 01e2 	mov.w	r1, r2, asr #3
 23fc876:	ea4f 0131 	mov.w	r1, r1, rrx
 23fc87a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 23fc87e:	bf1f      	itttt	ne
 23fc880:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 23fc884:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 23fc888:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 23fc88c:	4770      	bxne	lr
 23fc88e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 23fc892:	bf08      	it	eq
 23fc894:	4770      	bxeq	lr
 23fc896:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 23fc89a:	bf04      	itt	eq
 23fc89c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 23fc8a0:	4770      	bxeq	lr
 23fc8a2:	b530      	push	{r4, r5, lr}
 23fc8a4:	f44f 7460 	mov.w	r4, #896	; 0x380
 23fc8a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 23fc8ac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fc8b0:	e71c      	b.n	23fc6ec <__adddf3+0x138>
 23fc8b2:	bf00      	nop

023fc8b4 <__aeabi_ul2d>:
 23fc8b4:	ea50 0201 	orrs.w	r2, r0, r1
 23fc8b8:	bf08      	it	eq
 23fc8ba:	4770      	bxeq	lr
 23fc8bc:	b530      	push	{r4, r5, lr}
 23fc8be:	f04f 0500 	mov.w	r5, #0
 23fc8c2:	e00a      	b.n	23fc8da <__aeabi_l2d+0x16>

023fc8c4 <__aeabi_l2d>:
 23fc8c4:	ea50 0201 	orrs.w	r2, r0, r1
 23fc8c8:	bf08      	it	eq
 23fc8ca:	4770      	bxeq	lr
 23fc8cc:	b530      	push	{r4, r5, lr}
 23fc8ce:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 23fc8d2:	d502      	bpl.n	23fc8da <__aeabi_l2d+0x16>
 23fc8d4:	4240      	negs	r0, r0
 23fc8d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 23fc8da:	f44f 6480 	mov.w	r4, #1024	; 0x400
 23fc8de:	f104 0432 	add.w	r4, r4, #50	; 0x32
 23fc8e2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 23fc8e6:	f43f aed8 	beq.w	23fc69a <__adddf3+0xe6>
 23fc8ea:	f04f 0203 	mov.w	r2, #3
 23fc8ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc8f2:	bf18      	it	ne
 23fc8f4:	3203      	addne	r2, #3
 23fc8f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 23fc8fa:	bf18      	it	ne
 23fc8fc:	3203      	addne	r2, #3
 23fc8fe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 23fc902:	f1c2 0320 	rsb	r3, r2, #32
 23fc906:	fa00 fc03 	lsl.w	ip, r0, r3
 23fc90a:	fa20 f002 	lsr.w	r0, r0, r2
 23fc90e:	fa01 fe03 	lsl.w	lr, r1, r3
 23fc912:	ea40 000e 	orr.w	r0, r0, lr
 23fc916:	fa21 f102 	lsr.w	r1, r1, r2
 23fc91a:	4414      	add	r4, r2
 23fc91c:	e6bd      	b.n	23fc69a <__adddf3+0xe6>
 23fc91e:	bf00      	nop

023fc920 <__aeabi_dmul>:
 23fc920:	b570      	push	{r4, r5, r6, lr}
 23fc922:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fc926:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fc92a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fc92e:	bf1d      	ittte	ne
 23fc930:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fc934:	ea94 0f0c 	teqne	r4, ip
 23fc938:	ea95 0f0c 	teqne	r5, ip
 23fc93c:	f000 f8de 	bleq	23fcafc <__aeabi_dmul+0x1dc>
 23fc940:	442c      	add	r4, r5
 23fc942:	ea81 0603 	eor.w	r6, r1, r3
 23fc946:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 23fc94a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 23fc94e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 23fc952:	bf18      	it	ne
 23fc954:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 23fc958:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc95c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 23fc960:	d038      	beq.n	23fc9d4 <__aeabi_dmul+0xb4>
 23fc962:	fba0 ce02 	umull	ip, lr, r0, r2
 23fc966:	f04f 0500 	mov.w	r5, #0
 23fc96a:	fbe1 e502 	umlal	lr, r5, r1, r2
 23fc96e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 23fc972:	fbe0 e503 	umlal	lr, r5, r0, r3
 23fc976:	f04f 0600 	mov.w	r6, #0
 23fc97a:	fbe1 5603 	umlal	r5, r6, r1, r3
 23fc97e:	f09c 0f00 	teq	ip, #0
 23fc982:	bf18      	it	ne
 23fc984:	f04e 0e01 	orrne.w	lr, lr, #1
 23fc988:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 23fc98c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 23fc990:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 23fc994:	d204      	bcs.n	23fc9a0 <__aeabi_dmul+0x80>
 23fc996:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 23fc99a:	416d      	adcs	r5, r5
 23fc99c:	eb46 0606 	adc.w	r6, r6, r6
 23fc9a0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 23fc9a4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 23fc9a8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 23fc9ac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 23fc9b0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 23fc9b4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fc9b8:	bf88      	it	hi
 23fc9ba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fc9be:	d81e      	bhi.n	23fc9fe <__aeabi_dmul+0xde>
 23fc9c0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 23fc9c4:	bf08      	it	eq
 23fc9c6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 23fc9ca:	f150 0000 	adcs.w	r0, r0, #0
 23fc9ce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fc9d2:	bd70      	pop	{r4, r5, r6, pc}
 23fc9d4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 23fc9d8:	ea46 0101 	orr.w	r1, r6, r1
 23fc9dc:	ea40 0002 	orr.w	r0, r0, r2
 23fc9e0:	ea81 0103 	eor.w	r1, r1, r3
 23fc9e4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 23fc9e8:	bfc2      	ittt	gt
 23fc9ea:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fc9ee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fc9f2:	bd70      	popgt	{r4, r5, r6, pc}
 23fc9f4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fc9f8:	f04f 0e00 	mov.w	lr, #0
 23fc9fc:	3c01      	subs	r4, #1
 23fc9fe:	f300 80ab 	bgt.w	23fcb58 <__aeabi_dmul+0x238>
 23fca02:	f114 0f36 	cmn.w	r4, #54	; 0x36
 23fca06:	bfde      	ittt	le
 23fca08:	2000      	movle	r0, #0
 23fca0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 23fca0e:	bd70      	pople	{r4, r5, r6, pc}
 23fca10:	f1c4 0400 	rsb	r4, r4, #0
 23fca14:	3c20      	subs	r4, #32
 23fca16:	da35      	bge.n	23fca84 <__aeabi_dmul+0x164>
 23fca18:	340c      	adds	r4, #12
 23fca1a:	dc1b      	bgt.n	23fca54 <__aeabi_dmul+0x134>
 23fca1c:	f104 0414 	add.w	r4, r4, #20
 23fca20:	f1c4 0520 	rsb	r5, r4, #32
 23fca24:	fa00 f305 	lsl.w	r3, r0, r5
 23fca28:	fa20 f004 	lsr.w	r0, r0, r4
 23fca2c:	fa01 f205 	lsl.w	r2, r1, r5
 23fca30:	ea40 0002 	orr.w	r0, r0, r2
 23fca34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 23fca38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 23fca3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fca40:	fa21 f604 	lsr.w	r6, r1, r4
 23fca44:	eb42 0106 	adc.w	r1, r2, r6
 23fca48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fca4c:	bf08      	it	eq
 23fca4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fca52:	bd70      	pop	{r4, r5, r6, pc}
 23fca54:	f1c4 040c 	rsb	r4, r4, #12
 23fca58:	f1c4 0520 	rsb	r5, r4, #32
 23fca5c:	fa00 f304 	lsl.w	r3, r0, r4
 23fca60:	fa20 f005 	lsr.w	r0, r0, r5
 23fca64:	fa01 f204 	lsl.w	r2, r1, r4
 23fca68:	ea40 0002 	orr.w	r0, r0, r2
 23fca6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fca70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 23fca74:	f141 0100 	adc.w	r1, r1, #0
 23fca78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fca7c:	bf08      	it	eq
 23fca7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fca82:	bd70      	pop	{r4, r5, r6, pc}
 23fca84:	f1c4 0520 	rsb	r5, r4, #32
 23fca88:	fa00 f205 	lsl.w	r2, r0, r5
 23fca8c:	ea4e 0e02 	orr.w	lr, lr, r2
 23fca90:	fa20 f304 	lsr.w	r3, r0, r4
 23fca94:	fa01 f205 	lsl.w	r2, r1, r5
 23fca98:	ea43 0302 	orr.w	r3, r3, r2
 23fca9c:	fa21 f004 	lsr.w	r0, r1, r4
 23fcaa0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcaa4:	fa21 f204 	lsr.w	r2, r1, r4
 23fcaa8:	ea20 0002 	bic.w	r0, r0, r2
 23fcaac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 23fcab0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 23fcab4:	bf08      	it	eq
 23fcab6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 23fcaba:	bd70      	pop	{r4, r5, r6, pc}
 23fcabc:	f094 0f00 	teq	r4, #0
 23fcac0:	d10f      	bne.n	23fcae2 <__aeabi_dmul+0x1c2>
 23fcac2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 23fcac6:	0040      	lsls	r0, r0, #1
 23fcac8:	eb41 0101 	adc.w	r1, r1, r1
 23fcacc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fcad0:	bf08      	it	eq
 23fcad2:	3c01      	subeq	r4, #1
 23fcad4:	d0f7      	beq.n	23fcac6 <__aeabi_dmul+0x1a6>
 23fcad6:	ea41 0106 	orr.w	r1, r1, r6
 23fcada:	f095 0f00 	teq	r5, #0
 23fcade:	bf18      	it	ne
 23fcae0:	4770      	bxne	lr
 23fcae2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 23fcae6:	0052      	lsls	r2, r2, #1
 23fcae8:	eb43 0303 	adc.w	r3, r3, r3
 23fcaec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 23fcaf0:	bf08      	it	eq
 23fcaf2:	3d01      	subeq	r5, #1
 23fcaf4:	d0f7      	beq.n	23fcae6 <__aeabi_dmul+0x1c6>
 23fcaf6:	ea43 0306 	orr.w	r3, r3, r6
 23fcafa:	4770      	bx	lr
 23fcafc:	ea94 0f0c 	teq	r4, ip
 23fcb00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fcb04:	bf18      	it	ne
 23fcb06:	ea95 0f0c 	teqne	r5, ip
 23fcb0a:	d00c      	beq.n	23fcb26 <__aeabi_dmul+0x206>
 23fcb0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fcb10:	bf18      	it	ne
 23fcb12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fcb16:	d1d1      	bne.n	23fcabc <__aeabi_dmul+0x19c>
 23fcb18:	ea81 0103 	eor.w	r1, r1, r3
 23fcb1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcb20:	f04f 0000 	mov.w	r0, #0
 23fcb24:	bd70      	pop	{r4, r5, r6, pc}
 23fcb26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fcb2a:	bf06      	itte	eq
 23fcb2c:	4610      	moveq	r0, r2
 23fcb2e:	4619      	moveq	r1, r3
 23fcb30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fcb34:	d019      	beq.n	23fcb6a <__aeabi_dmul+0x24a>
 23fcb36:	ea94 0f0c 	teq	r4, ip
 23fcb3a:	d102      	bne.n	23fcb42 <__aeabi_dmul+0x222>
 23fcb3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 23fcb40:	d113      	bne.n	23fcb6a <__aeabi_dmul+0x24a>
 23fcb42:	ea95 0f0c 	teq	r5, ip
 23fcb46:	d105      	bne.n	23fcb54 <__aeabi_dmul+0x234>
 23fcb48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 23fcb4c:	bf1c      	itt	ne
 23fcb4e:	4610      	movne	r0, r2
 23fcb50:	4619      	movne	r1, r3
 23fcb52:	d10a      	bne.n	23fcb6a <__aeabi_dmul+0x24a>
 23fcb54:	ea81 0103 	eor.w	r1, r1, r3
 23fcb58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 23fcb5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fcb60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 23fcb64:	f04f 0000 	mov.w	r0, #0
 23fcb68:	bd70      	pop	{r4, r5, r6, pc}
 23fcb6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 23fcb6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 23fcb72:	bd70      	pop	{r4, r5, r6, pc}

023fcb74 <__aeabi_ddiv>:
 23fcb74:	b570      	push	{r4, r5, r6, lr}
 23fcb76:	f04f 0cff 	mov.w	ip, #255	; 0xff
 23fcb7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 23fcb7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 23fcb82:	bf1d      	ittte	ne
 23fcb84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 23fcb88:	ea94 0f0c 	teqne	r4, ip
 23fcb8c:	ea95 0f0c 	teqne	r5, ip
 23fcb90:	f000 f8a7 	bleq	23fcce2 <__aeabi_ddiv+0x16e>
 23fcb94:	eba4 0405 	sub.w	r4, r4, r5
 23fcb98:	ea81 0e03 	eor.w	lr, r1, r3
 23fcb9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fcba0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 23fcba4:	f000 8088 	beq.w	23fccb8 <__aeabi_ddiv+0x144>
 23fcba8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 23fcbac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 23fcbb0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 23fcbb4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 23fcbb8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 23fcbbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 23fcbc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 23fcbc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 23fcbc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 23fcbcc:	429d      	cmp	r5, r3
 23fcbce:	bf08      	it	eq
 23fcbd0:	4296      	cmpeq	r6, r2
 23fcbd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 23fcbd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 23fcbda:	d202      	bcs.n	23fcbe2 <__aeabi_ddiv+0x6e>
 23fcbdc:	085b      	lsrs	r3, r3, #1
 23fcbde:	ea4f 0232 	mov.w	r2, r2, rrx
 23fcbe2:	1ab6      	subs	r6, r6, r2
 23fcbe4:	eb65 0503 	sbc.w	r5, r5, r3
 23fcbe8:	085b      	lsrs	r3, r3, #1
 23fcbea:	ea4f 0232 	mov.w	r2, r2, rrx
 23fcbee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 23fcbf2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 23fcbf6:	ebb6 0e02 	subs.w	lr, r6, r2
 23fcbfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fcbfe:	bf22      	ittt	cs
 23fcc00:	1ab6      	subcs	r6, r6, r2
 23fcc02:	4675      	movcs	r5, lr
 23fcc04:	ea40 000c 	orrcs.w	r0, r0, ip
 23fcc08:	085b      	lsrs	r3, r3, #1
 23fcc0a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fcc0e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fcc12:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fcc16:	bf22      	ittt	cs
 23fcc18:	1ab6      	subcs	r6, r6, r2
 23fcc1a:	4675      	movcs	r5, lr
 23fcc1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 23fcc20:	085b      	lsrs	r3, r3, #1
 23fcc22:	ea4f 0232 	mov.w	r2, r2, rrx
 23fcc26:	ebb6 0e02 	subs.w	lr, r6, r2
 23fcc2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fcc2e:	bf22      	ittt	cs
 23fcc30:	1ab6      	subcs	r6, r6, r2
 23fcc32:	4675      	movcs	r5, lr
 23fcc34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 23fcc38:	085b      	lsrs	r3, r3, #1
 23fcc3a:	ea4f 0232 	mov.w	r2, r2, rrx
 23fcc3e:	ebb6 0e02 	subs.w	lr, r6, r2
 23fcc42:	eb75 0e03 	sbcs.w	lr, r5, r3
 23fcc46:	bf22      	ittt	cs
 23fcc48:	1ab6      	subcs	r6, r6, r2
 23fcc4a:	4675      	movcs	r5, lr
 23fcc4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 23fcc50:	ea55 0e06 	orrs.w	lr, r5, r6
 23fcc54:	d018      	beq.n	23fcc88 <__aeabi_ddiv+0x114>
 23fcc56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 23fcc5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 23fcc5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 23fcc62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 23fcc66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 23fcc6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 23fcc6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 23fcc72:	d1c0      	bne.n	23fcbf6 <__aeabi_ddiv+0x82>
 23fcc74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fcc78:	d10b      	bne.n	23fcc92 <__aeabi_ddiv+0x11e>
 23fcc7a:	ea41 0100 	orr.w	r1, r1, r0
 23fcc7e:	f04f 0000 	mov.w	r0, #0
 23fcc82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 23fcc86:	e7b6      	b.n	23fcbf6 <__aeabi_ddiv+0x82>
 23fcc88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 23fcc8c:	bf04      	itt	eq
 23fcc8e:	4301      	orreq	r1, r0
 23fcc90:	2000      	moveq	r0, #0
 23fcc92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 23fcc96:	bf88      	it	hi
 23fcc98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 23fcc9c:	f63f aeaf 	bhi.w	23fc9fe <__aeabi_dmul+0xde>
 23fcca0:	ebb5 0c03 	subs.w	ip, r5, r3
 23fcca4:	bf04      	itt	eq
 23fcca6:	ebb6 0c02 	subseq.w	ip, r6, r2
 23fccaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 23fccae:	f150 0000 	adcs.w	r0, r0, #0
 23fccb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 23fccb6:	bd70      	pop	{r4, r5, r6, pc}
 23fccb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 23fccbc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 23fccc0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 23fccc4:	bfc2      	ittt	gt
 23fccc6:	ebd4 050c 	rsbsgt	r5, r4, ip
 23fccca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 23fccce:	bd70      	popgt	{r4, r5, r6, pc}
 23fccd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 23fccd4:	f04f 0e00 	mov.w	lr, #0
 23fccd8:	3c01      	subs	r4, #1
 23fccda:	e690      	b.n	23fc9fe <__aeabi_dmul+0xde>
 23fccdc:	ea45 0e06 	orr.w	lr, r5, r6
 23fcce0:	e68d      	b.n	23fc9fe <__aeabi_dmul+0xde>
 23fcce2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 23fcce6:	ea94 0f0c 	teq	r4, ip
 23fccea:	bf08      	it	eq
 23fccec:	ea95 0f0c 	teqeq	r5, ip
 23fccf0:	f43f af3b 	beq.w	23fcb6a <__aeabi_dmul+0x24a>
 23fccf4:	ea94 0f0c 	teq	r4, ip
 23fccf8:	d10a      	bne.n	23fcd10 <__aeabi_ddiv+0x19c>
 23fccfa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 23fccfe:	f47f af34 	bne.w	23fcb6a <__aeabi_dmul+0x24a>
 23fcd02:	ea95 0f0c 	teq	r5, ip
 23fcd06:	f47f af25 	bne.w	23fcb54 <__aeabi_dmul+0x234>
 23fcd0a:	4610      	mov	r0, r2
 23fcd0c:	4619      	mov	r1, r3
 23fcd0e:	e72c      	b.n	23fcb6a <__aeabi_dmul+0x24a>
 23fcd10:	ea95 0f0c 	teq	r5, ip
 23fcd14:	d106      	bne.n	23fcd24 <__aeabi_ddiv+0x1b0>
 23fcd16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 23fcd1a:	f43f aefd 	beq.w	23fcb18 <__aeabi_dmul+0x1f8>
 23fcd1e:	4610      	mov	r0, r2
 23fcd20:	4619      	mov	r1, r3
 23fcd22:	e722      	b.n	23fcb6a <__aeabi_dmul+0x24a>
 23fcd24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 23fcd28:	bf18      	it	ne
 23fcd2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 23fcd2e:	f47f aec5 	bne.w	23fcabc <__aeabi_dmul+0x19c>
 23fcd32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 23fcd36:	f47f af0d 	bne.w	23fcb54 <__aeabi_dmul+0x234>
 23fcd3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 23fcd3e:	f47f aeeb 	bne.w	23fcb18 <__aeabi_dmul+0x1f8>
 23fcd42:	e712      	b.n	23fcb6a <__aeabi_dmul+0x24a>

023fcd44 <__gedf2>:
 23fcd44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 23fcd48:	e006      	b.n	23fcd58 <__cmpdf2+0x4>
 23fcd4a:	bf00      	nop

023fcd4c <__ledf2>:
 23fcd4c:	f04f 0c01 	mov.w	ip, #1
 23fcd50:	e002      	b.n	23fcd58 <__cmpdf2+0x4>
 23fcd52:	bf00      	nop

023fcd54 <__cmpdf2>:
 23fcd54:	f04f 0c01 	mov.w	ip, #1
 23fcd58:	f84d cd04 	str.w	ip, [sp, #-4]!
 23fcd5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fcd60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fcd64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fcd68:	bf18      	it	ne
 23fcd6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 23fcd6e:	d01b      	beq.n	23fcda8 <__cmpdf2+0x54>
 23fcd70:	b001      	add	sp, #4
 23fcd72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 23fcd76:	bf0c      	ite	eq
 23fcd78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 23fcd7c:	ea91 0f03 	teqne	r1, r3
 23fcd80:	bf02      	ittt	eq
 23fcd82:	ea90 0f02 	teqeq	r0, r2
 23fcd86:	2000      	moveq	r0, #0
 23fcd88:	4770      	bxeq	lr
 23fcd8a:	f110 0f00 	cmn.w	r0, #0
 23fcd8e:	ea91 0f03 	teq	r1, r3
 23fcd92:	bf58      	it	pl
 23fcd94:	4299      	cmppl	r1, r3
 23fcd96:	bf08      	it	eq
 23fcd98:	4290      	cmpeq	r0, r2
 23fcd9a:	bf2c      	ite	cs
 23fcd9c:	17d8      	asrcs	r0, r3, #31
 23fcd9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 23fcda2:	f040 0001 	orr.w	r0, r0, #1
 23fcda6:	4770      	bx	lr
 23fcda8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 23fcdac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fcdb0:	d102      	bne.n	23fcdb8 <__cmpdf2+0x64>
 23fcdb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 23fcdb6:	d107      	bne.n	23fcdc8 <__cmpdf2+0x74>
 23fcdb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 23fcdbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 23fcdc0:	d1d6      	bne.n	23fcd70 <__cmpdf2+0x1c>
 23fcdc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 23fcdc6:	d0d3      	beq.n	23fcd70 <__cmpdf2+0x1c>
 23fcdc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 23fcdcc:	4770      	bx	lr
 23fcdce:	bf00      	nop

023fcdd0 <__aeabi_cdrcmple>:
 23fcdd0:	4684      	mov	ip, r0
 23fcdd2:	4610      	mov	r0, r2
 23fcdd4:	4662      	mov	r2, ip
 23fcdd6:	468c      	mov	ip, r1
 23fcdd8:	4619      	mov	r1, r3
 23fcdda:	4663      	mov	r3, ip
 23fcddc:	e000      	b.n	23fcde0 <__aeabi_cdcmpeq>
 23fcdde:	bf00      	nop

023fcde0 <__aeabi_cdcmpeq>:
 23fcde0:	b501      	push	{r0, lr}
 23fcde2:	f7ff ffb7 	bl	23fcd54 <__cmpdf2>
 23fcde6:	2800      	cmp	r0, #0
 23fcde8:	bf48      	it	mi
 23fcdea:	f110 0f00 	cmnmi.w	r0, #0
 23fcdee:	bd01      	pop	{r0, pc}

023fcdf0 <__aeabi_dcmpeq>:
 23fcdf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fcdf4:	f7ff fff4 	bl	23fcde0 <__aeabi_cdcmpeq>
 23fcdf8:	bf0c      	ite	eq
 23fcdfa:	2001      	moveq	r0, #1
 23fcdfc:	2000      	movne	r0, #0
 23fcdfe:	f85d fb08 	ldr.w	pc, [sp], #8
 23fce02:	bf00      	nop

023fce04 <__aeabi_dcmplt>:
 23fce04:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fce08:	f7ff ffea 	bl	23fcde0 <__aeabi_cdcmpeq>
 23fce0c:	bf34      	ite	cc
 23fce0e:	2001      	movcc	r0, #1
 23fce10:	2000      	movcs	r0, #0
 23fce12:	f85d fb08 	ldr.w	pc, [sp], #8
 23fce16:	bf00      	nop

023fce18 <__aeabi_dcmple>:
 23fce18:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fce1c:	f7ff ffe0 	bl	23fcde0 <__aeabi_cdcmpeq>
 23fce20:	bf94      	ite	ls
 23fce22:	2001      	movls	r0, #1
 23fce24:	2000      	movhi	r0, #0
 23fce26:	f85d fb08 	ldr.w	pc, [sp], #8
 23fce2a:	bf00      	nop

023fce2c <__aeabi_dcmpge>:
 23fce2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fce30:	f7ff ffce 	bl	23fcdd0 <__aeabi_cdrcmple>
 23fce34:	bf94      	ite	ls
 23fce36:	2001      	movls	r0, #1
 23fce38:	2000      	movhi	r0, #0
 23fce3a:	f85d fb08 	ldr.w	pc, [sp], #8
 23fce3e:	bf00      	nop

023fce40 <__aeabi_dcmpgt>:
 23fce40:	f84d ed08 	str.w	lr, [sp, #-8]!
 23fce44:	f7ff ffc4 	bl	23fcdd0 <__aeabi_cdrcmple>
 23fce48:	bf34      	ite	cc
 23fce4a:	2001      	movcc	r0, #1
 23fce4c:	2000      	movcs	r0, #0
 23fce4e:	f85d fb08 	ldr.w	pc, [sp], #8
 23fce52:	bf00      	nop

023fce54 <__aeabi_d2uiz>:
 23fce54:	004a      	lsls	r2, r1, #1
 23fce56:	d211      	bcs.n	23fce7c <__aeabi_d2uiz+0x28>
 23fce58:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 23fce5c:	d211      	bcs.n	23fce82 <__aeabi_d2uiz+0x2e>
 23fce5e:	d50d      	bpl.n	23fce7c <__aeabi_d2uiz+0x28>
 23fce60:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 23fce64:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 23fce68:	d40e      	bmi.n	23fce88 <__aeabi_d2uiz+0x34>
 23fce6a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 23fce6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 23fce72:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 23fce76:	fa23 f002 	lsr.w	r0, r3, r2
 23fce7a:	4770      	bx	lr
 23fce7c:	f04f 0000 	mov.w	r0, #0
 23fce80:	4770      	bx	lr
 23fce82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 23fce86:	d102      	bne.n	23fce8e <__aeabi_d2uiz+0x3a>
 23fce88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23fce8c:	4770      	bx	lr
 23fce8e:	f04f 0000 	mov.w	r0, #0
 23fce92:	4770      	bx	lr

023fce94 <__aeabi_uldivmod>:
 23fce94:	b953      	cbnz	r3, 23fceac <__aeabi_uldivmod+0x18>
 23fce96:	b94a      	cbnz	r2, 23fceac <__aeabi_uldivmod+0x18>
 23fce98:	2900      	cmp	r1, #0
 23fce9a:	bf08      	it	eq
 23fce9c:	2800      	cmpeq	r0, #0
 23fce9e:	bf1c      	itt	ne
 23fcea0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 23fcea4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 23fcea8:	f000 b9a0 	b.w	23fd1ec <__aeabi_idiv0>
 23fceac:	f1ad 0c08 	sub.w	ip, sp, #8
 23fceb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 23fceb4:	f000 f824 	bl	23fcf00 <__udivmoddi4>
 23fceb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 23fcebc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 23fcec0:	b004      	add	sp, #16
 23fcec2:	4770      	bx	lr

023fcec4 <__aeabi_d2ulz>:
 23fcec4:	b5d0      	push	{r4, r6, r7, lr}
 23fcec6:	2200      	movs	r2, #0
 23fcec8:	4b0b      	ldr	r3, [pc, #44]	; (23fcef8 <__aeabi_d2ulz+0x34>)
 23fceca:	4606      	mov	r6, r0
 23fcecc:	460f      	mov	r7, r1
 23fcece:	f7ff fd27 	bl	23fc920 <__aeabi_dmul>
 23fced2:	f7ff ffbf 	bl	23fce54 <__aeabi_d2uiz>
 23fced6:	4604      	mov	r4, r0
 23fced8:	f7ff fca8 	bl	23fc82c <__aeabi_ui2d>
 23fcedc:	2200      	movs	r2, #0
 23fcede:	4b07      	ldr	r3, [pc, #28]	; (23fcefc <__aeabi_d2ulz+0x38>)
 23fcee0:	f7ff fd1e 	bl	23fc920 <__aeabi_dmul>
 23fcee4:	4602      	mov	r2, r0
 23fcee6:	460b      	mov	r3, r1
 23fcee8:	4630      	mov	r0, r6
 23fceea:	4639      	mov	r1, r7
 23fceec:	f7ff fb60 	bl	23fc5b0 <__aeabi_dsub>
 23fcef0:	f7ff ffb0 	bl	23fce54 <__aeabi_d2uiz>
 23fcef4:	4621      	mov	r1, r4
 23fcef6:	bdd0      	pop	{r4, r6, r7, pc}
 23fcef8:	3df00000 	.word	0x3df00000
 23fcefc:	41f00000 	.word	0x41f00000

023fcf00 <__udivmoddi4>:
 23fcf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fcf04:	9d09      	ldr	r5, [sp, #36]	; 0x24
 23fcf06:	4604      	mov	r4, r0
 23fcf08:	460f      	mov	r7, r1
 23fcf0a:	2b00      	cmp	r3, #0
 23fcf0c:	d148      	bne.n	23fcfa0 <__udivmoddi4+0xa0>
 23fcf0e:	428a      	cmp	r2, r1
 23fcf10:	4694      	mov	ip, r2
 23fcf12:	d961      	bls.n	23fcfd8 <__udivmoddi4+0xd8>
 23fcf14:	fab2 f382 	clz	r3, r2
 23fcf18:	b143      	cbz	r3, 23fcf2c <__udivmoddi4+0x2c>
 23fcf1a:	f1c3 0120 	rsb	r1, r3, #32
 23fcf1e:	409f      	lsls	r7, r3
 23fcf20:	fa02 fc03 	lsl.w	ip, r2, r3
 23fcf24:	409c      	lsls	r4, r3
 23fcf26:	fa20 f101 	lsr.w	r1, r0, r1
 23fcf2a:	430f      	orrs	r7, r1
 23fcf2c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 23fcf30:	fa1f fe8c 	uxth.w	lr, ip
 23fcf34:	0c22      	lsrs	r2, r4, #16
 23fcf36:	fbb7 f6f1 	udiv	r6, r7, r1
 23fcf3a:	fb01 7716 	mls	r7, r1, r6, r7
 23fcf3e:	fb06 f00e 	mul.w	r0, r6, lr
 23fcf42:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 23fcf46:	4290      	cmp	r0, r2
 23fcf48:	d908      	bls.n	23fcf5c <__udivmoddi4+0x5c>
 23fcf4a:	eb1c 0202 	adds.w	r2, ip, r2
 23fcf4e:	f106 37ff 	add.w	r7, r6, #4294967295	; 0xffffffff
 23fcf52:	d202      	bcs.n	23fcf5a <__udivmoddi4+0x5a>
 23fcf54:	4290      	cmp	r0, r2
 23fcf56:	f200 8137 	bhi.w	23fd1c8 <__udivmoddi4+0x2c8>
 23fcf5a:	463e      	mov	r6, r7
 23fcf5c:	1a12      	subs	r2, r2, r0
 23fcf5e:	b2a4      	uxth	r4, r4
 23fcf60:	fbb2 f0f1 	udiv	r0, r2, r1
 23fcf64:	fb01 2210 	mls	r2, r1, r0, r2
 23fcf68:	fb00 fe0e 	mul.w	lr, r0, lr
 23fcf6c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 23fcf70:	45a6      	cmp	lr, r4
 23fcf72:	d908      	bls.n	23fcf86 <__udivmoddi4+0x86>
 23fcf74:	eb1c 0404 	adds.w	r4, ip, r4
 23fcf78:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 23fcf7c:	d202      	bcs.n	23fcf84 <__udivmoddi4+0x84>
 23fcf7e:	45a6      	cmp	lr, r4
 23fcf80:	f200 811c 	bhi.w	23fd1bc <__udivmoddi4+0x2bc>
 23fcf84:	4610      	mov	r0, r2
 23fcf86:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 23fcf8a:	eba4 040e 	sub.w	r4, r4, lr
 23fcf8e:	2600      	movs	r6, #0
 23fcf90:	b11d      	cbz	r5, 23fcf9a <__udivmoddi4+0x9a>
 23fcf92:	40dc      	lsrs	r4, r3
 23fcf94:	2300      	movs	r3, #0
 23fcf96:	e9c5 4300 	strd	r4, r3, [r5]
 23fcf9a:	4631      	mov	r1, r6
 23fcf9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcfa0:	428b      	cmp	r3, r1
 23fcfa2:	d909      	bls.n	23fcfb8 <__udivmoddi4+0xb8>
 23fcfa4:	2d00      	cmp	r5, #0
 23fcfa6:	f000 80fd 	beq.w	23fd1a4 <__udivmoddi4+0x2a4>
 23fcfaa:	2600      	movs	r6, #0
 23fcfac:	e9c5 0100 	strd	r0, r1, [r5]
 23fcfb0:	4630      	mov	r0, r6
 23fcfb2:	4631      	mov	r1, r6
 23fcfb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23fcfb8:	fab3 f683 	clz	r6, r3
 23fcfbc:	2e00      	cmp	r6, #0
 23fcfbe:	d14b      	bne.n	23fd058 <__udivmoddi4+0x158>
 23fcfc0:	428b      	cmp	r3, r1
 23fcfc2:	f0c0 80f2 	bcc.w	23fd1aa <__udivmoddi4+0x2aa>
 23fcfc6:	4282      	cmp	r2, r0
 23fcfc8:	f240 80ef 	bls.w	23fd1aa <__udivmoddi4+0x2aa>
 23fcfcc:	4630      	mov	r0, r6
 23fcfce:	2d00      	cmp	r5, #0
 23fcfd0:	d0e3      	beq.n	23fcf9a <__udivmoddi4+0x9a>
 23fcfd2:	e9c5 4700 	strd	r4, r7, [r5]
 23fcfd6:	e7e0      	b.n	23fcf9a <__udivmoddi4+0x9a>
 23fcfd8:	b902      	cbnz	r2, 23fcfdc <__udivmoddi4+0xdc>
 23fcfda:	deff      	udf	#255	; 0xff
 23fcfdc:	fab2 f382 	clz	r3, r2
 23fcfe0:	2b00      	cmp	r3, #0
 23fcfe2:	f040 809d 	bne.w	23fd120 <__udivmoddi4+0x220>
 23fcfe6:	1a89      	subs	r1, r1, r2
 23fcfe8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 23fcfec:	b297      	uxth	r7, r2
 23fcfee:	2601      	movs	r6, #1
 23fcff0:	0c20      	lsrs	r0, r4, #16
 23fcff2:	fbb1 f2fe 	udiv	r2, r1, lr
 23fcff6:	fb0e 1112 	mls	r1, lr, r2, r1
 23fcffa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fcffe:	fb07 f002 	mul.w	r0, r7, r2
 23fd002:	4288      	cmp	r0, r1
 23fd004:	d90f      	bls.n	23fd026 <__udivmoddi4+0x126>
 23fd006:	eb1c 0101 	adds.w	r1, ip, r1
 23fd00a:	f102 38ff 	add.w	r8, r2, #4294967295	; 0xffffffff
 23fd00e:	bf2c      	ite	cs
 23fd010:	f04f 0901 	movcs.w	r9, #1
 23fd014:	f04f 0900 	movcc.w	r9, #0
 23fd018:	4288      	cmp	r0, r1
 23fd01a:	d903      	bls.n	23fd024 <__udivmoddi4+0x124>
 23fd01c:	f1b9 0f00 	cmp.w	r9, #0
 23fd020:	f000 80cf 	beq.w	23fd1c2 <__udivmoddi4+0x2c2>
 23fd024:	4642      	mov	r2, r8
 23fd026:	1a09      	subs	r1, r1, r0
 23fd028:	b2a4      	uxth	r4, r4
 23fd02a:	fbb1 f0fe 	udiv	r0, r1, lr
 23fd02e:	fb0e 1110 	mls	r1, lr, r0, r1
 23fd032:	fb00 f707 	mul.w	r7, r0, r7
 23fd036:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 23fd03a:	42a7      	cmp	r7, r4
 23fd03c:	d908      	bls.n	23fd050 <__udivmoddi4+0x150>
 23fd03e:	eb1c 0404 	adds.w	r4, ip, r4
 23fd042:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 23fd046:	d202      	bcs.n	23fd04e <__udivmoddi4+0x14e>
 23fd048:	42a7      	cmp	r7, r4
 23fd04a:	f200 80b4 	bhi.w	23fd1b6 <__udivmoddi4+0x2b6>
 23fd04e:	4608      	mov	r0, r1
 23fd050:	1be4      	subs	r4, r4, r7
 23fd052:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 23fd056:	e79b      	b.n	23fcf90 <__udivmoddi4+0x90>
 23fd058:	f1c6 0720 	rsb	r7, r6, #32
 23fd05c:	40b3      	lsls	r3, r6
 23fd05e:	fa01 f406 	lsl.w	r4, r1, r6
 23fd062:	fa22 fc07 	lsr.w	ip, r2, r7
 23fd066:	40f9      	lsrs	r1, r7
 23fd068:	40b2      	lsls	r2, r6
 23fd06a:	ea4c 0c03 	orr.w	ip, ip, r3
 23fd06e:	fa20 f307 	lsr.w	r3, r0, r7
 23fd072:	ea4f 491c 	mov.w	r9, ip, lsr #16
 23fd076:	431c      	orrs	r4, r3
 23fd078:	fa1f fe8c 	uxth.w	lr, ip
 23fd07c:	fa00 f306 	lsl.w	r3, r0, r6
 23fd080:	0c20      	lsrs	r0, r4, #16
 23fd082:	fbb1 f8f9 	udiv	r8, r1, r9
 23fd086:	fb09 1118 	mls	r1, r9, r8, r1
 23fd08a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 23fd08e:	fb08 f00e 	mul.w	r0, r8, lr
 23fd092:	4288      	cmp	r0, r1
 23fd094:	d90f      	bls.n	23fd0b6 <__udivmoddi4+0x1b6>
 23fd096:	eb1c 0101 	adds.w	r1, ip, r1
 23fd09a:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 23fd09e:	bf2c      	ite	cs
 23fd0a0:	f04f 0b01 	movcs.w	fp, #1
 23fd0a4:	f04f 0b00 	movcc.w	fp, #0
 23fd0a8:	4288      	cmp	r0, r1
 23fd0aa:	d903      	bls.n	23fd0b4 <__udivmoddi4+0x1b4>
 23fd0ac:	f1bb 0f00 	cmp.w	fp, #0
 23fd0b0:	f000 808d 	beq.w	23fd1ce <__udivmoddi4+0x2ce>
 23fd0b4:	46d0      	mov	r8, sl
 23fd0b6:	1a09      	subs	r1, r1, r0
 23fd0b8:	b2a4      	uxth	r4, r4
 23fd0ba:	fbb1 f0f9 	udiv	r0, r1, r9
 23fd0be:	fb09 1110 	mls	r1, r9, r0, r1
 23fd0c2:	fb00 fe0e 	mul.w	lr, r0, lr
 23fd0c6:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 23fd0ca:	458e      	cmp	lr, r1
 23fd0cc:	d907      	bls.n	23fd0de <__udivmoddi4+0x1de>
 23fd0ce:	eb1c 0101 	adds.w	r1, ip, r1
 23fd0d2:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 23fd0d6:	d201      	bcs.n	23fd0dc <__udivmoddi4+0x1dc>
 23fd0d8:	458e      	cmp	lr, r1
 23fd0da:	d87f      	bhi.n	23fd1dc <__udivmoddi4+0x2dc>
 23fd0dc:	4620      	mov	r0, r4
 23fd0de:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 23fd0e2:	eba1 010e 	sub.w	r1, r1, lr
 23fd0e6:	fba0 9802 	umull	r9, r8, r0, r2
 23fd0ea:	4541      	cmp	r1, r8
 23fd0ec:	464c      	mov	r4, r9
 23fd0ee:	46c6      	mov	lr, r8
 23fd0f0:	d302      	bcc.n	23fd0f8 <__udivmoddi4+0x1f8>
 23fd0f2:	d106      	bne.n	23fd102 <__udivmoddi4+0x202>
 23fd0f4:	454b      	cmp	r3, r9
 23fd0f6:	d204      	bcs.n	23fd102 <__udivmoddi4+0x202>
 23fd0f8:	3801      	subs	r0, #1
 23fd0fa:	ebb9 0402 	subs.w	r4, r9, r2
 23fd0fe:	eb68 0e0c 	sbc.w	lr, r8, ip
 23fd102:	2d00      	cmp	r5, #0
 23fd104:	d070      	beq.n	23fd1e8 <__udivmoddi4+0x2e8>
 23fd106:	1b1a      	subs	r2, r3, r4
 23fd108:	eb61 010e 	sbc.w	r1, r1, lr
 23fd10c:	fa22 f306 	lsr.w	r3, r2, r6
 23fd110:	fa01 f707 	lsl.w	r7, r1, r7
 23fd114:	40f1      	lsrs	r1, r6
 23fd116:	2600      	movs	r6, #0
 23fd118:	431f      	orrs	r7, r3
 23fd11a:	e9c5 7100 	strd	r7, r1, [r5]
 23fd11e:	e73c      	b.n	23fcf9a <__udivmoddi4+0x9a>
 23fd120:	fa02 fc03 	lsl.w	ip, r2, r3
 23fd124:	f1c3 0020 	rsb	r0, r3, #32
 23fd128:	fa01 f203 	lsl.w	r2, r1, r3
 23fd12c:	fa21 f600 	lsr.w	r6, r1, r0
 23fd130:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 23fd134:	fa24 f100 	lsr.w	r1, r4, r0
 23fd138:	fa1f f78c 	uxth.w	r7, ip
 23fd13c:	409c      	lsls	r4, r3
 23fd13e:	4311      	orrs	r1, r2
 23fd140:	fbb6 f0fe 	udiv	r0, r6, lr
 23fd144:	0c0a      	lsrs	r2, r1, #16
 23fd146:	fb0e 6610 	mls	r6, lr, r0, r6
 23fd14a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 23fd14e:	fb00 f607 	mul.w	r6, r0, r7
 23fd152:	4296      	cmp	r6, r2
 23fd154:	d90e      	bls.n	23fd174 <__udivmoddi4+0x274>
 23fd156:	eb1c 0202 	adds.w	r2, ip, r2
 23fd15a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 23fd15e:	bf2c      	ite	cs
 23fd160:	f04f 0901 	movcs.w	r9, #1
 23fd164:	f04f 0900 	movcc.w	r9, #0
 23fd168:	4296      	cmp	r6, r2
 23fd16a:	d902      	bls.n	23fd172 <__udivmoddi4+0x272>
 23fd16c:	f1b9 0f00 	cmp.w	r9, #0
 23fd170:	d031      	beq.n	23fd1d6 <__udivmoddi4+0x2d6>
 23fd172:	4640      	mov	r0, r8
 23fd174:	1b92      	subs	r2, r2, r6
 23fd176:	b289      	uxth	r1, r1
 23fd178:	fbb2 f6fe 	udiv	r6, r2, lr
 23fd17c:	fb0e 2216 	mls	r2, lr, r6, r2
 23fd180:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 23fd184:	fb06 f207 	mul.w	r2, r6, r7
 23fd188:	428a      	cmp	r2, r1
 23fd18a:	d907      	bls.n	23fd19c <__udivmoddi4+0x29c>
 23fd18c:	eb1c 0101 	adds.w	r1, ip, r1
 23fd190:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 23fd194:	d201      	bcs.n	23fd19a <__udivmoddi4+0x29a>
 23fd196:	428a      	cmp	r2, r1
 23fd198:	d823      	bhi.n	23fd1e2 <__udivmoddi4+0x2e2>
 23fd19a:	4646      	mov	r6, r8
 23fd19c:	1a89      	subs	r1, r1, r2
 23fd19e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 23fd1a2:	e725      	b.n	23fcff0 <__udivmoddi4+0xf0>
 23fd1a4:	462e      	mov	r6, r5
 23fd1a6:	4628      	mov	r0, r5
 23fd1a8:	e6f7      	b.n	23fcf9a <__udivmoddi4+0x9a>
 23fd1aa:	1a84      	subs	r4, r0, r2
 23fd1ac:	eb61 0303 	sbc.w	r3, r1, r3
 23fd1b0:	2001      	movs	r0, #1
 23fd1b2:	461f      	mov	r7, r3
 23fd1b4:	e70b      	b.n	23fcfce <__udivmoddi4+0xce>
 23fd1b6:	4464      	add	r4, ip
 23fd1b8:	3802      	subs	r0, #2
 23fd1ba:	e749      	b.n	23fd050 <__udivmoddi4+0x150>
 23fd1bc:	4464      	add	r4, ip
 23fd1be:	3802      	subs	r0, #2
 23fd1c0:	e6e1      	b.n	23fcf86 <__udivmoddi4+0x86>
 23fd1c2:	3a02      	subs	r2, #2
 23fd1c4:	4461      	add	r1, ip
 23fd1c6:	e72e      	b.n	23fd026 <__udivmoddi4+0x126>
 23fd1c8:	3e02      	subs	r6, #2
 23fd1ca:	4462      	add	r2, ip
 23fd1cc:	e6c6      	b.n	23fcf5c <__udivmoddi4+0x5c>
 23fd1ce:	f1a8 0802 	sub.w	r8, r8, #2
 23fd1d2:	4461      	add	r1, ip
 23fd1d4:	e76f      	b.n	23fd0b6 <__udivmoddi4+0x1b6>
 23fd1d6:	3802      	subs	r0, #2
 23fd1d8:	4462      	add	r2, ip
 23fd1da:	e7cb      	b.n	23fd174 <__udivmoddi4+0x274>
 23fd1dc:	3802      	subs	r0, #2
 23fd1de:	4461      	add	r1, ip
 23fd1e0:	e77d      	b.n	23fd0de <__udivmoddi4+0x1de>
 23fd1e2:	3e02      	subs	r6, #2
 23fd1e4:	4461      	add	r1, ip
 23fd1e6:	e7d9      	b.n	23fd19c <__udivmoddi4+0x29c>
 23fd1e8:	462e      	mov	r6, r5
 23fd1ea:	e6d6      	b.n	23fcf9a <__udivmoddi4+0x9a>

023fd1ec <__aeabi_idiv0>:
 23fd1ec:	4770      	bx	lr
 23fd1ee:	bf00      	nop

023fd1f0 <strlen>:
 23fd1f0:	4603      	mov	r3, r0
 23fd1f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 23fd1f6:	2a00      	cmp	r2, #0
 23fd1f8:	d1fb      	bne.n	23fd1f2 <strlen+0x2>
 23fd1fa:	1a18      	subs	r0, r3, r0
 23fd1fc:	3801      	subs	r0, #1
 23fd1fe:	4770      	bx	lr

023fd200 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 23fd200:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 23fd202:	f002 fb21 	bl	23ff848 <module_user_init_hook>

    // invoke constructors
    unsigned ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd206:	2500      	movs	r5, #0
 23fd208:	4e05      	ldr	r6, [pc, #20]	; (23fd220 <module_user_init+0x20>)
 23fd20a:	4c06      	ldr	r4, [pc, #24]	; (23fd224 <module_user_init+0x24>)
 23fd20c:	1ba4      	subs	r4, r4, r6
 23fd20e:	08a4      	lsrs	r4, r4, #2
 23fd210:	42ac      	cmp	r4, r5
 23fd212:	d100      	bne.n	23fd216 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
 23fd214:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
 23fd216:	f856 3b04 	ldr.w	r3, [r6], #4
 23fd21a:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 23fd21c:	3501      	adds	r5, #1
 23fd21e:	e7f7      	b.n	23fd210 <module_user_init+0x10>
 23fd220:	023fffd8 	.word	0x023fffd8
 23fd224:	023ffffc 	.word	0x023ffffc

023fd228 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 23fd228:	f000 b816 	b.w	23fd258 <setup>

023fd22c <module_user_loop>:
}

void module_user_loop() {
 23fd22c:	b508      	push	{r3, lr}
    loop();
 23fd22e:	f000 fa0f 	bl	23fd650 <loop>
    _post_loop();
}
 23fd232:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
 23fd236:	f002 babf 	b.w	23ff7b8 <_post_loop>

023fd23a <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
 23fd23a:	f001 b9c3 	b.w	23fe5c4 <malloc>

023fd23e <_Znaj>:
 23fd23e:	f001 b9c1 	b.w	23fe5c4 <malloc>

023fd242 <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
 23fd242:	f001 b9cd 	b.w	23fe5e0 <free>

023fd246 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 23fd246:	7800      	ldrb	r0, [r0, #0]
 23fd248:	fab0 f080 	clz	r0, r0
 23fd24c:	0940      	lsrs	r0, r0, #5
 23fd24e:	4770      	bx	lr

023fd250 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 23fd250:	2301      	movs	r3, #1
 23fd252:	7003      	strb	r3, [r0, #0]
 23fd254:	4770      	bx	lr
	...

023fd258 <setup>:
                                                      // more accurate thge reading will be but will consume more power.

int sensorValue;                                      // The integer value (between 0 and 4095) that we read from the sensor


void setup() {
 23fd258:	b510      	push	{r4, lr}

    Wire.begin();
                               
    pinMode(XSHUT, OUTPUT);                                                                          // Set to LOW when using SYSTEM MODE SEMI_AUTOMATIC 
 23fd25a:	4c0c      	ldr	r4, [pc, #48]	; (23fd28c <setup+0x34>)
    Wire.begin();
 23fd25c:	f002 fbaa 	bl	23ff9b4 <_Z19__fetch_global_Wirev>
 23fd260:	f001 fd88 	bl	23fed74 <_ZN7TwoWire5beginEv>
    pinMode(XSHUT, OUTPUT);                                                                          // Set to LOW when using SYSTEM MODE SEMI_AUTOMATIC 
 23fd264:	8820      	ldrh	r0, [r4, #0]
 23fd266:	2101      	movs	r1, #1
 23fd268:	f002 fb5e 	bl	23ff928 <pinMode>
    digitalWrite(XSHUT, LOW);
 23fd26c:	8820      	ldrh	r0, [r4, #0]
    
    pinMode(LedPin, OUTPUT);
 23fd26e:	4c08      	ldr	r4, [pc, #32]	; (23fd290 <setup+0x38>)
    digitalWrite(XSHUT, LOW);
 23fd270:	2100      	movs	r1, #0
 23fd272:	f002 fb6a 	bl	23ff94a <digitalWrite>
    pinMode(LedPin, OUTPUT);
 23fd276:	8820      	ldrh	r0, [r4, #0]
 23fd278:	2101      	movs	r1, #1
 23fd27a:	f002 fb55 	bl	23ff928 <pinMode>
    digitalWrite(LedPin, LOW);
 23fd27e:	8820      	ldrh	r0, [r4, #0]
 23fd280:	2100      	movs	r1, #0
}
 23fd282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(LedPin, LOW);
 23fd286:	f002 bb60 	b.w	23ff94a <digitalWrite>
 23fd28a:	bf00      	nop
 23fd28c:	1007adcc 	.word	0x1007adcc
 23fd290:	1007adc8 	.word	0x1007adc8

023fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 23fd294:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 23fd296:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
 23fd298:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
 23fd29a:	b17c      	cbz	r4, 23fd2bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
 23fd29c:	6863      	ldr	r3, [r4, #4]
 23fd29e:	3b01      	subs	r3, #1
 23fd2a0:	6063      	str	r3, [r4, #4]
 23fd2a2:	b95b      	cbnz	r3, 23fd2bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
 23fd2a4:	6823      	ldr	r3, [r4, #0]
 23fd2a6:	4620      	mov	r0, r4
 23fd2a8:	689b      	ldr	r3, [r3, #8]
 23fd2aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 23fd2ac:	68a3      	ldr	r3, [r4, #8]
 23fd2ae:	3b01      	subs	r3, #1
 23fd2b0:	60a3      	str	r3, [r4, #8]
 23fd2b2:	b91b      	cbnz	r3, 23fd2bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 23fd2b4:	6823      	ldr	r3, [r4, #0]
 23fd2b6:	4620      	mov	r0, r4
 23fd2b8:	68db      	ldr	r3, [r3, #12]
 23fd2ba:	4798      	blx	r3
	  _M_pi->_M_release();
      }
 23fd2bc:	4628      	mov	r0, r5
 23fd2be:	bd38      	pop	{r3, r4, r5, pc}

023fd2c0 <_GLOBAL__sub_I_SystemMode>:

void loop() {

    ToF();
    Sleep();                                                                          // After readings system sleeps for duration set in Sleep() funtion
 23fd2c0:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23fd2c2:	2400      	movs	r4, #0
 23fd2c4:	2501      	movs	r5, #1
 23fd2c6:	4b0a      	ldr	r3, [pc, #40]	; (23fd2f0 <_GLOBAL__sub_I_SystemMode+0x30>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
 23fd2c8:	4a0a      	ldr	r2, [pc, #40]	; (23fd2f4 <_GLOBAL__sub_I_SystemMode+0x34>)
 23fd2ca:	701c      	strb	r4, [r3, #0]
 23fd2cc:	4b0a      	ldr	r3, [pc, #40]	; (23fd2f8 <_GLOBAL__sub_I_SystemMode+0x38>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23fd2ce:	2002      	movs	r0, #2
 23fd2d0:	701d      	strb	r5, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
 23fd2d2:	4b0a      	ldr	r3, [pc, #40]	; (23fd2fc <_GLOBAL__sub_I_SystemMode+0x3c>)
 23fd2d4:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
 23fd2d8:	609a      	str	r2, [r3, #8]
        set_system_mode(mode);
 23fd2da:	f000 ffeb 	bl	23fe2b4 <set_system_mode>
SYSTEM_THREAD(ENABLED);                                 // DANGER!!! //
 23fd2de:	4628      	mov	r0, r5
 23fd2e0:	4621      	mov	r1, r4
 23fd2e2:	f001 f803 	bl	23fe2ec <system_thread_set_state>
 23fd2e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
VL53L1X sensor;
 23fd2ea:	4805      	ldr	r0, [pc, #20]	; (23fd300 <_GLOBAL__sub_I_SystemMode+0x40>)
 23fd2ec:	f000 b9c6 	b.w	23fd67c <_ZN7VL53L1XC1Ev>
 23fd2f0:	1007ae48 	.word	0x1007ae48
 23fd2f4:	ffff0000 	.word	0xffff0000
 23fd2f8:	1007ae49 	.word	0x1007ae49
 23fd2fc:	1007ae3c 	.word	0x1007ae3c
 23fd300:	1007ae50 	.word	0x1007ae50

023fd304 <_Z3ToFv>:
void ToF() {
 23fd304:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fd306:	ed2d 8b02 	vpush	{d8}
    digitalWrite(XSHUT, HIGH);                                      // Enable ToF
 23fd30a:	4e8b      	ldr	r6, [pc, #556]	; (23fd538 <_Z3ToFv+0x234>)
    digitalWrite(LedPin, HIGH);                                     // Enable LED
 23fd30c:	4d8b      	ldr	r5, [pc, #556]	; (23fd53c <_Z3ToFv+0x238>)
void ToF() {
 23fd30e:	b08d      	sub	sp, #52	; 0x34
    digitalWrite(XSHUT, HIGH);                                      // Enable ToF
 23fd310:	2101      	movs	r1, #1
 23fd312:	8830      	ldrh	r0, [r6, #0]
 23fd314:	f002 fb19 	bl	23ff94a <digitalWrite>
    digitalWrite(LedPin, HIGH);                                     // Enable LED
 23fd318:	2101      	movs	r1, #1
 23fd31a:	8828      	ldrh	r0, [r5, #0]
 23fd31c:	f002 fb15 	bl	23ff94a <digitalWrite>
    Wire.setClock(400000);                                          // use 400 kHz I2C     
 23fd320:	f002 fb48 	bl	23ff9b4 <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
 23fd324:	4986      	ldr	r1, [pc, #536]	; (23fd540 <_Z3ToFv+0x23c>)
 23fd326:	f001 fd21 	bl	23fed6c <_ZN7TwoWire8setSpeedEm>
    sensor.init(0x29);
 23fd32a:	2101      	movs	r1, #1
 23fd32c:	4885      	ldr	r0, [pc, #532]	; (23fd544 <_Z3ToFv+0x240>)
 23fd32e:	f000 fcd2 	bl	23fdcd6 <_ZN7VL53L1X4initEb>
if (!sensor.init(0x29)) {
 23fd332:	2101      	movs	r1, #1
 23fd334:	4883      	ldr	r0, [pc, #524]	; (23fd544 <_Z3ToFv+0x240>)
 23fd336:	f000 fcce 	bl	23fdcd6 <_ZN7VL53L1X4initEb>
 23fd33a:	4b83      	ldr	r3, [pc, #524]	; (23fd548 <_Z3ToFv+0x244>)
 23fd33c:	4602      	mov	r2, r0
 23fd33e:	781b      	ldrb	r3, [r3, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fd340:	f88d 3000 	strb.w	r3, [sp]
 23fd344:	233c      	movs	r3, #60	; 0x3c
 23fd346:	b938      	cbnz	r0, 23fd358 <_Z3ToFv+0x54>
 23fd348:	a808      	add	r0, sp, #32
 23fd34a:	4980      	ldr	r1, [pc, #512]	; (23fd54c <_Z3ToFv+0x248>)
 23fd34c:	f001 fb1c 	bl	23fe988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 23fd350:	a809      	add	r0, sp, #36	; 0x24
 23fd352:	f7ff ff9f 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
     while (1);                                                                       //  DEBUG
 23fd356:	e7fe      	b.n	23fd356 <_Z3ToFv+0x52>
 23fd358:	2200      	movs	r2, #0
 23fd35a:	497d      	ldr	r1, [pc, #500]	; (23fd550 <_Z3ToFv+0x24c>)
 23fd35c:	a808      	add	r0, sp, #32
 23fd35e:	f001 fb13 	bl	23fe988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fd362:	a809      	add	r0, sp, #36	; 0x24
 23fd364:	f7ff ff96 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    sensor.setDistanceMode(VL53L1X::Long);
 23fd368:	2102      	movs	r1, #2
 23fd36a:	4876      	ldr	r0, [pc, #472]	; (23fd544 <_Z3ToFv+0x240>)
 23fd36c:	f000 fc3a 	bl	23fdbe4 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>
    sensor.setMeasurementTimingBudget(50000);
 23fd370:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fd374:	4873      	ldr	r0, [pc, #460]	; (23fd544 <_Z3ToFv+0x240>)
 23fd376:	f000 fbb7 	bl	23fdae8 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
    sensor.startContinuous(50);                                                       // timing budget -- 50ms default
 23fd37a:	2132      	movs	r1, #50	; 0x32
 23fd37c:	4871      	ldr	r0, [pc, #452]	; (23fd544 <_Z3ToFv+0x240>)
 23fd37e:	f000 fa3e 	bl	23fd7fe <_ZN7VL53L1X15startContinuousEm>
 23fd382:	2464      	movs	r4, #100	; 0x64
    int value_prev = 0;                                             // The integaer value of the "prevous" sample.
 23fd384:	ed9f 8a73 	vldr	s16, [pc, #460]	; 23fd554 <_Z3ToFv+0x250>
        int distance = sensor.read();                                                 //Get the result of the measurement from the sensor
 23fd388:	4f6e      	ldr	r7, [pc, #440]	; (23fd544 <_Z3ToFv+0x240>)
 23fd38a:	2101      	movs	r1, #1
 23fd38c:	4638      	mov	r0, r7
 23fd38e:	f000 fb57 	bl	23fda40 <_ZN7VL53L1X4readEb>
        val_now = float(distance);
 23fd392:	ee07 0a90 	vmov	s15, r0
        val_prev = float(value_prev);
 23fd396:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        val_now = float(distance);
 23fd39a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        accum = (val_now + val_prev);
 23fd39e:	ee78 7a27 	vadd.f32	s15, s16, s15
for (int k=0; k<numSamples; k++) {
 23fd3a2:	3c01      	subs	r4, #1
        value_prev = accum;
 23fd3a4:	eebd 8ae7 	vcvt.s32.f32	s16, s15
for (int k=0; k<numSamples; k++) {
 23fd3a8:	d1ef      	bne.n	23fd38a <_Z3ToFv+0x86>
        avgValue = accum / numSamples;
 23fd3aa:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 23fd558 <_Z3ToFv+0x254>
if (avgValue <=(L1_t) && avgValue >=(L1_b)) {            
 23fd3ae:	4b6b      	ldr	r3, [pc, #428]	; (23fd55c <_Z3ToFv+0x258>)
        avgValue = accum / numSamples;
 23fd3b0:	ee87 8a87 	vdiv.f32	s16, s15, s14
if (avgValue <=(L1_t) && avgValue >=(L1_b)) {            
 23fd3b4:	edd3 7a00 	vldr	s15, [r3]
 23fd3b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fd3bc:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd3c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd3c4:	4c66      	ldr	r4, [pc, #408]	; (23fd560 <_Z3ToFv+0x25c>)
 23fd3c6:	db2a      	blt.n	23fd41e <_Z3ToFv+0x11a>
 23fd3c8:	4b66      	ldr	r3, [pc, #408]	; (23fd564 <_Z3ToFv+0x260>)
 23fd3ca:	edd3 7a00 	vldr	s15, [r3]
 23fd3ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fd3d2:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd3d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd3da:	d820      	bhi.n	23fd41e <_Z3ToFv+0x11a>
        tof_level = 1;                               
 23fd3dc:	2301      	movs	r3, #1
    delay(50);
 23fd3de:	2032      	movs	r0, #50	; 0x32
    } else { tof_level = 4; 
 23fd3e0:	6023      	str	r3, [r4, #0]
    delay(50);
 23fd3e2:	f001 f951 	bl	23fe688 <delay>
    digitalWrite(XSHUT, LOW);                                      // Disable ToF1 
 23fd3e6:	8830      	ldrh	r0, [r6, #0]
if (tof_level != level) {                                          // only send data if Level has shifted
 23fd3e8:	4e5f      	ldr	r6, [pc, #380]	; (23fd568 <_Z3ToFv+0x264>)
    digitalWrite(XSHUT, LOW);                                      // Disable ToF1 
 23fd3ea:	2100      	movs	r1, #0
 23fd3ec:	f002 faad 	bl	23ff94a <digitalWrite>
if (tof_level != level) {                                          // only send data if Level has shifted
 23fd3f0:	6822      	ldr	r2, [r4, #0]
 23fd3f2:	6833      	ldr	r3, [r6, #0]
 23fd3f4:	429a      	cmp	r2, r3
 23fd3f6:	f000 8091 	beq.w	23fd51c <_Z3ToFv+0x218>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd3fa:	f001 f803 	bl	23fe404 <spark_cloud_flag_connected>
    if (Particle.connected() == false) {
 23fd3fe:	4603      	mov	r3, r0
 23fd400:	2800      	cmp	r0, #0
 23fd402:	d147      	bne.n	23fd494 <_Z3ToFv+0x190>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
 23fd404:	4f59      	ldr	r7, [pc, #356]	; (23fd56c <_Z3ToFv+0x268>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 23fd406:	4602      	mov	r2, r0
 23fd408:	4601      	mov	r1, r0
 23fd40a:	6878      	ldr	r0, [r7, #4]
 23fd40c:	f001 f86a 	bl	23fe4e4 <network_on>
        waitUntil(WiFi.isOn);
 23fd410:	4638      	mov	r0, r7
 23fd412:	f001 fd8d 	bl	23fef30 <_ZN5spark12NetworkClass4isOnEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 23fd416:	bb80      	cbnz	r0, 23fd47a <_Z3ToFv+0x176>
            spark_process();
 23fd418:	f000 ffd8 	bl	23fe3cc <spark_process>
        while (_while() && !_condition()) {
 23fd41c:	e7f8      	b.n	23fd410 <_Z3ToFv+0x10c>
        (avgValue <=(L2_t) && avgValue >=(L2_b)) {
 23fd41e:	4b54      	ldr	r3, [pc, #336]	; (23fd570 <_Z3ToFv+0x26c>)
 23fd420:	edd3 7a00 	vldr	s15, [r3]
 23fd424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    } else if                                       
 23fd428:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd42c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd430:	db0b      	blt.n	23fd44a <_Z3ToFv+0x146>
        (avgValue <=(L2_t) && avgValue >=(L2_b)) {
 23fd432:	4b50      	ldr	r3, [pc, #320]	; (23fd574 <_Z3ToFv+0x270>)
 23fd434:	edd3 7a00 	vldr	s15, [r3]
 23fd438:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fd43c:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd440:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd444:	d801      	bhi.n	23fd44a <_Z3ToFv+0x146>
        tof_level = 2;
 23fd446:	2302      	movs	r3, #2
 23fd448:	e7c9      	b.n	23fd3de <_Z3ToFv+0xda>
        (avgValue <=(L3_t) && avgValue >=(L3_b)) {
 23fd44a:	4b4b      	ldr	r3, [pc, #300]	; (23fd578 <_Z3ToFv+0x274>)
 23fd44c:	edd3 7a00 	vldr	s15, [r3]
 23fd450:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    } else if                                       
 23fd454:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd45c:	db0b      	blt.n	23fd476 <_Z3ToFv+0x172>
        (avgValue <=(L3_t) && avgValue >=(L3_b)) {
 23fd45e:	4b47      	ldr	r3, [pc, #284]	; (23fd57c <_Z3ToFv+0x278>)
 23fd460:	edd3 7a00 	vldr	s15, [r3]
 23fd464:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 23fd468:	eef4 7ac8 	vcmpe.f32	s15, s16
 23fd46c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 23fd470:	d801      	bhi.n	23fd476 <_Z3ToFv+0x172>
        tof_level = 3;
 23fd472:	2303      	movs	r3, #3
 23fd474:	e7b3      	b.n	23fd3de <_Z3ToFv+0xda>
    } else { tof_level = 4; 
 23fd476:	2304      	movs	r3, #4
 23fd478:	e7b1      	b.n	23fd3de <_Z3ToFv+0xda>
        waitUntil(WiFi.isOn);
 23fd47a:	483c      	ldr	r0, [pc, #240]	; (23fd56c <_Z3ToFv+0x268>)
 23fd47c:	f001 fd58 	bl	23fef30 <_ZN5spark12NetworkClass4isOnEv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 23fd480:	f000 ffb2 	bl	23fe3e8 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd484:	f000 ffbe 	bl	23fe404 <spark_cloud_flag_connected>
 23fd488:	b910      	cbnz	r0, 23fd490 <_Z3ToFv+0x18c>
            spark_process();
 23fd48a:	f000 ff9f 	bl	23fe3cc <spark_process>
        while (_while() && !_condition()) {
 23fd48e:	e7f9      	b.n	23fd484 <_Z3ToFv+0x180>
 23fd490:	f000 ffb8 	bl	23fe404 <spark_cloud_flag_connected>
 23fd494:	f000 ffb6 	bl	23fe404 <spark_cloud_flag_connected>
    if (Particle.connected() == true) {
 23fd498:	2800      	cmp	r0, #0
 23fd49a:	d03f      	beq.n	23fd51c <_Z3ToFv+0x218>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 23fd49c:	4938      	ldr	r1, [pc, #224]	; (23fd580 <_Z3ToFv+0x27c>)
 23fd49e:	a808      	add	r0, sp, #32
 23fd4a0:	f001 fedd 	bl	23ff25e <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Water Level: " + String(tof_level), PRIVATE);
 23fd4a4:	220a      	movs	r2, #10
 23fd4a6:	6821      	ldr	r1, [r4, #0]
 23fd4a8:	a804      	add	r0, sp, #16
 23fd4aa:	f001 fefe 	bl	23ff2aa <_ZN6StringC1Eih>
 23fd4ae:	a904      	add	r1, sp, #16
 23fd4b0:	a808      	add	r0, sp, #32
 23fd4b2:	f001 ff3e 	bl	23ff332 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fd4b6:	4f33      	ldr	r7, [pc, #204]	; (23fd584 <_Z3ToFv+0x280>)
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 23fd4b8:	2200      	movs	r2, #0
 23fd4ba:	783b      	ldrb	r3, [r7, #0]
 23fd4bc:	6801      	ldr	r1, [r0, #0]
 23fd4be:	f88d 3000 	strb.w	r3, [sp]
 23fd4c2:	a802      	add	r0, sp, #8
 23fd4c4:	233c      	movs	r3, #60	; 0x3c
 23fd4c6:	f001 fa5f 	bl	23fe988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fd4ca:	a803      	add	r0, sp, #12
 23fd4cc:	f7ff fee2 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd4d0:	a804      	add	r0, sp, #16
 23fd4d2:	f001 fe79 	bl	23ff1c8 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fd4d6:	a808      	add	r0, sp, #32
 23fd4d8:	f001 fe76 	bl	23ff1c8 <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
 23fd4dc:	492a      	ldr	r1, [pc, #168]	; (23fd588 <_Z3ToFv+0x284>)
 23fd4de:	a808      	add	r0, sp, #32
 23fd4e0:	f001 febd 	bl	23ff25e <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Level Distance: " + String(avgValue), PRIVATE);
 23fd4e4:	eeb0 0a48 	vmov.f32	s0, s16
 23fd4e8:	2106      	movs	r1, #6
 23fd4ea:	a804      	add	r0, sp, #16
 23fd4ec:	f001 fef0 	bl	23ff2d0 <_ZN6StringC1Efi>
 23fd4f0:	a904      	add	r1, sp, #16
 23fd4f2:	a808      	add	r0, sp, #32
 23fd4f4:	f001 ff1d 	bl	23ff332 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
 23fd4f8:	783b      	ldrb	r3, [r7, #0]
 23fd4fa:	6801      	ldr	r1, [r0, #0]
 23fd4fc:	2200      	movs	r2, #0
 23fd4fe:	f88d 3000 	strb.w	r3, [sp]
 23fd502:	a802      	add	r0, sp, #8
 23fd504:	233c      	movs	r3, #60	; 0x3c
 23fd506:	f001 fa3f 	bl	23fe988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 23fd50a:	a803      	add	r0, sp, #12
 23fd50c:	f7ff fec2 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fd510:	a804      	add	r0, sp, #16
 23fd512:	f001 fe59 	bl	23ff1c8 <_ZN6StringD1Ev>
class StringSumHelper : public String
 23fd516:	a808      	add	r0, sp, #32
 23fd518:	f001 fe56 	bl	23ff1c8 <_ZN6StringD1Ev>
    level = tof_level;
 23fd51c:	6823      	ldr	r3, [r4, #0]
    delay(50);      
 23fd51e:	2032      	movs	r0, #50	; 0x32
    level = tof_level;
 23fd520:	6033      	str	r3, [r6, #0]
    delay(50);      
 23fd522:	f001 f8b1 	bl	23fe688 <delay>
    digitalWrite (LedPin, LOW);
 23fd526:	2100      	movs	r1, #0
 23fd528:	8828      	ldrh	r0, [r5, #0]
}
 23fd52a:	b00d      	add	sp, #52	; 0x34
 23fd52c:	ecbd 8b02 	vpop	{d8}
 23fd530:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    digitalWrite (LedPin, LOW);
 23fd534:	f002 ba09 	b.w	23ff94a <digitalWrite>
 23fd538:	1007adcc 	.word	0x1007adcc
 23fd53c:	1007adc8 	.word	0x1007adc8
 23fd540:	00061a80 	.word	0x00061a80
 23fd544:	1007ae50 	.word	0x1007ae50
 23fd548:	1007ae48 	.word	0x1007ae48
 23fd54c:	023ffd44 	.word	0x023ffd44
 23fd550:	023ffd78 	.word	0x023ffd78
 23fd554:	00000000 	.word	0x00000000
 23fd558:	42c80000 	.word	0x42c80000
 23fd55c:	1007adb4 	.word	0x1007adb4
 23fd560:	1007ae7c 	.word	0x1007ae7c
 23fd564:	1007adb0 	.word	0x1007adb0
 23fd568:	1007ae4c 	.word	0x1007ae4c
 23fd56c:	1007aed4 	.word	0x1007aed4
 23fd570:	1007adbc 	.word	0x1007adbc
 23fd574:	1007adb8 	.word	0x1007adb8
 23fd578:	1007adc4 	.word	0x1007adc4
 23fd57c:	1007adc0 	.word	0x1007adc0
 23fd580:	023ffd86 	.word	0x023ffd86
 23fd584:	1007ae49 	.word	0x1007ae49
 23fd588:	023ffd94 	.word	0x023ffd94

023fd58c <_Z5Sleepv>:
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
 23fd58c:	f241 3388 	movw	r3, #5000	; 0x1388
 23fd590:	2203      	movs	r2, #3
void Sleep() {
 23fd592:	b530      	push	{r4, r5, lr}
 23fd594:	b08b      	sub	sp, #44	; 0x2c
 23fd596:	e9cd 2304 	strd	r2, r3, [sp, #16]
        bool clearSession) :
 23fd59a:	2301      	movs	r3, #1
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000));       // Use only in SEMI_AUTOMATIC mode
 23fd59c:	a804      	add	r0, sp, #16
 23fd59e:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fd5a2:	f001 f8f4 	bl	23fe78e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fd5a6:	f000 ff2d 	bl	23fe404 <spark_cloud_flag_connected>
 23fd5aa:	4604      	mov	r4, r0
 23fd5ac:	b110      	cbz	r0, 23fd5b4 <_Z5Sleepv+0x28>
            spark_process();
 23fd5ae:	f000 ff0d 	bl	23fe3cc <spark_process>
        while (_while() && !_condition()) {
 23fd5b2:	e7f8      	b.n	23fd5a6 <_Z5Sleepv+0x1a>
 23fd5b4:	4d24      	ldr	r5, [pc, #144]	; (23fd648 <_Z5Sleepv+0xbc>)
 23fd5b6:	f000 ff25 	bl	23fe404 <spark_cloud_flag_connected>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
 23fd5ba:	4623      	mov	r3, r4
 23fd5bc:	4622      	mov	r2, r4
 23fd5be:	4621      	mov	r1, r4
 23fd5c0:	6868      	ldr	r0, [r5, #4]
 23fd5c2:	f000 ff9d 	bl	23fe500 <network_off>
    waitUntil(WiFi.isOff);
 23fd5c6:	4628      	mov	r0, r5
 23fd5c8:	f001 fcb6 	bl	23fef38 <_ZN5spark12NetworkClass5isOffEv>
 23fd5cc:	b910      	cbnz	r0, 23fd5d4 <_Z5Sleepv+0x48>
            spark_process();
 23fd5ce:	f000 fefd 	bl	23fe3cc <spark_process>
        while (_while() && !_condition()) {
 23fd5d2:	e7f8      	b.n	23fd5c6 <_Z5Sleepv+0x3a>
 23fd5d4:	481c      	ldr	r0, [pc, #112]	; (23fd648 <_Z5Sleepv+0xbc>)
 23fd5d6:	f001 fcaf 	bl	23fef38 <_ZN5spark12NetworkClass5isOffEv>
    delay(50);
 23fd5da:	2032      	movs	r0, #50	; 0x32
 23fd5dc:	f001 f854 	bl	23fe688 <delay>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
 23fd5e0:	ab05      	add	r3, sp, #20
 23fd5e2:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
 23fd5e4:	2301      	movs	r3, #1
 23fd5e6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.size = sizeof(hal_sleep_config_t);
        config_.version = HAL_SLEEP_VERSION;
 23fd5ea:	2303      	movs	r3, #3
              valid_(true) {
 23fd5ec:	2100      	movs	r1, #0
        config_.size = sizeof(hal_sleep_config_t);
 23fd5ee:	2010      	movs	r0, #16
        config_.version = HAL_SLEEP_VERSION;
 23fd5f0:	f8ad 3016 	strh.w	r3, [sp, #22]
    }

    // Setters
    SystemSleepConfiguration& mode(SystemSleepMode mode) {
        if (valid_) {
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 23fd5f4:	2302      	movs	r3, #2
              valid_(true) {
 23fd5f6:	e9cd 1106 	strd	r1, r1, [sp, #24]
 23fd5fa:	9108      	str	r1, [sp, #32]
        config_.size = sizeof(hal_sleep_config_t);
 23fd5fc:	f8ad 0014 	strh.w	r0, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
 23fd600:	f88d 3018 	strb.w	r3, [sp, #24]
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
#if HAL_PLATFORM_RTL872X
            auto wakeupSource = (hal_wakeup_source_rtc_t*)system_pool_alloc(sizeof(hal_wakeup_source_rtc_t), nullptr);
 23fd604:	f000 feb8 	bl	23fe378 <system_pool_alloc>
#else
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
#endif
            if (!wakeupSource) {
 23fd608:	b988      	cbnz	r0, 23fd62e <_Z5Sleepv+0xa2>
                valid_ = false;
 23fd60a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    System.sleep(config);
 23fd60e:	a801      	add	r0, sp, #4
 23fd610:	a904      	add	r1, sp, #16
 23fd612:	f001 fec9 	bl	23ff3a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
 23fd616:	9801      	ldr	r0, [sp, #4]
 23fd618:	b108      	cbz	r0, 23fd61e <_Z5Sleepv+0x92>
            free(wakeupSource_);
 23fd61a:	f000 ffe1 	bl	23fe5e0 <free>
        auto wakeupSource = config_.wakeup_sources;
 23fd61e:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
 23fd620:	b180      	cbz	r0, 23fd644 <_Z5Sleepv+0xb8>
            auto next = wakeupSource->next;
 23fd622:	6884      	ldr	r4, [r0, #8]
            system_pool_free(wakeupSource, nullptr);
 23fd624:	2100      	movs	r1, #0
 23fd626:	f000 feb5 	bl	23fe394 <system_pool_free>
            wakeupSource = next;
 23fd62a:	4620      	mov	r0, r4
        while (wakeupSource) {
 23fd62c:	e7f8      	b.n	23fd620 <_Z5Sleepv+0x94>
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
 23fd62e:	4b07      	ldr	r3, [pc, #28]	; (23fd64c <_Z5Sleepv+0xc0>)
 23fd630:	6003      	str	r3, [r0, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
 23fd632:	2304      	movs	r3, #4
 23fd634:	8083      	strh	r3, [r0, #4]
            wakeupSource->base.next = config_.wakeup_sources;
 23fd636:	9b08      	ldr	r3, [sp, #32]
 23fd638:	6083      	str	r3, [r0, #8]
            wakeupSource->ms = ms;
 23fd63a:	f64e 2360 	movw	r3, #60000	; 0xea60
 23fd63e:	60c3      	str	r3, [r0, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
 23fd640:	9008      	str	r0, [sp, #32]
 23fd642:	e7e4      	b.n	23fd60e <_Z5Sleepv+0x82>
}
 23fd644:	b00b      	add	sp, #44	; 0x2c
 23fd646:	bd30      	pop	{r4, r5, pc}
 23fd648:	1007aed4 	.word	0x1007aed4
 23fd64c:	00030010 	.word	0x00030010

023fd650 <loop>:
void loop() {
 23fd650:	b508      	push	{r3, lr}
    ToF();
 23fd652:	f7ff fe57 	bl	23fd304 <_Z3ToFv>
 23fd656:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Sleep();                                                                          // After readings system sleeps for duration set in Sleep() funtion
 23fd65a:	f7ff bf97 	b.w	23fd58c <_Z5Sleepv>

023fd65e <_ZN7VL53L1X19checkTimeoutExpiredEv>:

    // Record the current time to check an upcoming timeout against
    void startTimeout() { timeout_start_ms = millis(); }

    // Check if timeout is enabled (set to nonzero value) and has expired
    bool checkTimeoutExpired() {return (io_timeout > 0) && ((uint16_t)(millis() - timeout_start_ms) > io_timeout); }
 23fd65e:	b510      	push	{r4, lr}
 23fd660:	4604      	mov	r4, r0
 23fd662:	8bc0      	ldrh	r0, [r0, #30]
 23fd664:	b148      	cbz	r0, 23fd67a <_ZN7VL53L1X19checkTimeoutExpiredEv+0x1c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fd666:	f000 fc2d 	bl	23fdec4 <HAL_Timer_Get_Milli_Seconds>
 23fd66a:	8c62      	ldrh	r2, [r4, #34]	; 0x22
 23fd66c:	8be3      	ldrh	r3, [r4, #30]
 23fd66e:	1a82      	subs	r2, r0, r2
 23fd670:	b290      	uxth	r0, r2
 23fd672:	4283      	cmp	r3, r0
 23fd674:	bf2c      	ite	cs
 23fd676:	2000      	movcs	r0, #0
 23fd678:	2001      	movcc	r0, #1
 23fd67a:	bd10      	pop	{r4, pc}

023fd67c <_ZN7VL53L1XC1Ev>:

#include "../lib/tof/src/VL53L1X.h"

// Constructors ////////////////////////////////////////////////////////////////

VL53L1X::VL53L1X()
 23fd67c:	b510      	push	{r4, lr}
 23fd67e:	4604      	mov	r4, r0
#if !defined(NO_GLOBAL_INSTANCES) && !defined(NO_GLOBAL_TWOWIRE)
  : bus(&Wire)
 23fd680:	f002 f998 	bl	23ff9b4 <_Z19__fetch_global_Wirev>
  , io_timeout(0) // no timeout
  , did_timeout(false)
  , calibrated(false)
  , saved_vhv_init(0)
  , saved_vhv_timeout(0)
  , distance_mode(Unknown)
 23fd684:	2329      	movs	r3, #41	; 0x29
 23fd686:	7723      	strb	r3, [r4, #28]
 23fd688:	2300      	movs	r3, #0
 23fd68a:	83e3      	strh	r3, [r4, #30]
 23fd68c:	f884 3020 	strb.w	r3, [r4, #32]
 23fd690:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 23fd694:	61a0      	str	r0, [r4, #24]
 23fd696:	62a3      	str	r3, [r4, #40]	; 0x28
{
}
 23fd698:	4620      	mov	r0, r4
 23fd69a:	bd10      	pop	{r4, pc}

023fd69c <_ZN7VL53L1X8writeRegEth>:
  return true;
}

// Write an 8-bit register
void VL53L1X::writeReg(uint16_t reg, uint8_t value)
{
 23fd69c:	b570      	push	{r4, r5, r6, lr}
 23fd69e:	4604      	mov	r4, r0
 23fd6a0:	460d      	mov	r5, r1
 23fd6a2:	4616      	mov	r6, r2
  bus->beginTransmission(address);
 23fd6a4:	7f01      	ldrb	r1, [r0, #28]
 23fd6a6:	6980      	ldr	r0, [r0, #24]
 23fd6a8:	f001 fb96 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
 23fd6ac:	69a0      	ldr	r0, [r4, #24]
 23fd6ae:	0a29      	lsrs	r1, r5, #8
 23fd6b0:	6803      	ldr	r3, [r0, #0]
 23fd6b2:	689b      	ldr	r3, [r3, #8]
 23fd6b4:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
 23fd6b6:	69a0      	ldr	r0, [r4, #24]
 23fd6b8:	b2e9      	uxtb	r1, r5
 23fd6ba:	6803      	ldr	r3, [r0, #0]
 23fd6bc:	689b      	ldr	r3, [r3, #8]
 23fd6be:	4798      	blx	r3
  bus->write(value);
 23fd6c0:	69a0      	ldr	r0, [r4, #24]
 23fd6c2:	4631      	mov	r1, r6
 23fd6c4:	6803      	ldr	r3, [r0, #0]
 23fd6c6:	689b      	ldr	r3, [r3, #8]
 23fd6c8:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd6ca:	69a0      	ldr	r0, [r4, #24]
 23fd6cc:	f001 fb8c 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>
 23fd6d0:	7320      	strb	r0, [r4, #12]
}
 23fd6d2:	bd70      	pop	{r4, r5, r6, pc}

023fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>:

// Write a 16-bit register
void VL53L1X::writeReg16Bit(uint16_t reg, uint16_t value)
{
 23fd6d4:	b570      	push	{r4, r5, r6, lr}
 23fd6d6:	4604      	mov	r4, r0
 23fd6d8:	460e      	mov	r6, r1
 23fd6da:	4615      	mov	r5, r2
  bus->beginTransmission(address);
 23fd6dc:	7f01      	ldrb	r1, [r0, #28]
 23fd6de:	6980      	ldr	r0, [r0, #24]
 23fd6e0:	f001 fb7a 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
 23fd6e4:	69a0      	ldr	r0, [r4, #24]
 23fd6e6:	0a31      	lsrs	r1, r6, #8
 23fd6e8:	6803      	ldr	r3, [r0, #0]
 23fd6ea:	689b      	ldr	r3, [r3, #8]
 23fd6ec:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
 23fd6ee:	69a0      	ldr	r0, [r4, #24]
 23fd6f0:	b2f1      	uxtb	r1, r6
 23fd6f2:	6803      	ldr	r3, [r0, #0]
 23fd6f4:	689b      	ldr	r3, [r3, #8]
 23fd6f6:	4798      	blx	r3
  bus->write((uint8_t)(value >> 8)); // value high byte
 23fd6f8:	69a0      	ldr	r0, [r4, #24]
 23fd6fa:	0a29      	lsrs	r1, r5, #8
 23fd6fc:	6803      	ldr	r3, [r0, #0]
 23fd6fe:	689b      	ldr	r3, [r3, #8]
 23fd700:	4798      	blx	r3
  bus->write((uint8_t)(value));      // value low byte
 23fd702:	69a0      	ldr	r0, [r4, #24]
 23fd704:	b2e9      	uxtb	r1, r5
 23fd706:	6803      	ldr	r3, [r0, #0]
 23fd708:	689b      	ldr	r3, [r3, #8]
 23fd70a:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd70c:	69a0      	ldr	r0, [r4, #24]
 23fd70e:	f001 fb6b 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>
 23fd712:	7320      	strb	r0, [r4, #12]
}
 23fd714:	bd70      	pop	{r4, r5, r6, pc}

023fd716 <_ZN7VL53L1X13writeReg32BitEtm>:

// Write a 32-bit register
void VL53L1X::writeReg32Bit(uint16_t reg, uint32_t value)
{
 23fd716:	b570      	push	{r4, r5, r6, lr}
 23fd718:	4604      	mov	r4, r0
 23fd71a:	460e      	mov	r6, r1
 23fd71c:	4615      	mov	r5, r2
  bus->beginTransmission(address);
 23fd71e:	7f01      	ldrb	r1, [r0, #28]
 23fd720:	6980      	ldr	r0, [r0, #24]
 23fd722:	f001 fb59 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
 23fd726:	69a0      	ldr	r0, [r4, #24]
 23fd728:	0a31      	lsrs	r1, r6, #8
 23fd72a:	6803      	ldr	r3, [r0, #0]
 23fd72c:	689b      	ldr	r3, [r3, #8]
 23fd72e:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
 23fd730:	69a0      	ldr	r0, [r4, #24]
 23fd732:	b2f1      	uxtb	r1, r6
 23fd734:	6803      	ldr	r3, [r0, #0]
 23fd736:	689b      	ldr	r3, [r3, #8]
 23fd738:	4798      	blx	r3
  bus->write((uint8_t)(value >> 24)); // value highest byte
 23fd73a:	69a0      	ldr	r0, [r4, #24]
 23fd73c:	0e29      	lsrs	r1, r5, #24
 23fd73e:	6803      	ldr	r3, [r0, #0]
 23fd740:	689b      	ldr	r3, [r3, #8]
 23fd742:	4798      	blx	r3
  bus->write((uint8_t)(value >> 16));
 23fd744:	69a0      	ldr	r0, [r4, #24]
 23fd746:	f3c5 4107 	ubfx	r1, r5, #16, #8
 23fd74a:	6803      	ldr	r3, [r0, #0]
 23fd74c:	689b      	ldr	r3, [r3, #8]
 23fd74e:	4798      	blx	r3
  bus->write((uint8_t)(value >>  8));
 23fd750:	69a0      	ldr	r0, [r4, #24]
 23fd752:	f3c5 2107 	ubfx	r1, r5, #8, #8
 23fd756:	6803      	ldr	r3, [r0, #0]
 23fd758:	689b      	ldr	r3, [r3, #8]
 23fd75a:	4798      	blx	r3
  bus->write((uint8_t)(value));       // value lowest byte
 23fd75c:	69a0      	ldr	r0, [r4, #24]
 23fd75e:	b2e9      	uxtb	r1, r5
 23fd760:	6803      	ldr	r3, [r0, #0]
 23fd762:	689b      	ldr	r3, [r3, #8]
 23fd764:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd766:	69a0      	ldr	r0, [r4, #24]
 23fd768:	f001 fb3e 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>
 23fd76c:	7320      	strb	r0, [r4, #12]
}
 23fd76e:	bd70      	pop	{r4, r5, r6, pc}

023fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>:

// Read an 8-bit register
uint8_t VL53L1X::readReg(regAddr reg)
{
 23fd770:	b538      	push	{r3, r4, r5, lr}
 23fd772:	4604      	mov	r4, r0
 23fd774:	460d      	mov	r5, r1
  uint8_t value;

  bus->beginTransmission(address);
 23fd776:	7f01      	ldrb	r1, [r0, #28]
 23fd778:	6980      	ldr	r0, [r0, #24]
 23fd77a:	f001 fb2d 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
 23fd77e:	69a0      	ldr	r0, [r4, #24]
 23fd780:	0a29      	lsrs	r1, r5, #8
 23fd782:	6803      	ldr	r3, [r0, #0]
 23fd784:	689b      	ldr	r3, [r3, #8]
 23fd786:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
 23fd788:	69a0      	ldr	r0, [r4, #24]
 23fd78a:	b2e9      	uxtb	r1, r5
 23fd78c:	6803      	ldr	r3, [r0, #0]
 23fd78e:	689b      	ldr	r3, [r3, #8]
 23fd790:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd792:	69a0      	ldr	r0, [r4, #24]
 23fd794:	f001 fb28 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)1);
 23fd798:	2201      	movs	r2, #1
 23fd79a:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
 23fd79c:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)1);
 23fd79e:	69a0      	ldr	r0, [r4, #24]
 23fd7a0:	f001 fb17 	bl	23fedd2 <_ZN7TwoWire11requestFromEhj>
  value = bus->read();
 23fd7a4:	69a0      	ldr	r0, [r4, #24]
 23fd7a6:	6803      	ldr	r3, [r0, #0]
 23fd7a8:	695b      	ldr	r3, [r3, #20]
 23fd7aa:	4798      	blx	r3

  return value;
}
 23fd7ac:	b2c0      	uxtb	r0, r0
 23fd7ae:	bd38      	pop	{r3, r4, r5, pc}

023fd7b0 <_ZN7VL53L1X12readReg16BitEt>:

// Read a 16-bit register
uint16_t VL53L1X::readReg16Bit(uint16_t reg)
{
 23fd7b0:	b538      	push	{r3, r4, r5, lr}
 23fd7b2:	4604      	mov	r4, r0
 23fd7b4:	460d      	mov	r5, r1
  uint16_t value;

  bus->beginTransmission(address);
 23fd7b6:	7f01      	ldrb	r1, [r0, #28]
 23fd7b8:	6980      	ldr	r0, [r0, #24]
 23fd7ba:	f001 fb0d 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
 23fd7be:	69a0      	ldr	r0, [r4, #24]
 23fd7c0:	0a29      	lsrs	r1, r5, #8
 23fd7c2:	6803      	ldr	r3, [r0, #0]
 23fd7c4:	689b      	ldr	r3, [r3, #8]
 23fd7c6:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
 23fd7c8:	69a0      	ldr	r0, [r4, #24]
 23fd7ca:	b2e9      	uxtb	r1, r5
 23fd7cc:	6803      	ldr	r3, [r0, #0]
 23fd7ce:	689b      	ldr	r3, [r3, #8]
 23fd7d0:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd7d2:	69a0      	ldr	r0, [r4, #24]
 23fd7d4:	f001 fb08 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)2);
 23fd7d8:	2202      	movs	r2, #2
 23fd7da:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
 23fd7dc:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)2);
 23fd7de:	69a0      	ldr	r0, [r4, #24]
 23fd7e0:	f001 faf7 	bl	23fedd2 <_ZN7TwoWire11requestFromEhj>
  value  = (uint16_t)bus->read() << 8; // value high byte
 23fd7e4:	69a0      	ldr	r0, [r4, #24]
 23fd7e6:	6803      	ldr	r3, [r0, #0]
 23fd7e8:	695b      	ldr	r3, [r3, #20]
 23fd7ea:	4798      	blx	r3
 23fd7ec:	4605      	mov	r5, r0
  value |=           bus->read();      // value low byte
 23fd7ee:	69a0      	ldr	r0, [r4, #24]
 23fd7f0:	6803      	ldr	r3, [r0, #0]
 23fd7f2:	695b      	ldr	r3, [r3, #20]
 23fd7f4:	4798      	blx	r3
 23fd7f6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  return value;
}
 23fd7fa:	b280      	uxth	r0, r0
 23fd7fc:	bd38      	pop	{r3, r4, r5, pc}

023fd7fe <_ZN7VL53L1X15startContinuousEm>:
}

// Start continuous ranging measurements, with the given inter-measurement
// period in milliseconds determining how often the sensor takes a measurement.
void VL53L1X::startContinuous(uint32_t period_ms)
{
 23fd7fe:	b510      	push	{r4, lr}
 23fd800:	4604      	mov	r4, r0
  // from VL53L1_set_inter_measurement_period_ms()
  writeReg32Bit(SYSTEM__INTERMEASUREMENT_PERIOD, period_ms * osc_calibrate_val);
 23fd802:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
 23fd804:	434a      	muls	r2, r1
 23fd806:	216c      	movs	r1, #108	; 0x6c
 23fd808:	f7ff ff85 	bl	23fd716 <_ZN7VL53L1X13writeReg32BitEtm>

  writeReg(SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
 23fd80c:	4620      	mov	r0, r4
 23fd80e:	2201      	movs	r2, #1
 23fd810:	2186      	movs	r1, #134	; 0x86
 23fd812:	f7ff ff43 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__MODE_START, 0x40); // mode_range__timed
 23fd816:	4620      	mov	r0, r4
}
 23fd818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeReg(SYSTEM__MODE_START, 0x40); // mode_range__timed
 23fd81c:	2240      	movs	r2, #64	; 0x40
 23fd81e:	2187      	movs	r1, #135	; 0x87
 23fd820:	f7ff bf3c 	b.w	23fd69c <_ZN7VL53L1X8writeRegEth>

023fd824 <_ZN7VL53L1X22setupManualCalibrationEv>:

// "Setup ranges after the first one in low power auto mode by turning off
// FW calibration steps and programming static values"
// based on VL53L1_low_power_auto_setup_manual_calibration()
void VL53L1X::setupManualCalibration()
{
 23fd824:	b510      	push	{r4, lr}
  // "save original vhv configs"
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
 23fd826:	210b      	movs	r1, #11
{
 23fd828:	4604      	mov	r4, r0
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
 23fd82a:	f7ff ffa1 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
 23fd82e:	2108      	movs	r1, #8
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
 23fd830:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
 23fd834:	4620      	mov	r0, r4
 23fd836:	f7ff ff9b 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>

  // "disable VHV init"
  writeReg(VHV_CONFIG__INIT, saved_vhv_init & 0x7F);
 23fd83a:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
 23fd83e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  writeReg(VHV_CONFIG__INIT, saved_vhv_init & 0x7F);
 23fd842:	210b      	movs	r1, #11
 23fd844:	4620      	mov	r0, r4
 23fd846:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 23fd84a:	f7ff ff27 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>

  // "set loop bound to tuning param"
  writeReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
    (saved_vhv_timeout & 0x03) + (3 << 2)); // tuning parm default (LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT)
 23fd84e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
  writeReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
 23fd852:	4620      	mov	r0, r4
    (saved_vhv_timeout & 0x03) + (3 << 2)); // tuning parm default (LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT)
 23fd854:	f002 0203 	and.w	r2, r2, #3
  writeReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
 23fd858:	2108      	movs	r1, #8
 23fd85a:	320c      	adds	r2, #12
 23fd85c:	f7ff ff1e 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>

  // "override phasecal"
  writeReg(PHASECAL_CONFIG__OVERRIDE, 0x01);
 23fd860:	2201      	movs	r2, #1
 23fd862:	4620      	mov	r0, r4
 23fd864:	214d      	movs	r1, #77	; 0x4d
 23fd866:	f7ff ff19 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(CAL_CONFIG__VCSEL_START, readReg(PHASECAL_RESULT__VCSEL_START));
 23fd86a:	21d8      	movs	r1, #216	; 0xd8
 23fd86c:	4620      	mov	r0, r4
 23fd86e:	f7ff ff7f 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fd872:	2147      	movs	r1, #71	; 0x47
 23fd874:	4602      	mov	r2, r0
 23fd876:	4620      	mov	r0, r4
}
 23fd878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeReg(CAL_CONFIG__VCSEL_START, readReg(PHASECAL_RESULT__VCSEL_START));
 23fd87c:	f7ff bf0e 	b.w	23fd69c <_ZN7VL53L1X8writeRegEth>

023fd880 <_ZN7VL53L1X11readResultsEv>:

// read measurement results into buffer
void VL53L1X::readResults()
{
 23fd880:	b510      	push	{r4, lr}
 23fd882:	4604      	mov	r4, r0
  bus->beginTransmission(address);
 23fd884:	7f01      	ldrb	r1, [r0, #28]
 23fd886:	6980      	ldr	r0, [r0, #24]
 23fd888:	f001 faa6 	bl	23fedd8 <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(RESULT__RANGE_STATUS >> 8)); // reg high byte
 23fd88c:	69a0      	ldr	r0, [r4, #24]
 23fd88e:	2100      	movs	r1, #0
 23fd890:	6803      	ldr	r3, [r0, #0]
 23fd892:	689b      	ldr	r3, [r3, #8]
 23fd894:	4798      	blx	r3
  bus->write((uint8_t)(RESULT__RANGE_STATUS));      // reg low byte
 23fd896:	69a0      	ldr	r0, [r4, #24]
 23fd898:	2189      	movs	r1, #137	; 0x89
 23fd89a:	6803      	ldr	r3, [r0, #0]
 23fd89c:	689b      	ldr	r3, [r3, #8]
 23fd89e:	4798      	blx	r3
  last_status = bus->endTransmission();
 23fd8a0:	69a0      	ldr	r0, [r4, #24]
 23fd8a2:	f001 faa1 	bl	23fede8 <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)17);
 23fd8a6:	2211      	movs	r2, #17
 23fd8a8:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
 23fd8aa:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)17);
 23fd8ac:	69a0      	ldr	r0, [r4, #24]
 23fd8ae:	f001 fa90 	bl	23fedd2 <_ZN7TwoWire11requestFromEhj>

  results.range_status = bus->read();
 23fd8b2:	69a0      	ldr	r0, [r4, #24]
 23fd8b4:	6803      	ldr	r3, [r0, #0]
 23fd8b6:	695b      	ldr	r3, [r3, #20]
 23fd8b8:	4798      	blx	r3
 23fd8ba:	73a0      	strb	r0, [r4, #14]

  bus->read(); // report_status: not used
 23fd8bc:	69a0      	ldr	r0, [r4, #24]
 23fd8be:	6803      	ldr	r3, [r0, #0]
 23fd8c0:	695b      	ldr	r3, [r3, #20]
 23fd8c2:	4798      	blx	r3

  results.stream_count = bus->read();
 23fd8c4:	69a0      	ldr	r0, [r4, #24]
 23fd8c6:	6803      	ldr	r3, [r0, #0]
 23fd8c8:	695b      	ldr	r3, [r3, #20]
 23fd8ca:	4798      	blx	r3
 23fd8cc:	73e0      	strb	r0, [r4, #15]

  results.dss_actual_effective_spads_sd0  = (uint16_t)bus->read() << 8; // high byte
 23fd8ce:	69a0      	ldr	r0, [r4, #24]
 23fd8d0:	6803      	ldr	r3, [r0, #0]
 23fd8d2:	695b      	ldr	r3, [r3, #20]
 23fd8d4:	4798      	blx	r3
 23fd8d6:	0200      	lsls	r0, r0, #8
 23fd8d8:	8220      	strh	r0, [r4, #16]
  results.dss_actual_effective_spads_sd0 |=           bus->read();      // low byte
 23fd8da:	69a0      	ldr	r0, [r4, #24]
 23fd8dc:	6803      	ldr	r3, [r0, #0]
 23fd8de:	695b      	ldr	r3, [r3, #20]
 23fd8e0:	4798      	blx	r3
 23fd8e2:	8a23      	ldrh	r3, [r4, #16]
 23fd8e4:	4318      	orrs	r0, r3
 23fd8e6:	8220      	strh	r0, [r4, #16]

  bus->read(); // peak_signal_count_rate_mcps_sd0: not used
 23fd8e8:	69a0      	ldr	r0, [r4, #24]
 23fd8ea:	6803      	ldr	r3, [r0, #0]
 23fd8ec:	695b      	ldr	r3, [r3, #20]
 23fd8ee:	4798      	blx	r3
  bus->read();
 23fd8f0:	69a0      	ldr	r0, [r4, #24]
 23fd8f2:	6803      	ldr	r3, [r0, #0]
 23fd8f4:	695b      	ldr	r3, [r3, #20]
 23fd8f6:	4798      	blx	r3

  results.ambient_count_rate_mcps_sd0  = (uint16_t)bus->read() << 8; // high byte
 23fd8f8:	69a0      	ldr	r0, [r4, #24]
 23fd8fa:	6803      	ldr	r3, [r0, #0]
 23fd8fc:	695b      	ldr	r3, [r3, #20]
 23fd8fe:	4798      	blx	r3
 23fd900:	0200      	lsls	r0, r0, #8
 23fd902:	8260      	strh	r0, [r4, #18]
  results.ambient_count_rate_mcps_sd0 |=           bus->read();      // low byte
 23fd904:	69a0      	ldr	r0, [r4, #24]
 23fd906:	6803      	ldr	r3, [r0, #0]
 23fd908:	695b      	ldr	r3, [r3, #20]
 23fd90a:	4798      	blx	r3
 23fd90c:	8a63      	ldrh	r3, [r4, #18]
 23fd90e:	4318      	orrs	r0, r3
 23fd910:	8260      	strh	r0, [r4, #18]

  bus->read(); // sigma_sd0: not used
 23fd912:	69a0      	ldr	r0, [r4, #24]
 23fd914:	6803      	ldr	r3, [r0, #0]
 23fd916:	695b      	ldr	r3, [r3, #20]
 23fd918:	4798      	blx	r3
  bus->read();
 23fd91a:	69a0      	ldr	r0, [r4, #24]
 23fd91c:	6803      	ldr	r3, [r0, #0]
 23fd91e:	695b      	ldr	r3, [r3, #20]
 23fd920:	4798      	blx	r3

  bus->read(); // phase_sd0: not used
 23fd922:	69a0      	ldr	r0, [r4, #24]
 23fd924:	6803      	ldr	r3, [r0, #0]
 23fd926:	695b      	ldr	r3, [r3, #20]
 23fd928:	4798      	blx	r3
  bus->read();
 23fd92a:	69a0      	ldr	r0, [r4, #24]
 23fd92c:	6803      	ldr	r3, [r0, #0]
 23fd92e:	695b      	ldr	r3, [r3, #20]
 23fd930:	4798      	blx	r3

  results.final_crosstalk_corrected_range_mm_sd0  = (uint16_t)bus->read() << 8; // high byte
 23fd932:	69a0      	ldr	r0, [r4, #24]
 23fd934:	6803      	ldr	r3, [r0, #0]
 23fd936:	695b      	ldr	r3, [r3, #20]
 23fd938:	4798      	blx	r3
 23fd93a:	0200      	lsls	r0, r0, #8
 23fd93c:	82a0      	strh	r0, [r4, #20]
  results.final_crosstalk_corrected_range_mm_sd0 |=           bus->read();      // low byte
 23fd93e:	69a0      	ldr	r0, [r4, #24]
 23fd940:	6803      	ldr	r3, [r0, #0]
 23fd942:	695b      	ldr	r3, [r3, #20]
 23fd944:	4798      	blx	r3
 23fd946:	8aa3      	ldrh	r3, [r4, #20]
 23fd948:	4318      	orrs	r0, r3
 23fd94a:	82a0      	strh	r0, [r4, #20]

  results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0  = (uint16_t)bus->read() << 8; // high byte
 23fd94c:	69a0      	ldr	r0, [r4, #24]
 23fd94e:	6803      	ldr	r3, [r0, #0]
 23fd950:	695b      	ldr	r3, [r3, #20]
 23fd952:	4798      	blx	r3
 23fd954:	0200      	lsls	r0, r0, #8
 23fd956:	82e0      	strh	r0, [r4, #22]
  results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 |=           bus->read();      // low byte
 23fd958:	69a0      	ldr	r0, [r4, #24]
 23fd95a:	6803      	ldr	r3, [r0, #0]
 23fd95c:	695b      	ldr	r3, [r3, #20]
 23fd95e:	4798      	blx	r3
 23fd960:	8ae3      	ldrh	r3, [r4, #22]
 23fd962:	4318      	orrs	r0, r3
 23fd964:	82e0      	strh	r0, [r4, #22]
}
 23fd966:	bd10      	pop	{r4, pc}

023fd968 <_ZN7VL53L1X9updateDSSEv>:

// perform Dynamic SPAD Selection calculation/update
// based on VL53L1_low_power_auto_update_DSS()
void VL53L1X::updateDSS()
{
 23fd968:	b430      	push	{r4, r5}
  uint16_t spadCount = results.dss_actual_effective_spads_sd0;
 23fd96a:	8a04      	ldrh	r4, [r0, #16]
{
 23fd96c:	4603      	mov	r3, r0

  if (spadCount != 0)
 23fd96e:	b1d4      	cbz	r4, 23fd9a6 <_ZN7VL53L1X9updateDSSEv+0x3e>
  {
    // "Calc total rate per spad"

    uint32_t totalRatePerSpad =
 23fd970:	f64f 75ff 	movw	r5, #65535	; 0xffff
      (uint32_t)results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
      results.ambient_count_rate_mcps_sd0;
 23fd974:	8a42      	ldrh	r2, [r0, #18]
      (uint32_t)results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
 23fd976:	8ac1      	ldrh	r1, [r0, #22]
    uint32_t totalRatePerSpad =
 23fd978:	4411      	add	r1, r2

    // "clip to 16 bits"
    if (totalRatePerSpad > 0xFFFF) { totalRatePerSpad = 0xFFFF; }
 23fd97a:	42a9      	cmp	r1, r5
 23fd97c:	bf28      	it	cs
 23fd97e:	4629      	movcs	r1, r5
    // "shift up to take advantage of 32 bits"
    totalRatePerSpad <<= 16;

    totalRatePerSpad /= spadCount;

    if (totalRatePerSpad != 0)
 23fd980:	ebb4 4f01 	cmp.w	r4, r1, lsl #16
    totalRatePerSpad <<= 16;
 23fd984:	ea4f 4201 	mov.w	r2, r1, lsl #16
    if (totalRatePerSpad != 0)
 23fd988:	d80d      	bhi.n	23fd9a6 <_ZN7VL53L1X9updateDSSEv+0x3e>
    totalRatePerSpad /= spadCount;
 23fd98a:	fbb2 f2f4 	udiv	r2, r2, r4
    {
      // "get the target rate and shift up by 16"
      uint32_t requiredSpads = ((uint32_t)TargetRate << 16) / totalRatePerSpad;
 23fd98e:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
 23fd992:	fbb3 f2f2 	udiv	r2, r3, r2

      // "clip to 16 bit"
      if (requiredSpads > 0xFFFF) { requiredSpads = 0xFFFF; }

      // "override DSS config"
      writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, requiredSpads);
 23fd996:	42aa      	cmp	r2, r5
 23fd998:	bf28      	it	cs
 23fd99a:	462a      	movcs	r2, r5
 23fd99c:	2154      	movs	r1, #84	; 0x54
 23fd99e:	b292      	uxth	r2, r2
  // divide by zero.
  // "We want to gracefully set a spad target, not just exit with an error"

   // "set target to mid point"
   writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
}
 23fd9a0:	bc30      	pop	{r4, r5}
   writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
 23fd9a2:	f7ff be97 	b.w	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
 23fd9a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 23fd9aa:	2154      	movs	r1, #84	; 0x54
 23fd9ac:	4618      	mov	r0, r3
 23fd9ae:	e7f7      	b.n	23fd9a0 <_ZN7VL53L1X9updateDSSEv+0x38>

023fd9b0 <_ZN7VL53L1X14getRangingDataEv>:

  // "apply correction gain"
  // gain factor of 2011 is tuning parm default (VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT)
  // Basically, this appears to scale the result by 2011/2048, or about 98%
  // (with the 1024 added for proper rounding).
  ranging_data.range_mm = ((uint32_t)range * 2011 + 0x0400) / 0x0800;
 23fd9b0:	f240 72db 	movw	r2, #2011	; 0x7db
 23fd9b4:	8a83      	ldrh	r3, [r0, #20]
 23fd9b6:	4353      	muls	r3, r2
 23fd9b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 23fd9bc:	0adb      	lsrs	r3, r3, #11
 23fd9be:	8003      	strh	r3, [r0, #0]

  // VL53L1_copy_sys_and_core_results_to_range_results() end

  // set range_status in ranging_data based on value of RESULT__RANGE_STATUS register
  // mostly based on ConvertStatusLite()
  switch(results.range_status)
 23fd9c0:	7b83      	ldrb	r3, [r0, #14]
 23fd9c2:	3b01      	subs	r3, #1
 23fd9c4:	2b11      	cmp	r3, #17
 23fd9c6:	d837      	bhi.n	23fda38 <_ZN7VL53L1X14getRangingDataEv+0x88>
 23fd9c8:	e8df f003 	tbb	[pc, r3]
 23fd9cc:	26090909 	.word	0x26090909
 23fd9d0:	2e2a2824 	.word	0x2e2a2824
 23fd9d4:	2c363630 	.word	0x2c363630
 23fd9d8:	36363620 	.word	0x36363620
 23fd9dc:	2209      	.short	0x2209
    case 17: // MULTCLIPFAIL
    case 2: // VCSELWATCHDOGTESTFAILURE
    case 1: // VCSELCONTINUITYTESTFAILURE
    case 3: // NOVHVVALUEFOUND
      // from SetSimpleData()
      ranging_data.range_status = HardwareFail;
 23fd9de:	2305      	movs	r3, #5
        ranging_data.range_status = RangeValid;
      }
      break;

    default:
      ranging_data.range_status = None;
 23fd9e0:	7083      	strb	r3, [r0, #2]
    static uint32_t timeoutMclksToMicroseconds(uint32_t timeout_mclks, uint32_t macro_period_us);
    static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_us, uint32_t macro_period_us);
    uint32_t calcMacroPeriod(uint8_t vcsel_period);

    // Convert count rate from fixed point 9.7 format to float
    float countRateFixedToFloat(uint16_t count_rate_fixed) { return (float)count_rate_fixed / (1 << 7); }
 23fd9e2:	8ac3      	ldrh	r3, [r0, #22]
 23fd9e4:	eddf 6a15 	vldr	s13, [pc, #84]	; 23fda3c <_ZN7VL53L1X14getRangingDataEv+0x8c>
 23fd9e8:	ee07 3a10 	vmov	s14, r3
 23fd9ec:	8a43      	ldrh	r3, [r0, #18]
 23fd9ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 23fd9f2:	ee07 3a90 	vmov	s15, r3
 23fd9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 23fd9fa:	ee27 7a26 	vmul.f32	s14, s14, s13
 23fd9fe:	ee67 7aa6 	vmul.f32	s15, s15, s13
  }

  // from SetSimpleData()
  ranging_data.peak_signal_count_rate_MCPS =
 23fda02:	ed80 7a01 	vstr	s14, [r0, #4]
    countRateFixedToFloat(results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0);
  ranging_data.ambient_count_rate_MCPS =
 23fda06:	edc0 7a02 	vstr	s15, [r0, #8]
    countRateFixedToFloat(results.ambient_count_rate_mcps_sd0);
}
 23fda0a:	4770      	bx	lr
      ranging_data.range_status = MinRangeFail;
 23fda0c:	230d      	movs	r3, #13
 23fda0e:	e7e7      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SynchronizationInt;
 23fda10:	230a      	movs	r3, #10
 23fda12:	e7e5      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status =  OutOfBoundsFail;
 23fda14:	2304      	movs	r3, #4
 23fda16:	e7e3      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SignalFail;
 23fda18:	2302      	movs	r3, #2
 23fda1a:	e7e1      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SigmaFail;
 23fda1c:	2301      	movs	r3, #1
 23fda1e:	e7df      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = WrapTargetFail;
 23fda20:	2307      	movs	r3, #7
 23fda22:	e7dd      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = XtalkSignalFail;
 23fda24:	2309      	movs	r3, #9
 23fda26:	e7db      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = RangeValidMinRangeClipped;
 23fda28:	2303      	movs	r3, #3
 23fda2a:	e7d9      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      if (results.stream_count == 0)
 23fda2c:	7bc3      	ldrb	r3, [r0, #15]
 23fda2e:	b90b      	cbnz	r3, 23fda34 <_ZN7VL53L1X14getRangingDataEv+0x84>
        ranging_data.range_status = RangeValidNoWrapCheckFail;
 23fda30:	2306      	movs	r3, #6
 23fda32:	e7d5      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
        ranging_data.range_status = RangeValid;
 23fda34:	2300      	movs	r3, #0
 23fda36:	e7d3      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = None;
 23fda38:	23ff      	movs	r3, #255	; 0xff
 23fda3a:	e7d1      	b.n	23fd9e0 <_ZN7VL53L1X14getRangingDataEv+0x30>
 23fda3c:	3c000000 	.word	0x3c000000

023fda40 <_ZN7VL53L1X4readEb>:
{
 23fda40:	b538      	push	{r3, r4, r5, lr}
 23fda42:	4604      	mov	r4, r0
  if (blocking)
 23fda44:	b1a1      	cbz	r1, 23fda70 <_ZN7VL53L1X4readEb+0x30>
 23fda46:	f000 fa3d 	bl	23fdec4 <HAL_Timer_Get_Milli_Seconds>
    void startTimeout() { timeout_start_ms = millis(); }
 23fda4a:	8460      	strh	r0, [r4, #34]	; 0x22
    bool dataReady() { return (readReg(GPIO__TIO_HV_STATUS) & 0x01) == 0; }
 23fda4c:	2131      	movs	r1, #49	; 0x31
 23fda4e:	4620      	mov	r0, r4
 23fda50:	f7ff fe8e 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fda54:	43c0      	mvns	r0, r0
    while (!dataReady())
 23fda56:	f010 0501 	ands.w	r5, r0, #1
 23fda5a:	d109      	bne.n	23fda70 <_ZN7VL53L1X4readEb+0x30>
      if (checkTimeoutExpired())
 23fda5c:	4620      	mov	r0, r4
 23fda5e:	f7ff fdfe 	bl	23fd65e <_ZN7VL53L1X19checkTimeoutExpiredEv>
 23fda62:	2800      	cmp	r0, #0
 23fda64:	d0f2      	beq.n	23fda4c <_ZN7VL53L1X4readEb+0xc>
        did_timeout = true;
 23fda66:	2301      	movs	r3, #1
        return 0;
 23fda68:	4628      	mov	r0, r5
        did_timeout = true;
 23fda6a:	f884 3020 	strb.w	r3, [r4, #32]
}
 23fda6e:	bd38      	pop	{r3, r4, r5, pc}
  readResults();
 23fda70:	4620      	mov	r0, r4
 23fda72:	f7ff ff05 	bl	23fd880 <_ZN7VL53L1X11readResultsEv>
  if (!calibrated)
 23fda76:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 23fda7a:	b92b      	cbnz	r3, 23fda88 <_ZN7VL53L1X4readEb+0x48>
    setupManualCalibration();
 23fda7c:	4620      	mov	r0, r4
 23fda7e:	f7ff fed1 	bl	23fd824 <_ZN7VL53L1X22setupManualCalibrationEv>
    calibrated = true;
 23fda82:	2301      	movs	r3, #1
 23fda84:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  updateDSS();
 23fda88:	4620      	mov	r0, r4
 23fda8a:	f7ff ff6d 	bl	23fd968 <_ZN7VL53L1X9updateDSSEv>
  getRangingData();
 23fda8e:	4620      	mov	r0, r4
 23fda90:	f7ff ff8e 	bl	23fd9b0 <_ZN7VL53L1X14getRangingDataEv>
  writeReg(SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
 23fda94:	2186      	movs	r1, #134	; 0x86
 23fda96:	2201      	movs	r2, #1
 23fda98:	f7ff fe00 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  return ranging_data.range_mm;
 23fda9c:	8820      	ldrh	r0, [r4, #0]
 23fda9e:	e7e6      	b.n	23fda6e <_ZN7VL53L1X4readEb+0x2e>

023fdaa0 <_ZN7VL53L1X13decodeTimeoutEt>:

// Decode sequence step timeout in MCLKs from register value
// based on VL53L1_decode_timeout()
uint32_t VL53L1X::decodeTimeout(uint16_t reg_val)
{
  return ((uint32_t)(reg_val & 0xFF) << (reg_val >> 8)) + 1;
 23fdaa0:	b2c3      	uxtb	r3, r0
 23fdaa2:	0a00      	lsrs	r0, r0, #8
 23fdaa4:	fa03 f000 	lsl.w	r0, r3, r0
}
 23fdaa8:	3001      	adds	r0, #1
 23fdaaa:	4770      	bx	lr

023fdaac <_ZN7VL53L1X13encodeTimeoutEm>:
  // encoded format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
 23fdaac:	b160      	cbz	r0, 23fdac8 <_ZN7VL53L1X13encodeTimeoutEm+0x1c>
  {
    ls_byte = timeout_mclks - 1;
 23fdaae:	2300      	movs	r3, #0
 23fdab0:	3801      	subs	r0, #1

    while ((ls_byte & 0xFFFFFF00) > 0)
 23fdab2:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
 23fdab6:	b29a      	uxth	r2, r3
 23fdab8:	f103 0301 	add.w	r3, r3, #1
 23fdabc:	d001      	beq.n	23fdac2 <_ZN7VL53L1X13encodeTimeoutEm+0x16>
    {
      ls_byte >>= 1;
 23fdabe:	0840      	lsrs	r0, r0, #1
    while ((ls_byte & 0xFFFFFF00) > 0)
 23fdac0:	e7f7      	b.n	23fdab2 <_ZN7VL53L1X13encodeTimeoutEm+0x6>
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
 23fdac2:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 23fdac6:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
 23fdac8:	4770      	bx	lr

023fdaca <_ZN7VL53L1X15calcMacroPeriodEh>:
// based on VL53L1_calc_macro_period_us()
uint32_t VL53L1X::calcMacroPeriod(uint8_t vcsel_period)
{
  // from VL53L1_calc_pll_period_us()
  // fast osc frequency in 4.12 format; PLL period in 0.24 format
  uint32_t pll_period_us = ((uint32_t)0x01 << 30) / fast_osc_frequency;
 23fdaca:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 23fdacc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 23fdad0:	fbb0 f0f3 	udiv	r0, r0, r3

  // from VL53L1_decode_vcsel_period()
  uint8_t vcsel_period_pclks = (vcsel_period + 1) << 1;

  // VL53L1_MACRO_PERIOD_VCSEL_PERIODS = 2304
  uint32_t macro_period_us = (uint32_t)2304 * pll_period_us;
 23fdad4:	f44f 6310 	mov.w	r3, #2304	; 0x900
 23fdad8:	4358      	muls	r0, r3
  macro_period_us >>= 6;
 23fdada:	0983      	lsrs	r3, r0, #6
  uint8_t vcsel_period_pclks = (vcsel_period + 1) << 1;
 23fdadc:	1c48      	adds	r0, r1, #1
 23fdade:	0040      	lsls	r0, r0, #1
  macro_period_us *= vcsel_period_pclks;
 23fdae0:	b2c0      	uxtb	r0, r0
 23fdae2:	4358      	muls	r0, r3
  macro_period_us >>= 6;

  return macro_period_us;
 23fdae4:	0980      	lsrs	r0, r0, #6
 23fdae6:	4770      	bx	lr

023fdae8 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>:
  if (budget_us <= TimingGuard) { return false; }
 23fdae8:	f241 13b0 	movw	r3, #4528	; 0x11b0
 23fdaec:	4299      	cmp	r1, r3
{
 23fdaee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 23fdaf2:	4605      	mov	r5, r0
  if (budget_us <= TimingGuard) { return false; }
 23fdaf4:	d956      	bls.n	23fdba4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xbc>
  if (range_config_timeout_us > 1100000) { return false; } // FDA_MAX_TIMING_BUDGET_US * 2
 23fdaf6:	4b2c      	ldr	r3, [pc, #176]	; (23fdba8 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xc0>)
  uint32_t range_config_timeout_us = budget_us -= TimingGuard;
 23fdaf8:	f5a1 548d 	sub.w	r4, r1, #4512	; 0x11a0
 23fdafc:	3c10      	subs	r4, #16
  if (range_config_timeout_us > 1100000) { return false; } // FDA_MAX_TIMING_BUDGET_US * 2
 23fdafe:	429c      	cmp	r4, r3
 23fdb00:	d850      	bhi.n	23fdba4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xbc>
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
 23fdb02:	2160      	movs	r1, #96	; 0x60
 23fdb04:	f7ff fe34 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fdb08:	4601      	mov	r1, r0
 23fdb0a:	4628      	mov	r0, r5
 23fdb0c:	f7ff ffdd 	bl	23fdaca <_ZN7VL53L1X15calcMacroPeriodEh>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 23fdb10:	0847      	lsrs	r7, r0, #1
 23fdb12:	f507 127a 	add.w	r2, r7, #4096000	; 0x3e8000
 23fdb16:	fbb2 f2f0 	udiv	r2, r2, r0
  writeReg(PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);
 23fdb1a:	2aff      	cmp	r2, #255	; 0xff
 23fdb1c:	bf28      	it	cs
 23fdb1e:	22ff      	movcs	r2, #255	; 0xff
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
 23fdb20:	4606      	mov	r6, r0
  writeReg(PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);
 23fdb22:	214b      	movs	r1, #75	; 0x4b
 23fdb24:	b2d2      	uxtb	r2, r2
 23fdb26:	4628      	mov	r0, r5
 23fdb28:	f7ff fdb8 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 23fdb2c:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
 23fdb30:	fbb0 f0f6 	udiv	r0, r0, r6
 23fdb34:	f7ff ffba 	bl	23fdaac <_ZN7VL53L1X13encodeTimeoutEm>
  range_config_timeout_us /= 2;
 23fdb38:	0864      	lsrs	r4, r4, #1
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
 23fdb3a:	4602      	mov	r2, r0
 23fdb3c:	215a      	movs	r1, #90	; 0x5a
 23fdb3e:	4628      	mov	r0, r5
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 23fdb40:	ea4f 3804 	mov.w	r8, r4, lsl #12
 23fdb44:	eb07 3404 	add.w	r4, r7, r4, lsl #12
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
 23fdb48:	f7ff fdc4 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg16Bit(RANGE_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
 23fdb4c:	fbb4 f0f6 	udiv	r0, r4, r6
 23fdb50:	f7ff ffac 	bl	23fdaac <_ZN7VL53L1X13encodeTimeoutEm>
 23fdb54:	215e      	movs	r1, #94	; 0x5e
 23fdb56:	4602      	mov	r2, r0
 23fdb58:	4628      	mov	r0, r5
 23fdb5a:	f7ff fdbb 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_B));
 23fdb5e:	2163      	movs	r1, #99	; 0x63
 23fdb60:	4628      	mov	r0, r5
 23fdb62:	f7ff fe05 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fdb66:	4601      	mov	r1, r0
 23fdb68:	4628      	mov	r0, r5
 23fdb6a:	f7ff ffae 	bl	23fdaca <_ZN7VL53L1X15calcMacroPeriodEh>
 23fdb6e:	4604      	mov	r4, r0
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 23fdb70:	0846      	lsrs	r6, r0, #1
 23fdb72:	f506 5080 	add.w	r0, r6, #4096	; 0x1000
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_B, encodeTimeout(
 23fdb76:	fbb0 f0f4 	udiv	r0, r0, r4
 23fdb7a:	f7ff ff97 	bl	23fdaac <_ZN7VL53L1X13encodeTimeoutEm>
 23fdb7e:	215c      	movs	r1, #92	; 0x5c
 23fdb80:	4602      	mov	r2, r0
 23fdb82:	4628      	mov	r0, r5
 23fdb84:	f7ff fda6 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
 23fdb88:	eb08 0006 	add.w	r0, r8, r6
  writeReg16Bit(RANGE_CONFIG__TIMEOUT_MACROP_B, encodeTimeout(
 23fdb8c:	fbb0 f0f4 	udiv	r0, r0, r4
 23fdb90:	f7ff ff8c 	bl	23fdaac <_ZN7VL53L1X13encodeTimeoutEm>
 23fdb94:	2161      	movs	r1, #97	; 0x61
 23fdb96:	4602      	mov	r2, r0
 23fdb98:	4628      	mov	r0, r5
 23fdb9a:	f7ff fd9b 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  return true;
 23fdb9e:	2001      	movs	r0, #1
}
 23fdba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (budget_us <= TimingGuard) { return false; }
 23fdba4:	2000      	movs	r0, #0
 23fdba6:	e7fb      	b.n	23fdba0 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xb8>
 23fdba8:	0010c8e0 	.word	0x0010c8e0

023fdbac <_ZN7VL53L1X26getMeasurementTimingBudgetEv>:
{
 23fdbac:	b538      	push	{r3, r4, r5, lr}
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
 23fdbae:	2160      	movs	r1, #96	; 0x60
{
 23fdbb0:	4605      	mov	r5, r0
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
 23fdbb2:	f7ff fddd 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fdbb6:	4601      	mov	r1, r0
 23fdbb8:	4628      	mov	r0, r5
 23fdbba:	f7ff ff86 	bl	23fdaca <_ZN7VL53L1X15calcMacroPeriodEh>
  uint32_t range_config_timeout_us = timeoutMclksToMicroseconds(decodeTimeout(
 23fdbbe:	215e      	movs	r1, #94	; 0x5e
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
 23fdbc0:	4604      	mov	r4, r0
  uint32_t range_config_timeout_us = timeoutMclksToMicroseconds(decodeTimeout(
 23fdbc2:	4628      	mov	r0, r5
 23fdbc4:	f7ff fdf4 	bl	23fd7b0 <_ZN7VL53L1X12readReg16BitEt>
 23fdbc8:	f7ff ff6a 	bl	23fdaa0 <_ZN7VL53L1X13decodeTimeoutEt>
  return ((uint64_t)timeout_mclks * macro_period_us + 0x800) >> 12;
 23fdbcc:	2200      	movs	r2, #0
 23fdbce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 23fdbd2:	fbe4 3200 	umlal	r3, r2, r4, r0
 23fdbd6:	0b18      	lsrs	r0, r3, #12
 23fdbd8:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
  return  2 * range_config_timeout_us + TimingGuard;
 23fdbdc:	f600 00d8 	addw	r0, r0, #2264	; 0x8d8
}
 23fdbe0:	0040      	lsls	r0, r0, #1
 23fdbe2:	bd38      	pop	{r3, r4, r5, pc}

023fdbe4 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>:
{
 23fdbe4:	b570      	push	{r4, r5, r6, lr}
 23fdbe6:	460d      	mov	r5, r1
 23fdbe8:	4604      	mov	r4, r0
  uint32_t budget_us = getMeasurementTimingBudget();
 23fdbea:	f7ff ffdf 	bl	23fdbac <_ZN7VL53L1X26getMeasurementTimingBudgetEv>
  switch (mode)
 23fdbee:	2d01      	cmp	r5, #1
  uint32_t budget_us = getMeasurementTimingBudget();
 23fdbf0:	4606      	mov	r6, r0
  switch (mode)
 23fdbf2:	d02e      	beq.n	23fdc52 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x6e>
 23fdbf4:	2d02      	cmp	r5, #2
 23fdbf6:	d04c      	beq.n	23fdc92 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0xae>
 23fdbf8:	2d00      	cmp	r5, #0
 23fdbfa:	d16a      	bne.n	23fdcd2 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0xee>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
 23fdbfc:	2207      	movs	r2, #7
 23fdbfe:	2160      	movs	r1, #96	; 0x60
 23fdc00:	4620      	mov	r0, r4
 23fdc02:	f7ff fd4b 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
 23fdc06:	2205      	movs	r2, #5
 23fdc08:	2163      	movs	r1, #99	; 0x63
 23fdc0a:	4620      	mov	r0, r4
 23fdc0c:	f7ff fd46 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
 23fdc10:	2238      	movs	r2, #56	; 0x38
 23fdc12:	2169      	movs	r1, #105	; 0x69
 23fdc14:	4620      	mov	r0, r4
 23fdc16:	f7ff fd41 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x07);
 23fdc1a:	2207      	movs	r2, #7
 23fdc1c:	2178      	movs	r1, #120	; 0x78
 23fdc1e:	4620      	mov	r0, r4
 23fdc20:	f7ff fd3c 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x05);
 23fdc24:	2205      	movs	r2, #5
 23fdc26:	2179      	movs	r1, #121	; 0x79
 23fdc28:	4620      	mov	r0, r4
 23fdc2a:	f7ff fd37 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 6); // tuning parm default
 23fdc2e:	2206      	movs	r2, #6
 23fdc30:	217a      	movs	r1, #122	; 0x7a
 23fdc32:	4620      	mov	r0, r4
 23fdc34:	f7ff fd32 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 6); // tuning parm default
 23fdc38:	2206      	movs	r2, #6
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
 23fdc3a:	217b      	movs	r1, #123	; 0x7b
 23fdc3c:	4620      	mov	r0, r4
 23fdc3e:	f7ff fd2d 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  setMeasurementTimingBudget(budget_us);
 23fdc42:	4631      	mov	r1, r6
 23fdc44:	4620      	mov	r0, r4
 23fdc46:	f7ff ff4f 	bl	23fdae8 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
  return true;
 23fdc4a:	2001      	movs	r0, #1
  distance_mode = mode;
 23fdc4c:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
}
 23fdc50:	bd70      	pop	{r4, r5, r6, pc}
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x0B);
 23fdc52:	220b      	movs	r2, #11
 23fdc54:	2160      	movs	r1, #96	; 0x60
 23fdc56:	4620      	mov	r0, r4
 23fdc58:	f7ff fd20 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x09);
 23fdc5c:	2209      	movs	r2, #9
 23fdc5e:	2163      	movs	r1, #99	; 0x63
 23fdc60:	4620      	mov	r0, r4
 23fdc62:	f7ff fd1b 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0x78);
 23fdc66:	2278      	movs	r2, #120	; 0x78
 23fdc68:	2169      	movs	r1, #105	; 0x69
 23fdc6a:	4620      	mov	r0, r4
 23fdc6c:	f7ff fd16 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x0B);
 23fdc70:	220b      	movs	r2, #11
 23fdc72:	2178      	movs	r1, #120	; 0x78
 23fdc74:	4620      	mov	r0, r4
 23fdc76:	f7ff fd11 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x09);
 23fdc7a:	2209      	movs	r2, #9
 23fdc7c:	2179      	movs	r1, #121	; 0x79
 23fdc7e:	4620      	mov	r0, r4
 23fdc80:	f7ff fd0c 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 10); // tuning parm default
 23fdc84:	220a      	movs	r2, #10
 23fdc86:	217a      	movs	r1, #122	; 0x7a
 23fdc88:	4620      	mov	r0, r4
 23fdc8a:	f7ff fd07 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 10); // tuning parm default
 23fdc8e:	220a      	movs	r2, #10
 23fdc90:	e7d3      	b.n	23fdc3a <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x56>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
 23fdc92:	220f      	movs	r2, #15
 23fdc94:	2160      	movs	r1, #96	; 0x60
 23fdc96:	4620      	mov	r0, r4
 23fdc98:	f7ff fd00 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
 23fdc9c:	220d      	movs	r2, #13
 23fdc9e:	2163      	movs	r1, #99	; 0x63
 23fdca0:	4620      	mov	r0, r4
 23fdca2:	f7ff fcfb 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
 23fdca6:	22b8      	movs	r2, #184	; 0xb8
 23fdca8:	2169      	movs	r1, #105	; 0x69
 23fdcaa:	4620      	mov	r0, r4
 23fdcac:	f7ff fcf6 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x0F);
 23fdcb0:	220f      	movs	r2, #15
 23fdcb2:	2178      	movs	r1, #120	; 0x78
 23fdcb4:	4620      	mov	r0, r4
 23fdcb6:	f7ff fcf1 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x0D);
 23fdcba:	220d      	movs	r2, #13
 23fdcbc:	2179      	movs	r1, #121	; 0x79
 23fdcbe:	4620      	mov	r0, r4
 23fdcc0:	f7ff fcec 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 14); // tuning parm default
 23fdcc4:	220e      	movs	r2, #14
 23fdcc6:	217a      	movs	r1, #122	; 0x7a
 23fdcc8:	4620      	mov	r0, r4
 23fdcca:	f7ff fce7 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
 23fdcce:	220e      	movs	r2, #14
 23fdcd0:	e7b3      	b.n	23fdc3a <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x56>
  switch (mode)
 23fdcd2:	2000      	movs	r0, #0
 23fdcd4:	e7bc      	b.n	23fdc50 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x6c>

023fdcd6 <_ZN7VL53L1X4initEb>:
{
 23fdcd6:	b538      	push	{r3, r4, r5, lr}
 23fdcd8:	460d      	mov	r5, r1
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
 23fdcda:	f240 110f 	movw	r1, #271	; 0x10f
{
 23fdcde:	4604      	mov	r4, r0
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
 23fdce0:	f7ff fd66 	bl	23fd7b0 <_ZN7VL53L1X12readReg16BitEt>
 23fdce4:	f64e 23cc 	movw	r3, #60108	; 0xeacc
 23fdce8:	4298      	cmp	r0, r3
 23fdcea:	f040 80be 	bne.w	23fde6a <_ZN7VL53L1X4initEb+0x194>
  writeReg(SOFT_RESET, 0x00);
 23fdcee:	2200      	movs	r2, #0
 23fdcf0:	4620      	mov	r0, r4
 23fdcf2:	4611      	mov	r1, r2
 23fdcf4:	f7ff fcd2 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 23fdcf8:	2064      	movs	r0, #100	; 0x64
 23fdcfa:	f000 f8d5 	bl	23fdea8 <HAL_Delay_Microseconds>
  writeReg(SOFT_RESET, 0x01);
 23fdcfe:	2201      	movs	r2, #1
 23fdd00:	2100      	movs	r1, #0
 23fdd02:	4620      	mov	r0, r4
 23fdd04:	f7ff fcca 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  delay(1);
 23fdd08:	2001      	movs	r0, #1
 23fdd0a:	f000 fcbd 	bl	23fe688 <delay>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 23fdd0e:	f000 f8d9 	bl	23fdec4 <HAL_Timer_Get_Milli_Seconds>
    void startTimeout() { timeout_start_ms = millis(); }
 23fdd12:	8460      	strh	r0, [r4, #34]	; 0x22
  while ((readReg(FIRMWARE__SYSTEM_STATUS) & 0x01) == 0 || last_status != 0)
 23fdd14:	21e5      	movs	r1, #229	; 0xe5
 23fdd16:	4620      	mov	r0, r4
 23fdd18:	f7ff fd2a 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
 23fdd1c:	07c3      	lsls	r3, r0, #31
 23fdd1e:	f140 809b 	bpl.w	23fde58 <_ZN7VL53L1X4initEb+0x182>
 23fdd22:	7b23      	ldrb	r3, [r4, #12]
 23fdd24:	2b00      	cmp	r3, #0
 23fdd26:	f040 8097 	bne.w	23fde58 <_ZN7VL53L1X4initEb+0x182>
  if (io_2v8)
 23fdd2a:	b155      	cbz	r5, 23fdd42 <_ZN7VL53L1X4initEb+0x6c>
      readReg(PAD_I2C_HV__EXTSUP_CONFIG) | 0x01);
 23fdd2c:	212e      	movs	r1, #46	; 0x2e
 23fdd2e:	4620      	mov	r0, r4
 23fdd30:	f7ff fd1e 	bl	23fd770 <_ZN7VL53L1X7readRegENS_7regAddrE>
    writeReg(PAD_I2C_HV__EXTSUP_CONFIG,
 23fdd34:	f040 0001 	orr.w	r0, r0, #1
 23fdd38:	b2c2      	uxtb	r2, r0
 23fdd3a:	212e      	movs	r1, #46	; 0x2e
 23fdd3c:	4620      	mov	r0, r4
 23fdd3e:	f7ff fcad 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  fast_osc_frequency = readReg16Bit(OSC_MEASURED__FAST_OSC__FREQUENCY);
 23fdd42:	2106      	movs	r1, #6
 23fdd44:	4620      	mov	r0, r4
 23fdd46:	f7ff fd33 	bl	23fd7b0 <_ZN7VL53L1X12readReg16BitEt>
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
 23fdd4a:	21de      	movs	r1, #222	; 0xde
  fast_osc_frequency = readReg16Bit(OSC_MEASURED__FAST_OSC__FREQUENCY);
 23fdd4c:	84a0      	strh	r0, [r4, #36]	; 0x24
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
 23fdd4e:	4620      	mov	r0, r4
 23fdd50:	f7ff fd2e 	bl	23fd7b0 <_ZN7VL53L1X12readReg16BitEt>
  writeReg16Bit(DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, TargetRate); // should already be this value after reset
 23fdd54:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 23fdd58:	2124      	movs	r1, #36	; 0x24
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
 23fdd5a:	84e0      	strh	r0, [r4, #38]	; 0x26
  writeReg16Bit(DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, TargetRate); // should already be this value after reset
 23fdd5c:	4620      	mov	r0, r4
 23fdd5e:	f7ff fcb9 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(GPIO__TIO_HV_STATUS, 0x02);
 23fdd62:	2202      	movs	r2, #2
 23fdd64:	2131      	movs	r1, #49	; 0x31
 23fdd66:	4620      	mov	r0, r4
 23fdd68:	f7ff fc98 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS, 8); // tuning parm default
 23fdd6c:	2208      	movs	r2, #8
 23fdd6e:	2136      	movs	r1, #54	; 0x36
 23fdd70:	4620      	mov	r0, r4
 23fdd72:	f7ff fc93 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS, 16); // tuning parm default
 23fdd76:	2210      	movs	r2, #16
 23fdd78:	2137      	movs	r1, #55	; 0x37
 23fdd7a:	4620      	mov	r0, r4
 23fdd7c:	f7ff fc8e 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM, 0x01);
 23fdd80:	2201      	movs	r2, #1
 23fdd82:	2139      	movs	r1, #57	; 0x39
 23fdd84:	4620      	mov	r0, r4
 23fdd86:	f7ff fc89 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__RANGE_IGNORE_VALID_HEIGHT_MM, 0xFF);
 23fdd8a:	22ff      	movs	r2, #255	; 0xff
 23fdd8c:	213e      	movs	r1, #62	; 0x3e
 23fdd8e:	4620      	mov	r0, r4
 23fdd90:	f7ff fc84 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__RANGE_MIN_CLIP, 0); // tuning parm default
 23fdd94:	2200      	movs	r2, #0
 23fdd96:	213f      	movs	r1, #63	; 0x3f
 23fdd98:	4620      	mov	r0, r4
 23fdd9a:	f7ff fc7f 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__CONSISTENCY_CHECK__TOLERANCE, 2); // tuning parm default
 23fdd9e:	2202      	movs	r2, #2
 23fdda0:	2140      	movs	r1, #64	; 0x40
 23fdda2:	4620      	mov	r0, r4
 23fdda4:	f7ff fc7a 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(SYSTEM__THRESH_RATE_HIGH, 0x0000);
 23fdda8:	2200      	movs	r2, #0
 23fddaa:	2150      	movs	r1, #80	; 0x50
 23fddac:	4620      	mov	r0, r4
 23fddae:	f7ff fc91 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg16Bit(SYSTEM__THRESH_RATE_LOW, 0x0000);
 23fddb2:	2200      	movs	r2, #0
 23fddb4:	2152      	movs	r1, #82	; 0x52
 23fddb6:	4620      	mov	r0, r4
 23fddb8:	f7ff fc8c 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(DSS_CONFIG__APERTURE_ATTENUATION, 0x38);
 23fddbc:	2238      	movs	r2, #56	; 0x38
 23fddbe:	2157      	movs	r1, #87	; 0x57
 23fddc0:	4620      	mov	r0, r4
 23fddc2:	f7ff fc6b 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(RANGE_CONFIG__SIGMA_THRESH, 360); // tuning parm default
 23fddc6:	f44f 72b4 	mov.w	r2, #360	; 0x168
 23fddca:	2164      	movs	r1, #100	; 0x64
 23fddcc:	4620      	mov	r0, r4
 23fddce:	f7ff fc81 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg16Bit(RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, 192); // tuning parm default
 23fddd2:	22c0      	movs	r2, #192	; 0xc0
 23fddd4:	2166      	movs	r1, #102	; 0x66
 23fddd6:	4620      	mov	r0, r4
 23fddd8:	f7ff fc7c 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD_0, 0x01);
 23fdddc:	2201      	movs	r2, #1
 23fddde:	2171      	movs	r1, #113	; 0x71
 23fdde0:	4620      	mov	r0, r4
 23fdde2:	f7ff fc5b 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD_1, 0x01);
 23fdde6:	2201      	movs	r2, #1
 23fdde8:	217c      	movs	r1, #124	; 0x7c
 23fddea:	4620      	mov	r0, r4
 23fddec:	f7ff fc56 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SD_CONFIG__QUANTIFIER, 2); // tuning parm default
 23fddf0:	2202      	movs	r2, #2
 23fddf2:	217e      	movs	r1, #126	; 0x7e
 23fddf4:	4620      	mov	r0, r4
 23fddf6:	f7ff fc51 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD, 0x00);
 23fddfa:	2200      	movs	r2, #0
 23fddfc:	2182      	movs	r1, #130	; 0x82
 23fddfe:	4620      	mov	r0, r4
 23fde00:	f7ff fc4c 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__SEED_CONFIG, 1); // tuning parm default
 23fde04:	2201      	movs	r2, #1
 23fde06:	2177      	movs	r1, #119	; 0x77
 23fde08:	4620      	mov	r0, r4
 23fde0a:	f7ff fc47 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__SEQUENCE_CONFIG, 0x8B); // VHV, PHASECAL, DSS1, RANGE
 23fde0e:	228b      	movs	r2, #139	; 0x8b
 23fde10:	2181      	movs	r1, #129	; 0x81
 23fde12:	4620      	mov	r0, r4
 23fde14:	f7ff fc42 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 200 << 8);
 23fde18:	f44f 4248 	mov.w	r2, #51200	; 0xc800
 23fde1c:	2154      	movs	r1, #84	; 0x54
 23fde1e:	4620      	mov	r0, r4
 23fde20:	f7ff fc58 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(DSS_CONFIG__ROI_MODE_CONTROL, 2); // REQUESTED_EFFFECTIVE_SPADS
 23fde24:	2202      	movs	r2, #2
 23fde26:	214f      	movs	r1, #79	; 0x4f
 23fde28:	4620      	mov	r0, r4
 23fde2a:	f7ff fc37 	bl	23fd69c <_ZN7VL53L1X8writeRegEth>
  setDistanceMode(Long);
 23fde2e:	2102      	movs	r1, #2
 23fde30:	4620      	mov	r0, r4
 23fde32:	f7ff fed7 	bl	23fdbe4 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>
  setMeasurementTimingBudget(50000);
 23fde36:	f24c 3150 	movw	r1, #50000	; 0xc350
 23fde3a:	4620      	mov	r0, r4
 23fde3c:	f7ff fe54 	bl	23fdae8 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
    readReg16Bit(MM_CONFIG__OUTER_OFFSET_MM) * 4);
 23fde40:	2122      	movs	r1, #34	; 0x22
 23fde42:	4620      	mov	r0, r4
 23fde44:	f7ff fcb4 	bl	23fd7b0 <_ZN7VL53L1X12readReg16BitEt>
  writeReg16Bit(ALGO__PART_TO_PART_RANGE_OFFSET_MM,
 23fde48:	0080      	lsls	r0, r0, #2
 23fde4a:	b282      	uxth	r2, r0
 23fde4c:	211e      	movs	r1, #30
 23fde4e:	4620      	mov	r0, r4
 23fde50:	f7ff fc40 	bl	23fd6d4 <_ZN7VL53L1X13writeReg16BitEtt>
  return true;
 23fde54:	2001      	movs	r0, #1
}
 23fde56:	bd38      	pop	{r3, r4, r5, pc}
    if (checkTimeoutExpired())
 23fde58:	4620      	mov	r0, r4
 23fde5a:	f7ff fc00 	bl	23fd65e <_ZN7VL53L1X19checkTimeoutExpiredEv>
 23fde5e:	2800      	cmp	r0, #0
 23fde60:	f43f af58 	beq.w	23fdd14 <_ZN7VL53L1X4initEb+0x3e>
      did_timeout = true;
 23fde64:	2301      	movs	r3, #1
 23fde66:	f884 3020 	strb.w	r3, [r4, #32]
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
 23fde6a:	2000      	movs	r0, #0
 23fde6c:	e7f3      	b.n	23fde56 <_ZN7VL53L1X4initEb+0x180>
	...

023fde70 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
 23fde70:	b509      	push	{r0, r3, lr}
 23fde72:	4804      	ldr	r0, [pc, #16]	; (23fde84 <os_mutex_recursive_create+0x14>)
 23fde74:	6800      	ldr	r0, [r0, #0]
 23fde76:	4b04      	ldr	r3, [pc, #16]	; (23fde88 <os_mutex_recursive_create+0x18>)
 23fde78:	4403      	add	r3, r0
 23fde7a:	681b      	ldr	r3, [r3, #0]
 23fde7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fde7e:	9302      	str	r3, [sp, #8]
 23fde80:	bd09      	pop	{r0, r3, pc}
 23fde82:	0000      	.short	0x0000
 23fde84:	1007adac 	.word	0x1007adac
 23fde88:	00000030 	.word	0x00000030

023fde8c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 23fde8c:	b509      	push	{r0, r3, lr}
 23fde8e:	4804      	ldr	r0, [pc, #16]	; (23fdea0 <HAL_RNG_GetRandomNumber+0x14>)
 23fde90:	6800      	ldr	r0, [r0, #0]
 23fde92:	4b04      	ldr	r3, [pc, #16]	; (23fdea4 <HAL_RNG_GetRandomNumber+0x18>)
 23fde94:	4403      	add	r3, r0
 23fde96:	681b      	ldr	r3, [r3, #0]
 23fde98:	685b      	ldr	r3, [r3, #4]
 23fde9a:	9302      	str	r3, [sp, #8]
 23fde9c:	bd09      	pop	{r0, r3, pc}
 23fde9e:	0000      	.short	0x0000
 23fdea0:	1007adac 	.word	0x1007adac
 23fdea4:	00000000 	.word	0x00000000

023fdea8 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 23fdea8:	b509      	push	{r0, r3, lr}
 23fdeaa:	4804      	ldr	r0, [pc, #16]	; (23fdebc <HAL_Delay_Microseconds+0x14>)
 23fdeac:	6800      	ldr	r0, [r0, #0]
 23fdeae:	4b04      	ldr	r3, [pc, #16]	; (23fdec0 <HAL_Delay_Microseconds+0x18>)
 23fdeb0:	4403      	add	r3, r0
 23fdeb2:	681b      	ldr	r3, [r3, #0]
 23fdeb4:	68db      	ldr	r3, [r3, #12]
 23fdeb6:	9302      	str	r3, [sp, #8]
 23fdeb8:	bd09      	pop	{r0, r3, pc}
 23fdeba:	0000      	.short	0x0000
 23fdebc:	1007adac 	.word	0x1007adac
 23fdec0:	00000000 	.word	0x00000000

023fdec4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 23fdec4:	b509      	push	{r0, r3, lr}
 23fdec6:	4804      	ldr	r0, [pc, #16]	; (23fded8 <HAL_Timer_Get_Milli_Seconds+0x14>)
 23fdec8:	6800      	ldr	r0, [r0, #0]
 23fdeca:	4b04      	ldr	r3, [pc, #16]	; (23fdedc <HAL_Timer_Get_Milli_Seconds+0x18>)
 23fdecc:	4403      	add	r3, r0
 23fdece:	681b      	ldr	r3, [r3, #0]
 23fded0:	695b      	ldr	r3, [r3, #20]
 23fded2:	9302      	str	r3, [sp, #8]
 23fded4:	bd09      	pop	{r0, r3, pc}
 23fded6:	0000      	.short	0x0000
 23fded8:	1007adac 	.word	0x1007adac
 23fdedc:	00000000 	.word	0x00000000

023fdee0 <hal_gpio_mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, hal_pin_map, hal_pin_info_t*(void))
DYNALIB_FN(1, hal_gpio, hal_pin_validate_function, PinFunction(hal_pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, hal_gpio_mode, void(hal_pin_t, PinMode))
 23fdee0:	b509      	push	{r0, r3, lr}
 23fdee2:	4804      	ldr	r0, [pc, #16]	; (23fdef4 <hal_gpio_mode+0x14>)
 23fdee4:	6800      	ldr	r0, [r0, #0]
 23fdee6:	4b04      	ldr	r3, [pc, #16]	; (23fdef8 <hal_gpio_mode+0x18>)
 23fdee8:	4403      	add	r3, r0
 23fdeea:	681b      	ldr	r3, [r3, #0]
 23fdeec:	689b      	ldr	r3, [r3, #8]
 23fdeee:	9302      	str	r3, [sp, #8]
 23fdef0:	bd09      	pop	{r0, r3, pc}
 23fdef2:	0000      	.short	0x0000
 23fdef4:	1007adac 	.word	0x1007adac
 23fdef8:	00000014 	.word	0x00000014

023fdefc <hal_gpio_get_mode>:
DYNALIB_FN(3, hal_gpio, hal_gpio_get_mode, PinMode(hal_pin_t))
 23fdefc:	b509      	push	{r0, r3, lr}
 23fdefe:	4804      	ldr	r0, [pc, #16]	; (23fdf10 <hal_gpio_get_mode+0x14>)
 23fdf00:	6800      	ldr	r0, [r0, #0]
 23fdf02:	4b04      	ldr	r3, [pc, #16]	; (23fdf14 <hal_gpio_get_mode+0x18>)
 23fdf04:	4403      	add	r3, r0
 23fdf06:	681b      	ldr	r3, [r3, #0]
 23fdf08:	68db      	ldr	r3, [r3, #12]
 23fdf0a:	9302      	str	r3, [sp, #8]
 23fdf0c:	bd09      	pop	{r0, r3, pc}
 23fdf0e:	0000      	.short	0x0000
 23fdf10:	1007adac 	.word	0x1007adac
 23fdf14:	00000014 	.word	0x00000014

023fdf18 <hal_gpio_write>:
DYNALIB_FN(4, hal_gpio, hal_gpio_write, void(hal_pin_t, uint8_t))
 23fdf18:	b509      	push	{r0, r3, lr}
 23fdf1a:	4804      	ldr	r0, [pc, #16]	; (23fdf2c <hal_gpio_write+0x14>)
 23fdf1c:	6800      	ldr	r0, [r0, #0]
 23fdf1e:	4b04      	ldr	r3, [pc, #16]	; (23fdf30 <hal_gpio_write+0x18>)
 23fdf20:	4403      	add	r3, r0
 23fdf22:	681b      	ldr	r3, [r3, #0]
 23fdf24:	691b      	ldr	r3, [r3, #16]
 23fdf26:	9302      	str	r3, [sp, #8]
 23fdf28:	bd09      	pop	{r0, r3, pc}
 23fdf2a:	0000      	.short	0x0000
 23fdf2c:	1007adac 	.word	0x1007adac
 23fdf30:	00000014 	.word	0x00000014

023fdf34 <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
 23fdf34:	b509      	push	{r0, r3, lr}
 23fdf36:	4804      	ldr	r0, [pc, #16]	; (23fdf48 <hal_i2c_set_speed+0x14>)
 23fdf38:	6800      	ldr	r0, [r0, #0]
 23fdf3a:	4b04      	ldr	r3, [pc, #16]	; (23fdf4c <hal_i2c_set_speed+0x18>)
 23fdf3c:	4403      	add	r3, r0
 23fdf3e:	681b      	ldr	r3, [r3, #0]
 23fdf40:	681b      	ldr	r3, [r3, #0]
 23fdf42:	9302      	str	r3, [sp, #8]
 23fdf44:	bd09      	pop	{r0, r3, pc}
 23fdf46:	0000      	.short	0x0000
 23fdf48:	1007adac 	.word	0x1007adac
 23fdf4c:	00000010 	.word	0x00000010

023fdf50 <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
 23fdf50:	b509      	push	{r0, r3, lr}
 23fdf52:	4804      	ldr	r0, [pc, #16]	; (23fdf64 <hal_i2c_begin+0x14>)
 23fdf54:	6800      	ldr	r0, [r0, #0]
 23fdf56:	4b04      	ldr	r3, [pc, #16]	; (23fdf68 <hal_i2c_begin+0x18>)
 23fdf58:	4403      	add	r3, r0
 23fdf5a:	681b      	ldr	r3, [r3, #0]
 23fdf5c:	68db      	ldr	r3, [r3, #12]
 23fdf5e:	9302      	str	r3, [sp, #8]
 23fdf60:	bd09      	pop	{r0, r3, pc}
 23fdf62:	0000      	.short	0x0000
 23fdf64:	1007adac 	.word	0x1007adac
 23fdf68:	00000010 	.word	0x00000010

023fdf6c <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
 23fdf6c:	b509      	push	{r0, r3, lr}
 23fdf6e:	4804      	ldr	r0, [pc, #16]	; (23fdf80 <hal_i2c_begin_transmission+0x14>)
 23fdf70:	6800      	ldr	r0, [r0, #0]
 23fdf72:	4b04      	ldr	r3, [pc, #16]	; (23fdf84 <hal_i2c_begin_transmission+0x18>)
 23fdf74:	4403      	add	r3, r0
 23fdf76:	681b      	ldr	r3, [r3, #0]
 23fdf78:	699b      	ldr	r3, [r3, #24]
 23fdf7a:	9302      	str	r3, [sp, #8]
 23fdf7c:	bd09      	pop	{r0, r3, pc}
 23fdf7e:	0000      	.short	0x0000
 23fdf80:	1007adac 	.word	0x1007adac
 23fdf84:	00000010 	.word	0x00000010

023fdf88 <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
 23fdf88:	b509      	push	{r0, r3, lr}
 23fdf8a:	4804      	ldr	r0, [pc, #16]	; (23fdf9c <hal_i2c_end_transmission+0x14>)
 23fdf8c:	6800      	ldr	r0, [r0, #0]
 23fdf8e:	4b04      	ldr	r3, [pc, #16]	; (23fdfa0 <hal_i2c_end_transmission+0x18>)
 23fdf90:	4403      	add	r3, r0
 23fdf92:	681b      	ldr	r3, [r3, #0]
 23fdf94:	69db      	ldr	r3, [r3, #28]
 23fdf96:	9302      	str	r3, [sp, #8]
 23fdf98:	bd09      	pop	{r0, r3, pc}
 23fdf9a:	0000      	.short	0x0000
 23fdf9c:	1007adac 	.word	0x1007adac
 23fdfa0:	00000010 	.word	0x00000010

023fdfa4 <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
 23fdfa4:	b509      	push	{r0, r3, lr}
 23fdfa6:	4804      	ldr	r0, [pc, #16]	; (23fdfb8 <hal_i2c_write+0x14>)
 23fdfa8:	6800      	ldr	r0, [r0, #0]
 23fdfaa:	4b04      	ldr	r3, [pc, #16]	; (23fdfbc <hal_i2c_write+0x18>)
 23fdfac:	4403      	add	r3, r0
 23fdfae:	681b      	ldr	r3, [r3, #0]
 23fdfb0:	6a1b      	ldr	r3, [r3, #32]
 23fdfb2:	9302      	str	r3, [sp, #8]
 23fdfb4:	bd09      	pop	{r0, r3, pc}
 23fdfb6:	0000      	.short	0x0000
 23fdfb8:	1007adac 	.word	0x1007adac
 23fdfbc:	00000010 	.word	0x00000010

023fdfc0 <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
 23fdfc0:	b509      	push	{r0, r3, lr}
 23fdfc2:	4804      	ldr	r0, [pc, #16]	; (23fdfd4 <hal_i2c_available+0x14>)
 23fdfc4:	6800      	ldr	r0, [r0, #0]
 23fdfc6:	4b04      	ldr	r3, [pc, #16]	; (23fdfd8 <hal_i2c_available+0x18>)
 23fdfc8:	4403      	add	r3, r0
 23fdfca:	681b      	ldr	r3, [r3, #0]
 23fdfcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 23fdfce:	9302      	str	r3, [sp, #8]
 23fdfd0:	bd09      	pop	{r0, r3, pc}
 23fdfd2:	0000      	.short	0x0000
 23fdfd4:	1007adac 	.word	0x1007adac
 23fdfd8:	00000010 	.word	0x00000010

023fdfdc <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
 23fdfdc:	b509      	push	{r0, r3, lr}
 23fdfde:	4804      	ldr	r0, [pc, #16]	; (23fdff0 <hal_i2c_read+0x14>)
 23fdfe0:	6800      	ldr	r0, [r0, #0]
 23fdfe2:	4b04      	ldr	r3, [pc, #16]	; (23fdff4 <hal_i2c_read+0x18>)
 23fdfe4:	4403      	add	r3, r0
 23fdfe6:	681b      	ldr	r3, [r3, #0]
 23fdfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fdfea:	9302      	str	r3, [sp, #8]
 23fdfec:	bd09      	pop	{r0, r3, pc}
 23fdfee:	0000      	.short	0x0000
 23fdff0:	1007adac 	.word	0x1007adac
 23fdff4:	00000010 	.word	0x00000010

023fdff8 <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
 23fdff8:	b509      	push	{r0, r3, lr}
 23fdffa:	4804      	ldr	r0, [pc, #16]	; (23fe00c <hal_i2c_peek+0x14>)
 23fdffc:	6800      	ldr	r0, [r0, #0]
 23fdffe:	4b04      	ldr	r3, [pc, #16]	; (23fe010 <hal_i2c_peek+0x18>)
 23fe000:	4403      	add	r3, r0
 23fe002:	681b      	ldr	r3, [r3, #0]
 23fe004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe006:	9302      	str	r3, [sp, #8]
 23fe008:	bd09      	pop	{r0, r3, pc}
 23fe00a:	0000      	.short	0x0000
 23fe00c:	1007adac 	.word	0x1007adac
 23fe010:	00000010 	.word	0x00000010

023fe014 <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
 23fe014:	b509      	push	{r0, r3, lr}
 23fe016:	4804      	ldr	r0, [pc, #16]	; (23fe028 <hal_i2c_flush+0x14>)
 23fe018:	6800      	ldr	r0, [r0, #0]
 23fe01a:	4b04      	ldr	r3, [pc, #16]	; (23fe02c <hal_i2c_flush+0x18>)
 23fe01c:	4403      	add	r3, r0
 23fe01e:	681b      	ldr	r3, [r3, #0]
 23fe020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe022:	9302      	str	r3, [sp, #8]
 23fe024:	bd09      	pop	{r0, r3, pc}
 23fe026:	0000      	.short	0x0000
 23fe028:	1007adac 	.word	0x1007adac
 23fe02c:	00000010 	.word	0x00000010

023fe030 <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
 23fe030:	b509      	push	{r0, r3, lr}
 23fe032:	4804      	ldr	r0, [pc, #16]	; (23fe044 <hal_i2c_is_enabled+0x14>)
 23fe034:	6800      	ldr	r0, [r0, #0]
 23fe036:	4b04      	ldr	r3, [pc, #16]	; (23fe048 <hal_i2c_is_enabled+0x18>)
 23fe038:	4403      	add	r3, r0
 23fe03a:	681b      	ldr	r3, [r3, #0]
 23fe03c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe03e:	9302      	str	r3, [sp, #8]
 23fe040:	bd09      	pop	{r0, r3, pc}
 23fe042:	0000      	.short	0x0000
 23fe044:	1007adac 	.word	0x1007adac
 23fe048:	00000010 	.word	0x00000010

023fe04c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
 23fe04c:	b509      	push	{r0, r3, lr}
 23fe04e:	4804      	ldr	r0, [pc, #16]	; (23fe060 <hal_i2c_init+0x14>)
 23fe050:	6800      	ldr	r0, [r0, #0]
 23fe052:	4b04      	ldr	r3, [pc, #16]	; (23fe064 <hal_i2c_init+0x18>)
 23fe054:	4403      	add	r3, r0
 23fe056:	681b      	ldr	r3, [r3, #0]
 23fe058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe05a:	9302      	str	r3, [sp, #8]
 23fe05c:	bd09      	pop	{r0, r3, pc}
 23fe05e:	0000      	.short	0x0000
 23fe060:	1007adac 	.word	0x1007adac
 23fe064:	00000010 	.word	0x00000010

023fe068 <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, int(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
 23fe068:	b509      	push	{r0, r3, lr}
 23fe06a:	4804      	ldr	r0, [pc, #16]	; (23fe07c <hal_i2c_request_ex+0x14>)
 23fe06c:	6800      	ldr	r0, [r0, #0]
 23fe06e:	4b04      	ldr	r3, [pc, #16]	; (23fe080 <hal_i2c_request_ex+0x18>)
 23fe070:	4403      	add	r3, r0
 23fe072:	681b      	ldr	r3, [r3, #0]
 23fe074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fe076:	9302      	str	r3, [sp, #8]
 23fe078:	bd09      	pop	{r0, r3, pc}
 23fe07a:	0000      	.short	0x0000
 23fe07c:	1007adac 	.word	0x1007adac
 23fe080:	00000010 	.word	0x00000010

023fe084 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
 23fe084:	b509      	push	{r0, r3, lr}
 23fe086:	4804      	ldr	r0, [pc, #16]	; (23fe098 <inet_inet_ntop+0x14>)
 23fe088:	6800      	ldr	r0, [r0, #0]
 23fe08a:	4b04      	ldr	r3, [pc, #16]	; (23fe09c <inet_inet_ntop+0x18>)
 23fe08c:	4403      	add	r3, r0
 23fe08e:	681b      	ldr	r3, [r3, #0]
 23fe090:	695b      	ldr	r3, [r3, #20]
 23fe092:	9302      	str	r3, [sp, #8]
 23fe094:	bd09      	pop	{r0, r3, pc}
 23fe096:	0000      	.short	0x0000
 23fe098:	1007adac 	.word	0x1007adac
 23fe09c:	0000004c 	.word	0x0000004c

023fe0a0 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
 23fe0a0:	b509      	push	{r0, r3, lr}
 23fe0a2:	4804      	ldr	r0, [pc, #16]	; (23fe0b4 <netdb_freeaddrinfo+0x14>)
 23fe0a4:	6800      	ldr	r0, [r0, #0]
 23fe0a6:	4b04      	ldr	r3, [pc, #16]	; (23fe0b8 <netdb_freeaddrinfo+0x18>)
 23fe0a8:	4403      	add	r3, r0
 23fe0aa:	681b      	ldr	r3, [r3, #0]
 23fe0ac:	689b      	ldr	r3, [r3, #8]
 23fe0ae:	9302      	str	r3, [sp, #8]
 23fe0b0:	bd09      	pop	{r0, r3, pc}
 23fe0b2:	0000      	.short	0x0000
 23fe0b4:	1007adac 	.word	0x1007adac
 23fe0b8:	00000050 	.word	0x00000050

023fe0bc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
 23fe0bc:	b509      	push	{r0, r3, lr}
 23fe0be:	4804      	ldr	r0, [pc, #16]	; (23fe0d0 <netdb_getaddrinfo+0x14>)
 23fe0c0:	6800      	ldr	r0, [r0, #0]
 23fe0c2:	4b04      	ldr	r3, [pc, #16]	; (23fe0d4 <netdb_getaddrinfo+0x18>)
 23fe0c4:	4403      	add	r3, r0
 23fe0c6:	681b      	ldr	r3, [r3, #0]
 23fe0c8:	68db      	ldr	r3, [r3, #12]
 23fe0ca:	9302      	str	r3, [sp, #8]
 23fe0cc:	bd09      	pop	{r0, r3, pc}
 23fe0ce:	0000      	.short	0x0000
 23fe0d0:	1007adac 	.word	0x1007adac
 23fe0d4:	00000050 	.word	0x00000050

023fe0d8 <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
 23fe0d8:	b509      	push	{r0, r3, lr}
 23fe0da:	4804      	ldr	r0, [pc, #16]	; (23fe0ec <hal_spi_init+0x14>)
 23fe0dc:	6800      	ldr	r0, [r0, #0]
 23fe0de:	4b04      	ldr	r3, [pc, #16]	; (23fe0f0 <hal_spi_init+0x18>)
 23fe0e0:	4403      	add	r3, r0
 23fe0e2:	681b      	ldr	r3, [r3, #0]
 23fe0e4:	69db      	ldr	r3, [r3, #28]
 23fe0e6:	9302      	str	r3, [sp, #8]
 23fe0e8:	bd09      	pop	{r0, r3, pc}
 23fe0ea:	0000      	.short	0x0000
 23fe0ec:	1007adac 	.word	0x1007adac
 23fe0f0:	00000018 	.word	0x00000018

023fe0f4 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
 23fe0f4:	b509      	push	{r0, r3, lr}
 23fe0f6:	4804      	ldr	r0, [pc, #16]	; (23fe108 <hal_spi_is_enabled+0x14>)
 23fe0f8:	6800      	ldr	r0, [r0, #0]
 23fe0fa:	4b04      	ldr	r3, [pc, #16]	; (23fe10c <hal_spi_is_enabled+0x18>)
 23fe0fc:	4403      	add	r3, r0
 23fe0fe:	681b      	ldr	r3, [r3, #0]
 23fe100:	6a1b      	ldr	r3, [r3, #32]
 23fe102:	9302      	str	r3, [sp, #8]
 23fe104:	bd09      	pop	{r0, r3, pc}
 23fe106:	0000      	.short	0x0000
 23fe108:	1007adac 	.word	0x1007adac
 23fe10c:	00000018 	.word	0x00000018

023fe110 <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
 23fe110:	b509      	push	{r0, r3, lr}
 23fe112:	4804      	ldr	r0, [pc, #16]	; (23fe124 <hal_usart_write+0x14>)
 23fe114:	6800      	ldr	r0, [r0, #0]
 23fe116:	4b04      	ldr	r3, [pc, #16]	; (23fe128 <hal_usart_write+0x18>)
 23fe118:	4403      	add	r3, r0
 23fe11a:	681b      	ldr	r3, [r3, #0]
 23fe11c:	68db      	ldr	r3, [r3, #12]
 23fe11e:	9302      	str	r3, [sp, #8]
 23fe120:	bd09      	pop	{r0, r3, pc}
 23fe122:	0000      	.short	0x0000
 23fe124:	1007adac 	.word	0x1007adac
 23fe128:	00000024 	.word	0x00000024

023fe12c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
 23fe12c:	b509      	push	{r0, r3, lr}
 23fe12e:	4804      	ldr	r0, [pc, #16]	; (23fe140 <hal_usart_available+0x14>)
 23fe130:	6800      	ldr	r0, [r0, #0]
 23fe132:	4b04      	ldr	r3, [pc, #16]	; (23fe144 <hal_usart_available+0x18>)
 23fe134:	4403      	add	r3, r0
 23fe136:	681b      	ldr	r3, [r3, #0]
 23fe138:	691b      	ldr	r3, [r3, #16]
 23fe13a:	9302      	str	r3, [sp, #8]
 23fe13c:	bd09      	pop	{r0, r3, pc}
 23fe13e:	0000      	.short	0x0000
 23fe140:	1007adac 	.word	0x1007adac
 23fe144:	00000024 	.word	0x00000024

023fe148 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
 23fe148:	b509      	push	{r0, r3, lr}
 23fe14a:	4804      	ldr	r0, [pc, #16]	; (23fe15c <hal_usart_read+0x14>)
 23fe14c:	6800      	ldr	r0, [r0, #0]
 23fe14e:	4b04      	ldr	r3, [pc, #16]	; (23fe160 <hal_usart_read+0x18>)
 23fe150:	4403      	add	r3, r0
 23fe152:	681b      	ldr	r3, [r3, #0]
 23fe154:	695b      	ldr	r3, [r3, #20]
 23fe156:	9302      	str	r3, [sp, #8]
 23fe158:	bd09      	pop	{r0, r3, pc}
 23fe15a:	0000      	.short	0x0000
 23fe15c:	1007adac 	.word	0x1007adac
 23fe160:	00000024 	.word	0x00000024

023fe164 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
 23fe164:	b509      	push	{r0, r3, lr}
 23fe166:	4804      	ldr	r0, [pc, #16]	; (23fe178 <hal_usart_peek+0x14>)
 23fe168:	6800      	ldr	r0, [r0, #0]
 23fe16a:	4b04      	ldr	r3, [pc, #16]	; (23fe17c <hal_usart_peek+0x18>)
 23fe16c:	4403      	add	r3, r0
 23fe16e:	681b      	ldr	r3, [r3, #0]
 23fe170:	699b      	ldr	r3, [r3, #24]
 23fe172:	9302      	str	r3, [sp, #8]
 23fe174:	bd09      	pop	{r0, r3, pc}
 23fe176:	0000      	.short	0x0000
 23fe178:	1007adac 	.word	0x1007adac
 23fe17c:	00000024 	.word	0x00000024

023fe180 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
 23fe180:	b509      	push	{r0, r3, lr}
 23fe182:	4804      	ldr	r0, [pc, #16]	; (23fe194 <hal_usart_flush+0x14>)
 23fe184:	6800      	ldr	r0, [r0, #0]
 23fe186:	4b04      	ldr	r3, [pc, #16]	; (23fe198 <hal_usart_flush+0x18>)
 23fe188:	4403      	add	r3, r0
 23fe18a:	681b      	ldr	r3, [r3, #0]
 23fe18c:	69db      	ldr	r3, [r3, #28]
 23fe18e:	9302      	str	r3, [sp, #8]
 23fe190:	bd09      	pop	{r0, r3, pc}
 23fe192:	0000      	.short	0x0000
 23fe194:	1007adac 	.word	0x1007adac
 23fe198:	00000024 	.word	0x00000024

023fe19c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
 23fe19c:	b509      	push	{r0, r3, lr}
 23fe19e:	4804      	ldr	r0, [pc, #16]	; (23fe1b0 <hal_usart_is_enabled+0x14>)
 23fe1a0:	6800      	ldr	r0, [r0, #0]
 23fe1a2:	4b04      	ldr	r3, [pc, #16]	; (23fe1b4 <hal_usart_is_enabled+0x18>)
 23fe1a4:	4403      	add	r3, r0
 23fe1a6:	681b      	ldr	r3, [r3, #0]
 23fe1a8:	6a1b      	ldr	r3, [r3, #32]
 23fe1aa:	9302      	str	r3, [sp, #8]
 23fe1ac:	bd09      	pop	{r0, r3, pc}
 23fe1ae:	0000      	.short	0x0000
 23fe1b0:	1007adac 	.word	0x1007adac
 23fe1b4:	00000024 	.word	0x00000024

023fe1b8 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
 23fe1b8:	b509      	push	{r0, r3, lr}
 23fe1ba:	4804      	ldr	r0, [pc, #16]	; (23fe1cc <hal_usart_available_data_for_write+0x14>)
 23fe1bc:	6800      	ldr	r0, [r0, #0]
 23fe1be:	4b04      	ldr	r3, [pc, #16]	; (23fe1d0 <hal_usart_available_data_for_write+0x18>)
 23fe1c0:	4403      	add	r3, r0
 23fe1c2:	681b      	ldr	r3, [r3, #0]
 23fe1c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 23fe1c6:	9302      	str	r3, [sp, #8]
 23fe1c8:	bd09      	pop	{r0, r3, pc}
 23fe1ca:	0000      	.short	0x0000
 23fe1cc:	1007adac 	.word	0x1007adac
 23fe1d0:	00000024 	.word	0x00000024

023fe1d4 <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
 23fe1d4:	b509      	push	{r0, r3, lr}
 23fe1d6:	4804      	ldr	r0, [pc, #16]	; (23fe1e8 <hal_usart_init_ex+0x14>)
 23fe1d8:	6800      	ldr	r0, [r0, #0]
 23fe1da:	4b04      	ldr	r3, [pc, #16]	; (23fe1ec <hal_usart_init_ex+0x18>)
 23fe1dc:	4403      	add	r3, r0
 23fe1de:	681b      	ldr	r3, [r3, #0]
 23fe1e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe1e2:	9302      	str	r3, [sp, #8]
 23fe1e4:	bd09      	pop	{r0, r3, pc}
 23fe1e6:	0000      	.short	0x0000
 23fe1e8:	1007adac 	.word	0x1007adac
 23fe1ec:	00000024 	.word	0x00000024

023fe1f0 <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 23fe1f0:	b509      	push	{r0, r3, lr}
 23fe1f2:	4804      	ldr	r0, [pc, #16]	; (23fe204 <HAL_USB_USART_Init+0x14>)
 23fe1f4:	6800      	ldr	r0, [r0, #0]
 23fe1f6:	4b04      	ldr	r3, [pc, #16]	; (23fe208 <HAL_USB_USART_Init+0x18>)
 23fe1f8:	4403      	add	r3, r0
 23fe1fa:	681b      	ldr	r3, [r3, #0]
 23fe1fc:	681b      	ldr	r3, [r3, #0]
 23fe1fe:	9302      	str	r3, [sp, #8]
 23fe200:	bd09      	pop	{r0, r3, pc}
 23fe202:	0000      	.short	0x0000
 23fe204:	1007adac 	.word	0x1007adac
 23fe208:	00000034 	.word	0x00000034

023fe20c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 23fe20c:	b509      	push	{r0, r3, lr}
 23fe20e:	4804      	ldr	r0, [pc, #16]	; (23fe220 <HAL_USB_USART_Available_Data+0x14>)
 23fe210:	6800      	ldr	r0, [r0, #0]
 23fe212:	4b04      	ldr	r3, [pc, #16]	; (23fe224 <HAL_USB_USART_Available_Data+0x18>)
 23fe214:	4403      	add	r3, r0
 23fe216:	681b      	ldr	r3, [r3, #0]
 23fe218:	691b      	ldr	r3, [r3, #16]
 23fe21a:	9302      	str	r3, [sp, #8]
 23fe21c:	bd09      	pop	{r0, r3, pc}
 23fe21e:	0000      	.short	0x0000
 23fe220:	1007adac 	.word	0x1007adac
 23fe224:	00000034 	.word	0x00000034

023fe228 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 23fe228:	b509      	push	{r0, r3, lr}
 23fe22a:	4804      	ldr	r0, [pc, #16]	; (23fe23c <HAL_USB_USART_Available_Data_For_Write+0x14>)
 23fe22c:	6800      	ldr	r0, [r0, #0]
 23fe22e:	4b04      	ldr	r3, [pc, #16]	; (23fe240 <HAL_USB_USART_Available_Data_For_Write+0x18>)
 23fe230:	4403      	add	r3, r0
 23fe232:	681b      	ldr	r3, [r3, #0]
 23fe234:	695b      	ldr	r3, [r3, #20]
 23fe236:	9302      	str	r3, [sp, #8]
 23fe238:	bd09      	pop	{r0, r3, pc}
 23fe23a:	0000      	.short	0x0000
 23fe23c:	1007adac 	.word	0x1007adac
 23fe240:	00000034 	.word	0x00000034

023fe244 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe244:	b509      	push	{r0, r3, lr}
 23fe246:	4804      	ldr	r0, [pc, #16]	; (23fe258 <HAL_USB_USART_Receive_Data+0x14>)
 23fe248:	6800      	ldr	r0, [r0, #0]
 23fe24a:	4b04      	ldr	r3, [pc, #16]	; (23fe25c <HAL_USB_USART_Receive_Data+0x18>)
 23fe24c:	4403      	add	r3, r0
 23fe24e:	681b      	ldr	r3, [r3, #0]
 23fe250:	699b      	ldr	r3, [r3, #24]
 23fe252:	9302      	str	r3, [sp, #8]
 23fe254:	bd09      	pop	{r0, r3, pc}
 23fe256:	0000      	.short	0x0000
 23fe258:	1007adac 	.word	0x1007adac
 23fe25c:	00000034 	.word	0x00000034

023fe260 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 23fe260:	b509      	push	{r0, r3, lr}
 23fe262:	4804      	ldr	r0, [pc, #16]	; (23fe274 <HAL_USB_USART_Send_Data+0x14>)
 23fe264:	6800      	ldr	r0, [r0, #0]
 23fe266:	4b04      	ldr	r3, [pc, #16]	; (23fe278 <HAL_USB_USART_Send_Data+0x18>)
 23fe268:	4403      	add	r3, r0
 23fe26a:	681b      	ldr	r3, [r3, #0]
 23fe26c:	69db      	ldr	r3, [r3, #28]
 23fe26e:	9302      	str	r3, [sp, #8]
 23fe270:	bd09      	pop	{r0, r3, pc}
 23fe272:	0000      	.short	0x0000
 23fe274:	1007adac 	.word	0x1007adac
 23fe278:	00000034 	.word	0x00000034

023fe27c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 23fe27c:	b509      	push	{r0, r3, lr}
 23fe27e:	4804      	ldr	r0, [pc, #16]	; (23fe290 <HAL_USB_USART_Flush_Data+0x14>)
 23fe280:	6800      	ldr	r0, [r0, #0]
 23fe282:	4b04      	ldr	r3, [pc, #16]	; (23fe294 <HAL_USB_USART_Flush_Data+0x18>)
 23fe284:	4403      	add	r3, r0
 23fe286:	681b      	ldr	r3, [r3, #0]
 23fe288:	6a1b      	ldr	r3, [r3, #32]
 23fe28a:	9302      	str	r3, [sp, #8]
 23fe28c:	bd09      	pop	{r0, r3, pc}
 23fe28e:	0000      	.short	0x0000
 23fe290:	1007adac 	.word	0x1007adac
 23fe294:	00000034 	.word	0x00000034

023fe298 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 23fe298:	b509      	push	{r0, r3, lr}
 23fe29a:	4804      	ldr	r0, [pc, #16]	; (23fe2ac <log_message+0x14>)
 23fe29c:	6800      	ldr	r0, [r0, #0]
 23fe29e:	4b04      	ldr	r3, [pc, #16]	; (23fe2b0 <log_message+0x18>)
 23fe2a0:	4403      	add	r3, r0
 23fe2a2:	681b      	ldr	r3, [r3, #0]
 23fe2a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 23fe2a6:	9302      	str	r3, [sp, #8]
 23fe2a8:	bd09      	pop	{r0, r3, pc}
 23fe2aa:	0000      	.short	0x0000
 23fe2ac:	1007adac 	.word	0x1007adac
 23fe2b0:	00000048 	.word	0x00000048

023fe2b4 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 23fe2b4:	b509      	push	{r0, r3, lr}
 23fe2b6:	4804      	ldr	r0, [pc, #16]	; (23fe2c8 <set_system_mode+0x14>)
 23fe2b8:	6800      	ldr	r0, [r0, #0]
 23fe2ba:	4b04      	ldr	r3, [pc, #16]	; (23fe2cc <set_system_mode+0x18>)
 23fe2bc:	4403      	add	r3, r0
 23fe2be:	681b      	ldr	r3, [r3, #0]
 23fe2c0:	685b      	ldr	r3, [r3, #4]
 23fe2c2:	9302      	str	r3, [sp, #8]
 23fe2c4:	bd09      	pop	{r0, r3, pc}
 23fe2c6:	0000      	.short	0x0000
 23fe2c8:	1007adac 	.word	0x1007adac
 23fe2cc:	00000008 	.word	0x00000008

023fe2d0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 23fe2d0:	b509      	push	{r0, r3, lr}
 23fe2d2:	4804      	ldr	r0, [pc, #16]	; (23fe2e4 <system_delay_ms+0x14>)
 23fe2d4:	6800      	ldr	r0, [r0, #0]
 23fe2d6:	4b04      	ldr	r3, [pc, #16]	; (23fe2e8 <system_delay_ms+0x18>)
 23fe2d8:	4403      	add	r3, r0
 23fe2da:	681b      	ldr	r3, [r3, #0]
 23fe2dc:	695b      	ldr	r3, [r3, #20]
 23fe2de:	9302      	str	r3, [sp, #8]
 23fe2e0:	bd09      	pop	{r0, r3, pc}
 23fe2e2:	0000      	.short	0x0000
 23fe2e4:	1007adac 	.word	0x1007adac
 23fe2e8:	00000008 	.word	0x00000008

023fe2ec <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 23fe2ec:	b509      	push	{r0, r3, lr}
 23fe2ee:	4804      	ldr	r0, [pc, #16]	; (23fe300 <system_thread_set_state+0x14>)
 23fe2f0:	6800      	ldr	r0, [r0, #0]
 23fe2f2:	4b04      	ldr	r3, [pc, #16]	; (23fe304 <system_thread_set_state+0x18>)
 23fe2f4:	4403      	add	r3, r0
 23fe2f6:	681b      	ldr	r3, [r3, #0]
 23fe2f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe2fa:	9302      	str	r3, [sp, #8]
 23fe2fc:	bd09      	pop	{r0, r3, pc}
 23fe2fe:	0000      	.short	0x0000
 23fe300:	1007adac 	.word	0x1007adac
 23fe304:	00000008 	.word	0x00000008

023fe308 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 23fe308:	b509      	push	{r0, r3, lr}
 23fe30a:	4804      	ldr	r0, [pc, #16]	; (23fe31c <application_thread_current+0x14>)
 23fe30c:	6800      	ldr	r0, [r0, #0]
 23fe30e:	4b04      	ldr	r3, [pc, #16]	; (23fe320 <application_thread_current+0x18>)
 23fe310:	4403      	add	r3, r0
 23fe312:	681b      	ldr	r3, [r3, #0]
 23fe314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 23fe316:	9302      	str	r3, [sp, #8]
 23fe318:	bd09      	pop	{r0, r3, pc}
 23fe31a:	0000      	.short	0x0000
 23fe31c:	1007adac 	.word	0x1007adac
 23fe320:	00000008 	.word	0x00000008

023fe324 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 23fe324:	b509      	push	{r0, r3, lr}
 23fe326:	4804      	ldr	r0, [pc, #16]	; (23fe338 <application_thread_invoke+0x14>)
 23fe328:	6800      	ldr	r0, [r0, #0]
 23fe32a:	4b04      	ldr	r3, [pc, #16]	; (23fe33c <application_thread_invoke+0x18>)
 23fe32c:	4403      	add	r3, r0
 23fe32e:	681b      	ldr	r3, [r3, #0]
 23fe330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 23fe332:	9302      	str	r3, [sp, #8]
 23fe334:	bd09      	pop	{r0, r3, pc}
 23fe336:	0000      	.short	0x0000
 23fe338:	1007adac 	.word	0x1007adac
 23fe33c:	00000008 	.word	0x00000008

023fe340 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 23fe340:	b509      	push	{r0, r3, lr}
 23fe342:	4804      	ldr	r0, [pc, #16]	; (23fe354 <system_ctrl_set_app_request_handler+0x14>)
 23fe344:	6800      	ldr	r0, [r0, #0]
 23fe346:	4b04      	ldr	r3, [pc, #16]	; (23fe358 <system_ctrl_set_app_request_handler+0x18>)
 23fe348:	4403      	add	r3, r0
 23fe34a:	681b      	ldr	r3, [r3, #0]
 23fe34c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 23fe350:	9302      	str	r3, [sp, #8]
 23fe352:	bd09      	pop	{r0, r3, pc}
 23fe354:	1007adac 	.word	0x1007adac
 23fe358:	00000008 	.word	0x00000008

023fe35c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 23fe35c:	b509      	push	{r0, r3, lr}
 23fe35e:	4804      	ldr	r0, [pc, #16]	; (23fe370 <system_ctrl_set_result+0x14>)
 23fe360:	6800      	ldr	r0, [r0, #0]
 23fe362:	4b04      	ldr	r3, [pc, #16]	; (23fe374 <system_ctrl_set_result+0x18>)
 23fe364:	4403      	add	r3, r0
 23fe366:	681b      	ldr	r3, [r3, #0]
 23fe368:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 23fe36c:	9302      	str	r3, [sp, #8]
 23fe36e:	bd09      	pop	{r0, r3, pc}
 23fe370:	1007adac 	.word	0x1007adac
 23fe374:	00000008 	.word	0x00000008

023fe378 <system_pool_alloc>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
 23fe378:	b509      	push	{r0, r3, lr}
 23fe37a:	4804      	ldr	r0, [pc, #16]	; (23fe38c <system_pool_alloc+0x14>)
 23fe37c:	6800      	ldr	r0, [r0, #0]
 23fe37e:	4b04      	ldr	r3, [pc, #16]	; (23fe390 <system_pool_alloc+0x18>)
 23fe380:	4403      	add	r3, r0
 23fe382:	681b      	ldr	r3, [r3, #0]
 23fe384:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 23fe388:	9302      	str	r3, [sp, #8]
 23fe38a:	bd09      	pop	{r0, r3, pc}
 23fe38c:	1007adac 	.word	0x1007adac
 23fe390:	00000008 	.word	0x00000008

023fe394 <system_pool_free>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
 23fe394:	b509      	push	{r0, r3, lr}
 23fe396:	4804      	ldr	r0, [pc, #16]	; (23fe3a8 <system_pool_free+0x14>)
 23fe398:	6800      	ldr	r0, [r0, #0]
 23fe39a:	4b04      	ldr	r3, [pc, #16]	; (23fe3ac <system_pool_free+0x18>)
 23fe39c:	4403      	add	r3, r0
 23fe39e:	681b      	ldr	r3, [r3, #0]
 23fe3a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 23fe3a4:	9302      	str	r3, [sp, #8]
 23fe3a6:	bd09      	pop	{r0, r3, pc}
 23fe3a8:	1007adac 	.word	0x1007adac
 23fe3ac:	00000008 	.word	0x00000008

023fe3b0 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
 23fe3b0:	b509      	push	{r0, r3, lr}
 23fe3b2:	4804      	ldr	r0, [pc, #16]	; (23fe3c4 <system_sleep_ext+0x14>)
 23fe3b4:	6800      	ldr	r0, [r0, #0]
 23fe3b6:	4b04      	ldr	r3, [pc, #16]	; (23fe3c8 <system_sleep_ext+0x18>)
 23fe3b8:	4403      	add	r3, r0
 23fe3ba:	681b      	ldr	r3, [r3, #0]
 23fe3bc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 23fe3c0:	9302      	str	r3, [sp, #8]
 23fe3c2:	bd09      	pop	{r0, r3, pc}
 23fe3c4:	1007adac 	.word	0x1007adac
 23fe3c8:	00000008 	.word	0x00000008

023fe3cc <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
 23fe3cc:	b509      	push	{r0, r3, lr}
 23fe3ce:	4804      	ldr	r0, [pc, #16]	; (23fe3e0 <spark_process+0x14>)
 23fe3d0:	6800      	ldr	r0, [r0, #0]
 23fe3d2:	4b04      	ldr	r3, [pc, #16]	; (23fe3e4 <spark_process+0x18>)
 23fe3d4:	4403      	add	r3, r0
 23fe3d6:	681b      	ldr	r3, [r3, #0]
 23fe3d8:	689b      	ldr	r3, [r3, #8]
 23fe3da:	9302      	str	r3, [sp, #8]
 23fe3dc:	bd09      	pop	{r0, r3, pc}
 23fe3de:	0000      	.short	0x0000
 23fe3e0:	1007adac 	.word	0x1007adac
 23fe3e4:	0000002c 	.word	0x0000002c

023fe3e8 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 23fe3e8:	b509      	push	{r0, r3, lr}
 23fe3ea:	4804      	ldr	r0, [pc, #16]	; (23fe3fc <spark_cloud_flag_connect+0x14>)
 23fe3ec:	6800      	ldr	r0, [r0, #0]
 23fe3ee:	4b04      	ldr	r3, [pc, #16]	; (23fe400 <spark_cloud_flag_connect+0x18>)
 23fe3f0:	4403      	add	r3, r0
 23fe3f2:	681b      	ldr	r3, [r3, #0]
 23fe3f4:	68db      	ldr	r3, [r3, #12]
 23fe3f6:	9302      	str	r3, [sp, #8]
 23fe3f8:	bd09      	pop	{r0, r3, pc}
 23fe3fa:	0000      	.short	0x0000
 23fe3fc:	1007adac 	.word	0x1007adac
 23fe400:	0000002c 	.word	0x0000002c

023fe404 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 23fe404:	b509      	push	{r0, r3, lr}
 23fe406:	4804      	ldr	r0, [pc, #16]	; (23fe418 <spark_cloud_flag_connected+0x14>)
 23fe408:	6800      	ldr	r0, [r0, #0]
 23fe40a:	4b04      	ldr	r3, [pc, #16]	; (23fe41c <spark_cloud_flag_connected+0x18>)
 23fe40c:	4403      	add	r3, r0
 23fe40e:	681b      	ldr	r3, [r3, #0]
 23fe410:	695b      	ldr	r3, [r3, #20]
 23fe412:	9302      	str	r3, [sp, #8]
 23fe414:	bd09      	pop	{r0, r3, pc}
 23fe416:	0000      	.short	0x0000
 23fe418:	1007adac 	.word	0x1007adac
 23fe41c:	0000002c 	.word	0x0000002c

023fe420 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 23fe420:	b509      	push	{r0, r3, lr}
 23fe422:	4804      	ldr	r0, [pc, #16]	; (23fe434 <spark_send_event+0x14>)
 23fe424:	6800      	ldr	r0, [r0, #0]
 23fe426:	4b04      	ldr	r3, [pc, #16]	; (23fe438 <spark_send_event+0x18>)
 23fe428:	4403      	add	r3, r0
 23fe42a:	681b      	ldr	r3, [r3, #0]
 23fe42c:	6a1b      	ldr	r3, [r3, #32]
 23fe42e:	9302      	str	r3, [sp, #8]
 23fe430:	bd09      	pop	{r0, r3, pc}
 23fe432:	0000      	.short	0x0000
 23fe434:	1007adac 	.word	0x1007adac
 23fe438:	0000002c 	.word	0x0000002c

023fe43c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 23fe43c:	b509      	push	{r0, r3, lr}
 23fe43e:	4804      	ldr	r0, [pc, #16]	; (23fe450 <spark_set_random_seed_from_cloud_handler+0x14>)
 23fe440:	6800      	ldr	r0, [r0, #0]
 23fe442:	4b04      	ldr	r3, [pc, #16]	; (23fe454 <spark_set_random_seed_from_cloud_handler+0x18>)
 23fe444:	4403      	add	r3, r0
 23fe446:	681b      	ldr	r3, [r3, #0]
 23fe448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 23fe44a:	9302      	str	r3, [sp, #8]
 23fe44c:	bd09      	pop	{r0, r3, pc}
 23fe44e:	0000      	.short	0x0000
 23fe450:	1007adac 	.word	0x1007adac
 23fe454:	0000002c 	.word	0x0000002c

023fe458 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
 23fe458:	b509      	push	{r0, r3, lr}
 23fe45a:	4804      	ldr	r0, [pc, #16]	; (23fe46c <spark_cloud_disconnect+0x14>)
 23fe45c:	6800      	ldr	r0, [r0, #0]
 23fe45e:	4b04      	ldr	r3, [pc, #16]	; (23fe470 <spark_cloud_disconnect+0x18>)
 23fe460:	4403      	add	r3, r0
 23fe462:	681b      	ldr	r3, [r3, #0]
 23fe464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe466:	9302      	str	r3, [sp, #8]
 23fe468:	bd09      	pop	{r0, r3, pc}
 23fe46a:	0000      	.short	0x0000
 23fe46c:	1007adac 	.word	0x1007adac
 23fe470:	0000002c 	.word	0x0000002c

023fe474 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe474:	b509      	push	{r0, r3, lr}
 23fe476:	4804      	ldr	r0, [pc, #16]	; (23fe488 <network_connect+0x14>)
 23fe478:	6800      	ldr	r0, [r0, #0]
 23fe47a:	4b04      	ldr	r3, [pc, #16]	; (23fe48c <network_connect+0x18>)
 23fe47c:	4403      	add	r3, r0
 23fe47e:	681b      	ldr	r3, [r3, #0]
 23fe480:	685b      	ldr	r3, [r3, #4]
 23fe482:	9302      	str	r3, [sp, #8]
 23fe484:	bd09      	pop	{r0, r3, pc}
 23fe486:	0000      	.short	0x0000
 23fe488:	1007adac 	.word	0x1007adac
 23fe48c:	00000028 	.word	0x00000028

023fe490 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 23fe490:	b509      	push	{r0, r3, lr}
 23fe492:	4804      	ldr	r0, [pc, #16]	; (23fe4a4 <network_connecting+0x14>)
 23fe494:	6800      	ldr	r0, [r0, #0]
 23fe496:	4b04      	ldr	r3, [pc, #16]	; (23fe4a8 <network_connecting+0x18>)
 23fe498:	4403      	add	r3, r0
 23fe49a:	681b      	ldr	r3, [r3, #0]
 23fe49c:	689b      	ldr	r3, [r3, #8]
 23fe49e:	9302      	str	r3, [sp, #8]
 23fe4a0:	bd09      	pop	{r0, r3, pc}
 23fe4a2:	0000      	.short	0x0000
 23fe4a4:	1007adac 	.word	0x1007adac
 23fe4a8:	00000028 	.word	0x00000028

023fe4ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 23fe4ac:	b509      	push	{r0, r3, lr}
 23fe4ae:	4804      	ldr	r0, [pc, #16]	; (23fe4c0 <network_disconnect+0x14>)
 23fe4b0:	6800      	ldr	r0, [r0, #0]
 23fe4b2:	4b04      	ldr	r3, [pc, #16]	; (23fe4c4 <network_disconnect+0x18>)
 23fe4b4:	4403      	add	r3, r0
 23fe4b6:	681b      	ldr	r3, [r3, #0]
 23fe4b8:	68db      	ldr	r3, [r3, #12]
 23fe4ba:	9302      	str	r3, [sp, #8]
 23fe4bc:	bd09      	pop	{r0, r3, pc}
 23fe4be:	0000      	.short	0x0000
 23fe4c0:	1007adac 	.word	0x1007adac
 23fe4c4:	00000028 	.word	0x00000028

023fe4c8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 23fe4c8:	b509      	push	{r0, r3, lr}
 23fe4ca:	4804      	ldr	r0, [pc, #16]	; (23fe4dc <network_ready+0x14>)
 23fe4cc:	6800      	ldr	r0, [r0, #0]
 23fe4ce:	4b04      	ldr	r3, [pc, #16]	; (23fe4e0 <network_ready+0x18>)
 23fe4d0:	4403      	add	r3, r0
 23fe4d2:	681b      	ldr	r3, [r3, #0]
 23fe4d4:	691b      	ldr	r3, [r3, #16]
 23fe4d6:	9302      	str	r3, [sp, #8]
 23fe4d8:	bd09      	pop	{r0, r3, pc}
 23fe4da:	0000      	.short	0x0000
 23fe4dc:	1007adac 	.word	0x1007adac
 23fe4e0:	00000028 	.word	0x00000028

023fe4e4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe4e4:	b509      	push	{r0, r3, lr}
 23fe4e6:	4804      	ldr	r0, [pc, #16]	; (23fe4f8 <network_on+0x14>)
 23fe4e8:	6800      	ldr	r0, [r0, #0]
 23fe4ea:	4b04      	ldr	r3, [pc, #16]	; (23fe4fc <network_on+0x18>)
 23fe4ec:	4403      	add	r3, r0
 23fe4ee:	681b      	ldr	r3, [r3, #0]
 23fe4f0:	695b      	ldr	r3, [r3, #20]
 23fe4f2:	9302      	str	r3, [sp, #8]
 23fe4f4:	bd09      	pop	{r0, r3, pc}
 23fe4f6:	0000      	.short	0x0000
 23fe4f8:	1007adac 	.word	0x1007adac
 23fe4fc:	00000028 	.word	0x00000028

023fe500 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 23fe500:	b509      	push	{r0, r3, lr}
 23fe502:	4804      	ldr	r0, [pc, #16]	; (23fe514 <network_off+0x14>)
 23fe504:	6800      	ldr	r0, [r0, #0]
 23fe506:	4b04      	ldr	r3, [pc, #16]	; (23fe518 <network_off+0x18>)
 23fe508:	4403      	add	r3, r0
 23fe50a:	681b      	ldr	r3, [r3, #0]
 23fe50c:	699b      	ldr	r3, [r3, #24]
 23fe50e:	9302      	str	r3, [sp, #8]
 23fe510:	bd09      	pop	{r0, r3, pc}
 23fe512:	0000      	.short	0x0000
 23fe514:	1007adac 	.word	0x1007adac
 23fe518:	00000028 	.word	0x00000028

023fe51c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 23fe51c:	b509      	push	{r0, r3, lr}
 23fe51e:	4804      	ldr	r0, [pc, #16]	; (23fe530 <network_listen+0x14>)
 23fe520:	6800      	ldr	r0, [r0, #0]
 23fe522:	4b04      	ldr	r3, [pc, #16]	; (23fe534 <network_listen+0x18>)
 23fe524:	4403      	add	r3, r0
 23fe526:	681b      	ldr	r3, [r3, #0]
 23fe528:	69db      	ldr	r3, [r3, #28]
 23fe52a:	9302      	str	r3, [sp, #8]
 23fe52c:	bd09      	pop	{r0, r3, pc}
 23fe52e:	0000      	.short	0x0000
 23fe530:	1007adac 	.word	0x1007adac
 23fe534:	00000028 	.word	0x00000028

023fe538 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 23fe538:	b509      	push	{r0, r3, lr}
 23fe53a:	4804      	ldr	r0, [pc, #16]	; (23fe54c <network_listening+0x14>)
 23fe53c:	6800      	ldr	r0, [r0, #0]
 23fe53e:	4b04      	ldr	r3, [pc, #16]	; (23fe550 <network_listening+0x18>)
 23fe540:	4403      	add	r3, r0
 23fe542:	681b      	ldr	r3, [r3, #0]
 23fe544:	6a1b      	ldr	r3, [r3, #32]
 23fe546:	9302      	str	r3, [sp, #8]
 23fe548:	bd09      	pop	{r0, r3, pc}
 23fe54a:	0000      	.short	0x0000
 23fe54c:	1007adac 	.word	0x1007adac
 23fe550:	00000028 	.word	0x00000028

023fe554 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 23fe554:	b509      	push	{r0, r3, lr}
 23fe556:	4804      	ldr	r0, [pc, #16]	; (23fe568 <network_set_listen_timeout+0x14>)
 23fe558:	6800      	ldr	r0, [r0, #0]
 23fe55a:	4b04      	ldr	r3, [pc, #16]	; (23fe56c <network_set_listen_timeout+0x18>)
 23fe55c:	4403      	add	r3, r0
 23fe55e:	681b      	ldr	r3, [r3, #0]
 23fe560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe562:	9302      	str	r3, [sp, #8]
 23fe564:	bd09      	pop	{r0, r3, pc}
 23fe566:	0000      	.short	0x0000
 23fe568:	1007adac 	.word	0x1007adac
 23fe56c:	00000028 	.word	0x00000028

023fe570 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 23fe570:	b509      	push	{r0, r3, lr}
 23fe572:	4804      	ldr	r0, [pc, #16]	; (23fe584 <network_get_listen_timeout+0x14>)
 23fe574:	6800      	ldr	r0, [r0, #0]
 23fe576:	4b04      	ldr	r3, [pc, #16]	; (23fe588 <network_get_listen_timeout+0x18>)
 23fe578:	4403      	add	r3, r0
 23fe57a:	681b      	ldr	r3, [r3, #0]
 23fe57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 23fe57e:	9302      	str	r3, [sp, #8]
 23fe580:	bd09      	pop	{r0, r3, pc}
 23fe582:	0000      	.short	0x0000
 23fe584:	1007adac 	.word	0x1007adac
 23fe588:	00000028 	.word	0x00000028

023fe58c <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
 23fe58c:	b509      	push	{r0, r3, lr}
 23fe58e:	4804      	ldr	r0, [pc, #16]	; (23fe5a0 <network_is_on+0x14>)
 23fe590:	6800      	ldr	r0, [r0, #0]
 23fe592:	4b04      	ldr	r3, [pc, #16]	; (23fe5a4 <network_is_on+0x18>)
 23fe594:	4403      	add	r3, r0
 23fe596:	681b      	ldr	r3, [r3, #0]
 23fe598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe59a:	9302      	str	r3, [sp, #8]
 23fe59c:	bd09      	pop	{r0, r3, pc}
 23fe59e:	0000      	.short	0x0000
 23fe5a0:	1007adac 	.word	0x1007adac
 23fe5a4:	00000028 	.word	0x00000028

023fe5a8 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
 23fe5a8:	b509      	push	{r0, r3, lr}
 23fe5aa:	4804      	ldr	r0, [pc, #16]	; (23fe5bc <network_is_off+0x14>)
 23fe5ac:	6800      	ldr	r0, [r0, #0]
 23fe5ae:	4b04      	ldr	r3, [pc, #16]	; (23fe5c0 <network_is_off+0x18>)
 23fe5b0:	4403      	add	r3, r0
 23fe5b2:	681b      	ldr	r3, [r3, #0]
 23fe5b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe5b6:	9302      	str	r3, [sp, #8]
 23fe5b8:	bd09      	pop	{r0, r3, pc}
 23fe5ba:	0000      	.short	0x0000
 23fe5bc:	1007adac 	.word	0x1007adac
 23fe5c0:	00000028 	.word	0x00000028

023fe5c4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 23fe5c4:	b509      	push	{r0, r3, lr}
 23fe5c6:	4804      	ldr	r0, [pc, #16]	; (23fe5d8 <malloc+0x14>)
 23fe5c8:	6800      	ldr	r0, [r0, #0]
 23fe5ca:	4b04      	ldr	r3, [pc, #16]	; (23fe5dc <malloc+0x18>)
 23fe5cc:	4403      	add	r3, r0
 23fe5ce:	681b      	ldr	r3, [r3, #0]
 23fe5d0:	681b      	ldr	r3, [r3, #0]
 23fe5d2:	9302      	str	r3, [sp, #8]
 23fe5d4:	bd09      	pop	{r0, r3, pc}
 23fe5d6:	0000      	.short	0x0000
 23fe5d8:	1007adac 	.word	0x1007adac
 23fe5dc:	00000004 	.word	0x00000004

023fe5e0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 23fe5e0:	b509      	push	{r0, r3, lr}
 23fe5e2:	4804      	ldr	r0, [pc, #16]	; (23fe5f4 <free+0x14>)
 23fe5e4:	6800      	ldr	r0, [r0, #0]
 23fe5e6:	4b04      	ldr	r3, [pc, #16]	; (23fe5f8 <free+0x18>)
 23fe5e8:	4403      	add	r3, r0
 23fe5ea:	681b      	ldr	r3, [r3, #0]
 23fe5ec:	685b      	ldr	r3, [r3, #4]
 23fe5ee:	9302      	str	r3, [sp, #8]
 23fe5f0:	bd09      	pop	{r0, r3, pc}
 23fe5f2:	0000      	.short	0x0000
 23fe5f4:	1007adac 	.word	0x1007adac
 23fe5f8:	00000004 	.word	0x00000004

023fe5fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 23fe5fc:	b509      	push	{r0, r3, lr}
 23fe5fe:	4804      	ldr	r0, [pc, #16]	; (23fe610 <realloc+0x14>)
 23fe600:	6800      	ldr	r0, [r0, #0]
 23fe602:	4b04      	ldr	r3, [pc, #16]	; (23fe614 <realloc+0x18>)
 23fe604:	4403      	add	r3, r0
 23fe606:	681b      	ldr	r3, [r3, #0]
 23fe608:	689b      	ldr	r3, [r3, #8]
 23fe60a:	9302      	str	r3, [sp, #8]
 23fe60c:	bd09      	pop	{r0, r3, pc}
 23fe60e:	0000      	.short	0x0000
 23fe610:	1007adac 	.word	0x1007adac
 23fe614:	00000004 	.word	0x00000004

023fe618 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 23fe618:	b509      	push	{r0, r3, lr}
 23fe61a:	4804      	ldr	r0, [pc, #16]	; (23fe62c <abort+0x14>)
 23fe61c:	6800      	ldr	r0, [r0, #0]
 23fe61e:	4b04      	ldr	r3, [pc, #16]	; (23fe630 <abort+0x18>)
 23fe620:	4403      	add	r3, r0
 23fe622:	681b      	ldr	r3, [r3, #0]
 23fe624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 23fe626:	9302      	str	r3, [sp, #8]
 23fe628:	bd09      	pop	{r0, r3, pc}
 23fe62a:	0000      	.short	0x0000
 23fe62c:	1007adac 	.word	0x1007adac
 23fe630:	00000004 	.word	0x00000004

023fe634 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 23fe634:	b509      	push	{r0, r3, lr}
 23fe636:	4804      	ldr	r0, [pc, #16]	; (23fe648 <_malloc_r+0x14>)
 23fe638:	6800      	ldr	r0, [r0, #0]
 23fe63a:	4b04      	ldr	r3, [pc, #16]	; (23fe64c <_malloc_r+0x18>)
 23fe63c:	4403      	add	r3, r0
 23fe63e:	681b      	ldr	r3, [r3, #0]
 23fe640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 23fe642:	9302      	str	r3, [sp, #8]
 23fe644:	bd09      	pop	{r0, r3, pc}
 23fe646:	0000      	.short	0x0000
 23fe648:	1007adac 	.word	0x1007adac
 23fe64c:	00000004 	.word	0x00000004

023fe650 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
 23fe650:	b509      	push	{r0, r3, lr}
 23fe652:	4804      	ldr	r0, [pc, #16]	; (23fe664 <__assert_func+0x14>)
 23fe654:	6800      	ldr	r0, [r0, #0]
 23fe656:	4b04      	ldr	r3, [pc, #16]	; (23fe668 <__assert_func+0x18>)
 23fe658:	4403      	add	r3, r0
 23fe65a:	681b      	ldr	r3, [r3, #0]
 23fe65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 23fe65e:	9302      	str	r3, [sp, #8]
 23fe660:	bd09      	pop	{r0, r3, pc}
 23fe662:	0000      	.short	0x0000
 23fe664:	1007adac 	.word	0x1007adac
 23fe668:	00000004 	.word	0x00000004

023fe66c <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
 23fe66c:	b509      	push	{r0, r3, lr}
 23fe66e:	4804      	ldr	r0, [pc, #16]	; (23fe680 <newlib_impure_ptr_callback+0x14>)
 23fe670:	6800      	ldr	r0, [r0, #0]
 23fe672:	4b04      	ldr	r3, [pc, #16]	; (23fe684 <newlib_impure_ptr_callback+0x18>)
 23fe674:	4403      	add	r3, r0
 23fe676:	681b      	ldr	r3, [r3, #0]
 23fe678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 23fe67a:	9302      	str	r3, [sp, #8]
 23fe67c:	bd09      	pop	{r0, r3, pc}
 23fe67e:	0000      	.short	0x0000
 23fe680:	1007adac 	.word	0x1007adac
 23fe684:	00000004 	.word	0x00000004

023fe688 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 23fe688:	2100      	movs	r1, #0
 23fe68a:	f7ff be21 	b.w	23fe2d0 <system_delay_ms>

023fe68e <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 23fe68e:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 23fe690:	6883      	ldr	r3, [r0, #8]
 23fe692:	4604      	mov	r4, r0
 23fe694:	b90b      	cbnz	r3, 23fe69a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 23fe696:	f001 fa73 	bl	23ffb80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe69a:	68c3      	ldr	r3, [r0, #12]
 23fe69c:	4798      	blx	r3
      if (_M_manager)
 23fe69e:	68a3      	ldr	r3, [r4, #8]
 23fe6a0:	b11b      	cbz	r3, 23fe6aa <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe6a2:	2203      	movs	r2, #3
 23fe6a4:	4621      	mov	r1, r4
 23fe6a6:	4620      	mov	r0, r4
 23fe6a8:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 23fe6aa:	4620      	mov	r0, r4
}
 23fe6ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
 23fe6b0:	2110      	movs	r1, #16
 23fe6b2:	f7fe bdc6 	b.w	23fd242 <_ZdlPvj>

023fe6b6 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
 23fe6b6:	b510      	push	{r4, lr}
      if (_M_manager)
 23fe6b8:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
 23fe6ba:	4604      	mov	r4, r0
      if (_M_manager)
 23fe6bc:	b113      	cbz	r3, 23fe6c4 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 23fe6be:	2203      	movs	r2, #3
 23fe6c0:	4601      	mov	r1, r0
 23fe6c2:	4798      	blx	r3
    }
 23fe6c4:	4620      	mov	r0, r4
 23fe6c6:	bd10      	pop	{r4, pc}

023fe6c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
 23fe6c8:	b513      	push	{r0, r1, r4, lr}
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe6ca:	466c      	mov	r4, sp
    swap(_Tp& __a, _Tp& __b)
 23fe6cc:	460b      	mov	r3, r1
 23fe6ce:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe6d0:	e9d0 0100 	ldrd	r0, r1, [r0]
 23fe6d4:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 23fe6d8:	e893 0003 	ldmia.w	r3, {r0, r1}
 23fe6dc:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 23fe6e0:	e894 0003 	ldmia.w	r4, {r0, r1}
 23fe6e4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 23fe6e8:	b002      	add	sp, #8
 23fe6ea:	bd10      	pop	{r4, pc}

023fe6ec <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
 23fe6ec:	2300      	movs	r3, #0
 23fe6ee:	4802      	ldr	r0, [pc, #8]	; (23fe6f8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
 23fe6f0:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
 23fe6f2:	f7ff bbbd 	b.w	23fde70 <os_mutex_recursive_create>
 23fe6f6:	bf00      	nop
 23fe6f8:	1007ae80 	.word	0x1007ae80

023fe6fc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe6fc:	4770      	bx	lr

023fe6fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
 23fe6fe:	2000      	movs	r0, #0
 23fe700:	4770      	bx	lr

023fe702 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 23fe702:	b510      	push	{r4, lr}
 23fe704:	4604      	mov	r4, r0
 23fe706:	2110      	movs	r1, #16
 23fe708:	f7fe fd9b 	bl	23fd242 <_ZdlPvj>
 23fe70c:	4620      	mov	r0, r4
 23fe70e:	bd10      	pop	{r4, pc}

023fe710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
 23fe710:	b508      	push	{r3, lr}
      { delete this; }
 23fe712:	f7ff fff6 	bl	23fe702 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 23fe716:	bd08      	pop	{r3, pc}

023fe718 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 23fe718:	2200      	movs	r2, #0

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 23fe71a:	b530      	push	{r4, r5, lr}
        type_(type) {
 23fe71c:	f64f 749c 	movw	r4, #65436	; 0xff9c
 23fe720:	6002      	str	r2, [r0, #0]
 23fe722:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe724:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe726:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
 23fe728:	680c      	ldr	r4, [r1, #0]
 23fe72a:	8085      	strh	r5, [r0, #4]
 23fe72c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe72e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 23fe730:	bd30      	pop	{r4, r5, pc}

023fe732 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 23fe732:	b510      	push	{r4, lr}
 23fe734:	4604      	mov	r4, r0
    free((void*)msg_);
 23fe736:	6800      	ldr	r0, [r0, #0]
 23fe738:	f7ff ff52 	bl	23fe5e0 <free>
}
 23fe73c:	4620      	mov	r0, r4
 23fe73e:	bd10      	pop	{r4, pc}

023fe740 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
 23fe740:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 23fe742:	68c4      	ldr	r4, [r0, #12]
 23fe744:	b314      	cbz	r4, 23fe78c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x4c>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
 23fe746:	7823      	ldrb	r3, [r4, #0]
 23fe748:	b2db      	uxtb	r3, r3
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 23fe74a:	2b02      	cmp	r3, #2
 23fe74c:	d103      	bne.n	23fe756 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x16>
            error_.~Error();
 23fe74e:	f104 000c 	add.w	r0, r4, #12
 23fe752:	f7ff ffee 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
 23fe756:	1d23      	adds	r3, r4, #4
 23fe758:	681d      	ldr	r5, [r3, #0]
        delete onSuccess_.load(std::memory_order_relaxed);
 23fe75a:	b135      	cbz	r5, 23fe76a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x2a>
    class function<_Res(_ArgTypes...)>
 23fe75c:	4628      	mov	r0, r5
 23fe75e:	f7ff ffaa 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
 23fe762:	2110      	movs	r1, #16
 23fe764:	4628      	mov	r0, r5
 23fe766:	f7fe fd6c 	bl	23fd242 <_ZdlPvj>
 23fe76a:	f104 0308 	add.w	r3, r4, #8
 23fe76e:	681d      	ldr	r5, [r3, #0]
        delete onError_.load(std::memory_order_relaxed);
 23fe770:	b135      	cbz	r5, 23fe780 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x40>
 23fe772:	4628      	mov	r0, r5
 23fe774:	f7ff ff9f 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
 23fe778:	2110      	movs	r1, #16
 23fe77a:	4628      	mov	r0, r5
 23fe77c:	f7fe fd61 	bl	23fd242 <_ZdlPvj>
 23fe780:	4620      	mov	r0, r4
 23fe782:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 23fe786:	2114      	movs	r1, #20
 23fe788:	f7fe bd5b 	b.w	23fd242 <_ZdlPvj>
 23fe78c:	bd38      	pop	{r3, r4, r5, pc}

023fe78e <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
 23fe78e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
 23fe790:	230c      	movs	r3, #12
    spark_cloud_disconnect_options opts = {};
 23fe792:	2100      	movs	r1, #0
    opts.size = sizeof(opts);
 23fe794:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
 23fe798:	6803      	ldr	r3, [r0, #0]
    spark_cloud_disconnect_options opts = {};
 23fe79a:	f8ad 100d 	strh.w	r1, [sp, #13]
    opts.flags = flags_;
 23fe79e:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
 23fe7a2:	7a03      	ldrb	r3, [r0, #8]
    spark_cloud_disconnect_options opts = {};
 23fe7a4:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.graceful = graceful_;
 23fe7a8:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
 23fe7ac:	6843      	ldr	r3, [r0, #4]
 23fe7ae:	9302      	str	r3, [sp, #8]
    opts.clear_session = clearSession_;
 23fe7b0:	7a43      	ldrb	r3, [r0, #9]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fe7b2:	a801      	add	r0, sp, #4
    opts.clear_session = clearSession_;
 23fe7b4:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
 23fe7b8:	f7ff fe4e 	bl	23fe458 <spark_cloud_disconnect>
}
 23fe7bc:	b005      	add	sp, #20
 23fe7be:	f85d fb04 	ldr.w	pc, [sp], #4

023fe7c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe7c2:	680b      	ldr	r3, [r1, #0]
 23fe7c4:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
 23fe7c6:	684b      	ldr	r3, [r1, #4]
 23fe7c8:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
 23fe7ca:	b113      	cbz	r3, 23fe7d2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
 23fe7cc:	685a      	ldr	r2, [r3, #4]
 23fe7ce:	3201      	adds	r2, #1
 23fe7d0:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
 23fe7d2:	4770      	bx	lr

023fe7d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 23fe7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23fe7d6:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
 23fe7d8:	4668      	mov	r0, sp
 23fe7da:	460d      	mov	r5, r1
 23fe7dc:	f7ff fff1 	bl	23fe7c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe7e0:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fe7e2:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fe7e4:	6023      	str	r3, [r4, #0]
	__r._M_pi = _M_pi;
 23fe7e6:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fe7e8:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
 23fe7ea:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
 23fe7ec:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 23fe7ee:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
 23fe7f0:	f7fe fd50 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
 23fe7f4:	b135      	cbz	r5, 23fe804 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
 23fe7f6:	1d28      	adds	r0, r5, #4
 23fe7f8:	f7fe fd4c 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fe7fc:	2108      	movs	r1, #8
 23fe7fe:	4628      	mov	r0, r5
 23fe800:	f7fe fd1f 	bl	23fd242 <_ZdlPvj>
        return p;
    }
 23fe804:	4620      	mov	r0, r4
 23fe806:	b003      	add	sp, #12
 23fe808:	bd30      	pop	{r4, r5, pc}

023fe80a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
 23fe80a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe80c:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe80e:	b90a      	cbnz	r2, 23fe814 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 23fe810:	f001 f9b6 	bl	23ffb80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe814:	68c3      	ldr	r3, [r0, #12]
    }
 23fe816:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe81a:	4718      	bx	r3

023fe81c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe81c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe81e:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 23fe820:	f100 0110 	add.w	r1, r0, #16
 23fe824:	f7ff fff1 	bl	23fe80a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
 23fe828:	bd08      	pop	{r3, pc}

023fe82a <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
 23fe82a:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
 23fe82c:	b510      	push	{r4, lr}
      if (_M_empty())
 23fe82e:	b90a      	cbnz	r2, 23fe834 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 23fe830:	f001 f9a6 	bl	23ffb80 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe834:	68c3      	ldr	r3, [r0, #12]
    }
 23fe836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 23fe83a:	4718      	bx	r3

023fe83c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 23fe83c:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
 23fe83e:	6800      	ldr	r0, [r0, #0]
 23fe840:	f100 0110 	add.w	r1, r0, #16
 23fe844:	f7ff fff1 	bl	23fe82a <_ZNKSt8functionIFvRKbEEclES1_>
      }
 23fe848:	bd08      	pop	{r3, pc}
	...

023fe84c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe84c:	b538      	push	{r3, r4, r5, lr}
 23fe84e:	2300      	movs	r3, #0
 23fe850:	4604      	mov	r4, r0
 23fe852:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe854:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
 23fe856:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe858:	f7fe fcef 	bl	23fd23a <_Znwj>
 23fe85c:	b128      	cbz	r0, 23fe86a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
 23fe85e:	2301      	movs	r3, #1
 23fe860:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
 23fe864:	4b02      	ldr	r3, [pc, #8]	; (23fe870 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 23fe866:	60c5      	str	r5, [r0, #12]
 23fe868:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 23fe86a:	6020      	str	r0, [r4, #0]
	}
 23fe86c:	4620      	mov	r0, r4
 23fe86e:	bd38      	pop	{r3, r4, r5, pc}
 23fe870:	023ffdb0 	.word	0x023ffdb0

023fe874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
 23fe874:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23fe876:	2300      	movs	r3, #0
 23fe878:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23fe87a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23fe87c:	4604      	mov	r4, r0
 23fe87e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23fe880:	b12b      	cbz	r3, 23fe88e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23fe882:	2202      	movs	r2, #2
 23fe884:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23fe886:	68eb      	ldr	r3, [r5, #12]
 23fe888:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23fe88a:	68ab      	ldr	r3, [r5, #8]
 23fe88c:	60a3      	str	r3, [r4, #8]
    }
 23fe88e:	4620      	mov	r0, r4
 23fe890:	bd38      	pop	{r3, r4, r5, pc}
	...

023fe894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
 23fe894:	b5f0      	push	{r4, r5, r6, r7, lr}
 23fe896:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
 23fe898:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 23fe89a:	4668      	mov	r0, sp
 23fe89c:	f7ff ff3c 	bl	23fe718 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23fe8a0:	f04f 0302 	mov.w	r3, #2
 23fe8a4:	e8d4 2f4f 	ldrexb	r2, [r4]
 23fe8a8:	2a00      	cmp	r2, #0
 23fe8aa:	d103      	bne.n	23fe8b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 23fe8ac:	e8c4 3f41 	strexb	r1, r3, [r4]
 23fe8b0:	2900      	cmp	r1, #0
 23fe8b2:	d1f7      	bne.n	23fe8a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
 23fe8b4:	d121      	bne.n	23fe8fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
            new(&error_) Error(std::move(error));
 23fe8b6:	f104 050c 	add.w	r5, r4, #12
 23fe8ba:	4669      	mov	r1, sp
 23fe8bc:	4628      	mov	r0, r5
 23fe8be:	f7ff ff2b 	bl	23fe718 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
 23fe8c2:	2201      	movs	r2, #1
 23fe8c4:	1c63      	adds	r3, r4, #1
 23fe8c6:	e8c3 2f8f 	stlb	r2, [r3]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23fe8ca:	2000      	movs	r0, #0
 23fe8cc:	f104 0308 	add.w	r3, r4, #8
 23fe8d0:	e8d3 6fef 	ldaex	r6, [r3]
 23fe8d4:	e8c3 0fe2 	stlex	r2, r0, [r3]
 23fe8d8:	2a00      	cmp	r2, #0
 23fe8da:	d1f9      	bne.n	23fe8d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
        if (callbackPtr) {
 23fe8dc:	b16e      	cbz	r6, 23fe8fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x66>
        return (application_thread_current(nullptr) != 0);
 23fe8de:	f7ff fd13 	bl	23fe308 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23fe8e2:	b178      	cbz	r0, 23fe904 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x70>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23fe8e4:	4629      	mov	r1, r5
 23fe8e6:	4630      	mov	r0, r6
 23fe8e8:	f7ff ff8f 	bl	23fe80a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
 23fe8ec:	4630      	mov	r0, r6
 23fe8ee:	f7ff fee2 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23fe8f2:	2110      	movs	r1, #16
 23fe8f4:	4630      	mov	r0, r6
 23fe8f6:	f7fe fca4 	bl	23fd242 <_ZdlPvj>
        p_->setError(std::move(error));
 23fe8fa:	4668      	mov	r0, sp
 23fe8fc:	f7ff ff19 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
    }
 23fe900:	b009      	add	sp, #36	; 0x24
 23fe902:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23fe904:	4631      	mov	r1, r6
 23fe906:	a802      	add	r0, sp, #8
 23fe908:	f7ff ffb4 	bl	23fe874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23fe90c:	68e0      	ldr	r0, [r4, #12]
 23fe90e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23fe912:	b108      	cbz	r0, 23fe918 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x84>
 23fe914:	f001 f988 	bl	23ffc28 <strdup>
        type_(type) {
 23fe918:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23fe91a:	2010      	movs	r0, #16
 23fe91c:	f8ad 501c 	strh.w	r5, [sp, #28]
 23fe920:	f7fe fc8b 	bl	23fd23a <_Znwj>
 23fe924:	4605      	mov	r5, r0
 23fe926:	b1e8      	cbz	r0, 23fe964 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd0>
    _Function_base() : _M_manager(nullptr) { }
 23fe928:	2700      	movs	r7, #0
 23fe92a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe92c:	2018      	movs	r0, #24
 23fe92e:	f7fe fc84 	bl	23fd23a <_Znwj>
 23fe932:	4604      	mov	r4, r0
 23fe934:	b188      	cbz	r0, 23fe95a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc6>
	std::swap(_M_functor, __x._M_functor);
 23fe936:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23fe938:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23fe93a:	a802      	add	r0, sp, #8
 23fe93c:	f7ff fec4 	bl	23fe6c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe940:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 23fe942:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23fe944:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23fe946:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23fe948:	9204      	str	r2, [sp, #16]
 23fe94a:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23fe94c:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 23fe94e:	60e3      	str	r3, [r4, #12]
 23fe950:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
 23fe954:	9205      	str	r2, [sp, #20]
 23fe956:	f7ff fedf 	bl	23fe718 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
 23fe95a:	4b08      	ldr	r3, [pc, #32]	; (23fe97c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23fe95c:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23fe95e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23fe960:	4b07      	ldr	r3, [pc, #28]	; (23fe980 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>)
 23fe962:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
 23fe964:	a806      	add	r0, sp, #24
 23fe966:	f7ff fee4 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23fe96a:	a802      	add	r0, sp, #8
 23fe96c:	f7ff fea3 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23fe970:	2200      	movs	r2, #0
 23fe972:	4629      	mov	r1, r5
 23fe974:	4803      	ldr	r0, [pc, #12]	; (23fe984 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
 23fe976:	f7ff fcd5 	bl	23fe324 <application_thread_invoke>
 23fe97a:	e7b7      	b.n	23fe8ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 23fe97c:	023fe81d 	.word	0x023fe81d
 23fe980:	023fea99 	.word	0x023fea99
 23fe984:	023fe68f 	.word	0x023fe68f

023fe988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 23fe988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23fe98c:	b08b      	sub	sp, #44	; 0x2c
 23fe98e:	4605      	mov	r5, r0
 23fe990:	460f      	mov	r7, r1
 23fe992:	4690      	mov	r8, r2
 23fe994:	4699      	mov	r9, r3
 23fe996:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 23fe99a:	f7ff fd33 	bl	23fe404 <spark_cloud_flag_connected>
 23fe99e:	ae07      	add	r6, sp, #28
    if (!connected()) {
 23fe9a0:	4683      	mov	fp, r0
 23fe9a2:	bb38      	cbnz	r0, 23fe9f4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
 23fe9a4:	f64f 732e 	movw	r3, #65326	; 0xff2e
 23fe9a8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe9aa:	a905      	add	r1, sp, #20
 23fe9ac:	4630      	mov	r0, r6
 23fe9ae:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fe9b2:	f7ff feb1 	bl	23fe718 <_ZN8particle5ErrorC1EOS0_>
 23fe9b6:	2014      	movs	r0, #20
 23fe9b8:	f7fe fc3f 	bl	23fd23a <_Znwj>
 23fe9bc:	4604      	mov	r4, r0
 23fe9be:	b148      	cbz	r0, 23fe9d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 23fe9c0:	2302      	movs	r3, #2
 23fe9c2:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe9c4:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fe9c6:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fe9ca:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
 23fe9cc:	4631      	mov	r1, r6
 23fe9ce:	300c      	adds	r0, #12
 23fe9d0:	f7ff fea2 	bl	23fe718 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe9d4:	4628      	mov	r0, r5
	: __shared_count(__p)
 23fe9d6:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fe9d8:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
 23fe9dc:	f7ff ff36 	bl	23fe84c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 23fe9e0:	4630      	mov	r0, r6
 23fe9e2:	f7ff fea6 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 23fe9e6:	a805      	add	r0, sp, #20
 23fe9e8:	f7ff fea3 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
}
 23fe9ec:	4628      	mov	r0, r5
 23fe9ee:	b00b      	add	sp, #44	; 0x2c
 23fe9f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
 23fe9f4:	230c      	movs	r3, #12
    spark_send_event_data d = {};
 23fe9f6:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 23fe9f8:	2014      	movs	r0, #20
 23fe9fa:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
 23fe9fe:	9307      	str	r3, [sp, #28]
 23fea00:	f7fe fc1b 	bl	23fd23a <_Znwj>
 23fea04:	4601      	mov	r1, r0
 23fea06:	b118      	cbz	r0, 23fea10 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 23fea08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 23fea0c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 23fea0e:	7044      	strb	r4, [r0, #1]
 23fea10:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
 23fea12:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
 23fea14:	f7ff ff1a 	bl	23fe84c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
 23fea18:	4b1e      	ldr	r3, [pc, #120]	; (23fea94 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 23fea1a:	2008      	movs	r0, #8
 23fea1c:	9308      	str	r3, [sp, #32]
 23fea1e:	f7fe fc0c 	bl	23fd23a <_Znwj>
 23fea22:	4604      	mov	r4, r0
 23fea24:	b110      	cbz	r0, 23fea2c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
 23fea26:	a903      	add	r1, sp, #12
 23fea28:	f7ff fecb 	bl	23fe7c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fea2c:	464a      	mov	r2, r9
 23fea2e:	4641      	mov	r1, r8
 23fea30:	4638      	mov	r0, r7
 23fea32:	9600      	str	r6, [sp, #0]
 23fea34:	fa5f f38a 	uxtb.w	r3, sl
    d.handler_data = p.dataPtr();
 23fea38:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 23fea3a:	f7ff fcf1 	bl	23fe420 <spark_send_event>
 23fea3e:	b9b8      	cbnz	r0, 23fea70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
 23fea40:	9b03      	ldr	r3, [sp, #12]
 23fea42:	3301      	adds	r3, #1
 23fea44:	781b      	ldrb	r3, [r3, #0]
 23fea46:	b2db      	uxtb	r3, r3
 23fea48:	b993      	cbnz	r3, 23fea70 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 23fea4a:	9305      	str	r3, [sp, #20]
 23fea4c:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
 23fea50:	a905      	add	r1, sp, #20
 23fea52:	a803      	add	r0, sp, #12
 23fea54:	f8ad 3018 	strh.w	r3, [sp, #24]
 23fea58:	f7ff ff1c 	bl	23fe894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23fea5c:	a805      	add	r0, sp, #20
 23fea5e:	f7ff fe68 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 23fea62:	a805      	add	r0, sp, #20
 23fea64:	9909      	ldr	r1, [sp, #36]	; 0x24
 23fea66:	f7ff feb5 	bl	23fe7d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
 23fea6a:	a806      	add	r0, sp, #24
 23fea6c:	f7fe fc12 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea70:	a903      	add	r1, sp, #12
 23fea72:	a805      	add	r0, sp, #20
 23fea74:	f7ff fea5 	bl	23fe7c2 <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea78:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 23fea7a:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
 23fea7c:	602b      	str	r3, [r5, #0]
	__r._M_pi = _M_pi;
 23fea7e:	2300      	movs	r3, #0
	_M_pi = __tmp;
 23fea80:	606a      	str	r2, [r5, #4]
      ~__shared_ptr() = default;
 23fea82:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
 23fea84:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
 23fea86:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
 23fea88:	f7fe fc04 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 23fea8c:	a804      	add	r0, sp, #16
 23fea8e:	f7fe fc01 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
 23fea92:	e7ab      	b.n	23fe9ec <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
 23fea94:	023feb15 	.word	0x023feb15

023fea98 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
 23fea98:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fea9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fea9c:	4605      	mov	r5, r0
	switch (__op)
 23fea9e:	d103      	bne.n	23feaa8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23feaa0:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23feaa2:	6003      	str	r3, [r0, #0]
      }
 23feaa4:	2000      	movs	r0, #0
 23feaa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
 23feaa8:	2a02      	cmp	r2, #2
 23feaaa:	d010      	beq.n	23feace <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
 23feaac:	2a03      	cmp	r2, #3
 23feaae:	d1f9      	bne.n	23feaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23feab0:	6804      	ldr	r4, [r0, #0]
 23feab2:	2c00      	cmp	r4, #0
 23feab4:	d0f6      	beq.n	23feaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
 23feab6:	f104 0010 	add.w	r0, r4, #16
 23feaba:	f7ff fe3a 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
 23feabe:	4620      	mov	r0, r4
 23feac0:	f7ff fdf9 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23feac4:	2118      	movs	r1, #24
 23feac6:	4620      	mov	r0, r4
 23feac8:	f7fe fbbb 	bl	23fd242 <_ZdlPvj>
 23feacc:	e7ea      	b.n	23feaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23feace:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
 23fead0:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fead2:	f7fe fbb2 	bl	23fd23a <_Znwj>
 23fead6:	4604      	mov	r4, r0
 23fead8:	b150      	cbz	r0, 23feaf0 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 23feada:	4631      	mov	r1, r6
 23feadc:	f7ff feca 	bl	23fe874 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
 23feae0:	6930      	ldr	r0, [r6, #16]
 23feae2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23feae6:	b108      	cbz	r0, 23feaec <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
 23feae8:	f001 f89e 	bl	23ffc28 <strdup>
        type_(type) {
 23feaec:	6120      	str	r0, [r4, #16]
 23feaee:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
 23feaf0:	602c      	str	r4, [r5, #0]
	}
 23feaf2:	e7d7      	b.n	23feaa4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

023feaf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
 23feaf4:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
 23feaf6:	2300      	movs	r3, #0
 23feaf8:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
 23feafa:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
 23feafc:	4604      	mov	r4, r0
 23feafe:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
 23feb00:	b12b      	cbz	r3, 23feb0e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 23feb02:	2202      	movs	r2, #2
 23feb04:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 23feb06:	68eb      	ldr	r3, [r5, #12]
 23feb08:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 23feb0a:	68ab      	ldr	r3, [r5, #8]
 23feb0c:	60a3      	str	r3, [r4, #8]
    }
 23feb0e:	4620      	mov	r0, r4
 23feb10:	bd38      	pop	{r3, r4, r5, pc}
	...

023feb14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 23feb14:	b5f0      	push	{r4, r5, r6, r7, lr}
 23feb16:	4604      	mov	r4, r0
 23feb18:	b089      	sub	sp, #36	; 0x24
 23feb1a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 23feb1c:	a801      	add	r0, sp, #4
 23feb1e:	4611      	mov	r1, r2
 23feb20:	f7ff fe58 	bl	23fe7d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 23feb24:	b1a4      	cbz	r4, 23feb50 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
 23feb26:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
 23feb28:	b11d      	cbz	r5, 23feb32 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
 23feb2a:	4628      	mov	r0, r5
 23feb2c:	f001 f87c 	bl	23ffc28 <strdup>
 23feb30:	4605      	mov	r5, r0
 23feb32:	a801      	add	r0, sp, #4
 23feb34:	a903      	add	r1, sp, #12
        type_(type) {
 23feb36:	9503      	str	r5, [sp, #12]
 23feb38:	f8ad 4010 	strh.w	r4, [sp, #16]
 23feb3c:	f7ff feaa 	bl	23fe894 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 23feb40:	a803      	add	r0, sp, #12
 23feb42:	f7ff fdf6 	bl	23fe732 <_ZN8particle5ErrorD1Ev>
 23feb46:	a802      	add	r0, sp, #8
 23feb48:	f7fe fba4 	bl	23fd294 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
 23feb4c:	b009      	add	sp, #36	; 0x24
 23feb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return __atomic_compare_exchange(std::__addressof(_M_i),
 23feb50:	2301      	movs	r3, #1
      { return _M_ptr; }
 23feb52:	9d01      	ldr	r5, [sp, #4]
 23feb54:	e8d5 2f4f 	ldrexb	r2, [r5]
 23feb58:	2a00      	cmp	r2, #0
 23feb5a:	d103      	bne.n	23feb64 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
 23feb5c:	e8c5 3f41 	strexb	r1, r3, [r5]
 23feb60:	2900      	cmp	r1, #0
 23feb62:	d1f7      	bne.n	23feb54 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
 23feb64:	d1ef      	bne.n	23feb46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
 23feb66:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
 23feb68:	2201      	movs	r2, #1
 23feb6a:	18eb      	adds	r3, r5, r3
 23feb6c:	e8c3 2f8f 	stlb	r2, [r3]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
 23feb70:	1d2b      	adds	r3, r5, #4
 23feb72:	e8d3 6fef 	ldaex	r6, [r3]
 23feb76:	e8c3 4fe2 	stlex	r2, r4, [r3]
 23feb7a:	2a00      	cmp	r2, #0
 23feb7c:	d1f9      	bne.n	23feb72 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x5e>
        if (callbackPtr) {
 23feb7e:	2e00      	cmp	r6, #0
 23feb80:	d0e1      	beq.n	23feb46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
 23feb82:	4620      	mov	r0, r4
 23feb84:	f7ff fbc0 	bl	23fe308 <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
 23feb88:	4607      	mov	r7, r0
 23feb8a:	b160      	cbz	r0, 23feba6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x92>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 23feb8c:	4630      	mov	r0, r6
 23feb8e:	f105 010c 	add.w	r1, r5, #12
 23feb92:	f7ff fe4a 	bl	23fe82a <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
 23feb96:	4630      	mov	r0, r6
 23feb98:	f7ff fd8d 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
 23feb9c:	2110      	movs	r1, #16
 23feb9e:	4630      	mov	r0, r6
 23feba0:	f7fe fb4f 	bl	23fd242 <_ZdlPvj>
 23feba4:	e7cf      	b.n	23feb46 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 23feba6:	4631      	mov	r1, r6
 23feba8:	a803      	add	r0, sp, #12
 23febaa:	f7ff ffa3 	bl	23feaf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 23febae:	7b2b      	ldrb	r3, [r5, #12]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 23febb0:	2010      	movs	r0, #16
 23febb2:	f88d 301c 	strb.w	r3, [sp, #28]
 23febb6:	f7fe fb40 	bl	23fd23a <_Znwj>
 23febba:	4605      	mov	r5, r0
 23febbc:	b1d0      	cbz	r0, 23febf4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe0>
    _Function_base() : _M_manager(nullptr) { }
 23febbe:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febc0:	2014      	movs	r0, #20
 23febc2:	f7fe fb3a 	bl	23fd23a <_Znwj>
 23febc6:	4604      	mov	r4, r0
 23febc8:	b178      	cbz	r0, 23febea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xd6>
	std::swap(_M_functor, __x._M_functor);
 23febca:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
 23febcc:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
 23febce:	a803      	add	r0, sp, #12
 23febd0:	f7ff fd7a 	bl	23fe6c8 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febd4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 23febd6:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 23febd8:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 23febda:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
 23febdc:	9205      	str	r2, [sp, #20]
 23febde:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 23febe0:	60e3      	str	r3, [r4, #12]
 23febe2:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
 23febe6:	9206      	str	r2, [sp, #24]
 23febe8:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
 23febea:	4b07      	ldr	r3, [pc, #28]	; (23fec08 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 23febec:	602c      	str	r4, [r5, #0]
	    _M_invoker = &_My_handler::_M_invoke;
 23febee:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 23febf0:	4b06      	ldr	r3, [pc, #24]	; (23fec0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
 23febf2:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
 23febf4:	a803      	add	r0, sp, #12
 23febf6:	f7ff fd5e 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
 23febfa:	2200      	movs	r2, #0
 23febfc:	4629      	mov	r1, r5
 23febfe:	4804      	ldr	r0, [pc, #16]	; (23fec10 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
 23fec00:	f7ff fb90 	bl	23fe324 <application_thread_invoke>
 23fec04:	e7c7      	b.n	23feb96 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x82>
 23fec06:	bf00      	nop
 23fec08:	023fe83d 	.word	0x023fe83d
 23fec0c:	023fec15 	.word	0x023fec15
 23fec10:	023fe68f 	.word	0x023fe68f

023fec14 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
 23fec14:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 23fec16:	b570      	push	{r4, r5, r6, lr}
 23fec18:	4604      	mov	r4, r0
	switch (__op)
 23fec1a:	d103      	bne.n	23fec24 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
 23fec1c:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 23fec1e:	6003      	str	r3, [r0, #0]
      }
 23fec20:	2000      	movs	r0, #0
 23fec22:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
 23fec24:	2a02      	cmp	r2, #2
 23fec26:	d00c      	beq.n	23fec42 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
 23fec28:	2a03      	cmp	r2, #3
 23fec2a:	d1f9      	bne.n	23fec20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
 23fec2c:	6804      	ldr	r4, [r0, #0]
 23fec2e:	2c00      	cmp	r4, #0
 23fec30:	d0f6      	beq.n	23fec20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
 23fec32:	4620      	mov	r0, r4
 23fec34:	f7ff fd3f 	bl	23fe6b6 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
 23fec38:	2114      	movs	r1, #20
 23fec3a:	4620      	mov	r0, r4
 23fec3c:	f7fe fb01 	bl	23fd242 <_ZdlPvj>
 23fec40:	e7ee      	b.n	23fec20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
 23fec42:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
 23fec44:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
 23fec46:	f7fe faf8 	bl	23fd23a <_Znwj>
 23fec4a:	4605      	mov	r5, r0
 23fec4c:	b120      	cbz	r0, 23fec58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
 23fec4e:	4631      	mov	r1, r6
 23fec50:	f7ff ff50 	bl	23feaf4 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 23fec54:	7c33      	ldrb	r3, [r6, #16]
 23fec56:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
 23fec58:	6025      	str	r5, [r4, #0]
	}
 23fec5a:	e7e1      	b.n	23fec20 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

023fec5c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23fec5c:	2200      	movs	r2, #0
 23fec5e:	6840      	ldr	r0, [r0, #4]
 23fec60:	4611      	mov	r1, r2
 23fec62:	f7ff bc69 	b.w	23fe538 <network_listening>

023fec66 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23fec66:	2200      	movs	r2, #0
 23fec68:	6840      	ldr	r0, [r0, #4]
 23fec6a:	4611      	mov	r1, r2
 23fec6c:	f7ff bc80 	b.w	23fe570 <network_get_listen_timeout>

023fec70 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23fec70:	2200      	movs	r2, #0
 23fec72:	6840      	ldr	r0, [r0, #4]
 23fec74:	f7ff bc6e 	b.w	23fe554 <network_set_listen_timeout>

023fec78 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23fec78:	2200      	movs	r2, #0
 23fec7a:	6840      	ldr	r0, [r0, #4]
 23fec7c:	f081 0101 	eor.w	r1, r1, #1
 23fec80:	f7ff bc4c 	b.w	23fe51c <network_listen>

023fec84 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23fec84:	2300      	movs	r3, #0
 23fec86:	6840      	ldr	r0, [r0, #4]
 23fec88:	461a      	mov	r2, r3
 23fec8a:	4619      	mov	r1, r3
 23fec8c:	f7ff bc38 	b.w	23fe500 <network_off>

023fec90 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23fec90:	2300      	movs	r3, #0
 23fec92:	6840      	ldr	r0, [r0, #4]
 23fec94:	461a      	mov	r2, r3
 23fec96:	4619      	mov	r1, r3
 23fec98:	f7ff bc24 	b.w	23fe4e4 <network_on>

023fec9c <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
 23fec9c:	2200      	movs	r2, #0
 23fec9e:	6840      	ldr	r0, [r0, #4]
 23feca0:	4611      	mov	r1, r2
 23feca2:	f7ff bc11 	b.w	23fe4c8 <network_ready>

023feca6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23feca6:	2200      	movs	r2, #0
 23feca8:	6840      	ldr	r0, [r0, #4]
 23fecaa:	4611      	mov	r1, r2
 23fecac:	f7ff bbf0 	b.w	23fe490 <network_connecting>

023fecb0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23fecb0:	2200      	movs	r2, #0
 23fecb2:	2102      	movs	r1, #2
 23fecb4:	6840      	ldr	r0, [r0, #4]
 23fecb6:	f7ff bbf9 	b.w	23fe4ac <network_disconnect>

023fecba <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23fecba:	2300      	movs	r3, #0
 23fecbc:	6840      	ldr	r0, [r0, #4]
 23fecbe:	461a      	mov	r2, r3
 23fecc0:	f7ff bbd8 	b.w	23fe474 <network_connect>

023fecc4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 23fecc4:	2203      	movs	r2, #3
 23fecc6:	4b02      	ldr	r3, [pc, #8]	; (23fecd0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
 23fecc8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
 23fecca:	4a02      	ldr	r2, [pc, #8]	; (23fecd4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
 23feccc:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
 23fecce:	4770      	bx	lr
 23fecd0:	1007ae84 	.word	0x1007ae84
 23fecd4:	023ffdcc 	.word	0x023ffdcc

023fecd8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
 23fecd8:	4770      	bx	lr

023fecda <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 23fecda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23fecdc:	4606      	mov	r6, r0
 23fecde:	4615      	mov	r5, r2
 23fece0:	460c      	mov	r4, r1
 23fece2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 23fece4:	42bc      	cmp	r4, r7
 23fece6:	d006      	beq.n	23fecf6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 23fece8:	6833      	ldr	r3, [r6, #0]
 23fecea:	4630      	mov	r0, r6
 23fecec:	689b      	ldr	r3, [r3, #8]
 23fecee:	f814 1b01 	ldrb.w	r1, [r4], #1
 23fecf2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
 23fecf4:	e7f6      	b.n	23fece4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
 23fecf6:	4628      	mov	r0, r5
 23fecf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023fecfa <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
 23fecfa:	2200      	movs	r2, #0
 23fecfc:	7c00      	ldrb	r0, [r0, #16]
 23fecfe:	f7ff b951 	b.w	23fdfa4 <hal_i2c_write>

023fed02 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
 23fed02:	2100      	movs	r1, #0
 23fed04:	7c00      	ldrb	r0, [r0, #16]
 23fed06:	f7ff b95b 	b.w	23fdfc0 <hal_i2c_available>

023fed0a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
 23fed0a:	2100      	movs	r1, #0
 23fed0c:	7c00      	ldrb	r0, [r0, #16]
 23fed0e:	f7ff b965 	b.w	23fdfdc <hal_i2c_read>

023fed12 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
 23fed12:	2100      	movs	r1, #0
 23fed14:	7c00      	ldrb	r0, [r0, #16]
 23fed16:	f7ff b96f 	b.w	23fdff8 <hal_i2c_peek>

023fed1a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
 23fed1a:	2100      	movs	r1, #0
 23fed1c:	7c00      	ldrb	r0, [r0, #16]
 23fed1e:	f7ff b979 	b.w	23fe014 <hal_i2c_flush>

023fed22 <_ZN7TwoWireD0Ev>:
 23fed22:	b510      	push	{r4, lr}
 23fed24:	4604      	mov	r4, r0
 23fed26:	2114      	movs	r1, #20
 23fed28:	f7fe fa8b 	bl	23fd242 <_ZdlPvj>
 23fed2c:	4620      	mov	r0, r4
 23fed2e:	bd10      	pop	{r4, pc}

023fed30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fed30:	b538      	push	{r3, r4, r5, lr}
 23fed32:	4604      	mov	r4, r0
 23fed34:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 23fed36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23fed3a:	2200      	movs	r2, #0
 23fed3c:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23fed40:	4b09      	ldr	r3, [pc, #36]	; (23fed68 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
 23fed42:	4608      	mov	r0, r1
  _i2c = i2c;
 23fed44:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
 23fed46:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
 23fed48:	4629      	mov	r1, r5
 23fed4a:	f7ff f97f 	bl	23fe04c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fed4e:	30bf      	adds	r0, #191	; 0xbf
 23fed50:	d108      	bne.n	23fed64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
 23fed52:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
 23fed54:	07db      	lsls	r3, r3, #31
 23fed56:	d505      	bpl.n	23fed64 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
 23fed58:	6868      	ldr	r0, [r5, #4]
 23fed5a:	f7ff fc41 	bl	23fe5e0 <free>
    free(conf.tx_buffer);
 23fed5e:	68e8      	ldr	r0, [r5, #12]
 23fed60:	f7ff fc3e 	bl	23fe5e0 <free>
}
 23fed64:	4620      	mov	r0, r4
 23fed66:	bd38      	pop	{r3, r4, r5, pc}
 23fed68:	023ffe08 	.word	0x023ffe08

023fed6c <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
 23fed6c:	2200      	movs	r2, #0
 23fed6e:	7c00      	ldrb	r0, [r0, #16]
 23fed70:	f7ff b8e0 	b.w	23fdf34 <hal_i2c_set_speed>

023fed74 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 23fed74:	2300      	movs	r3, #0
 23fed76:	7c00      	ldrb	r0, [r0, #16]
 23fed78:	461a      	mov	r2, r3
 23fed7a:	4619      	mov	r1, r3
 23fed7c:	f7ff b8e8 	b.w	23fdf50 <hal_i2c_begin>

023fed80 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
 23fed80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
 23fed82:	2200      	movs	r2, #0
 23fed84:	2314      	movs	r3, #20
 23fed86:	e9cd 2201 	strd	r2, r2, [sp, #4]
 23fed8a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
 23fed8e:	780b      	ldrb	r3, [r1, #0]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
 23fed90:	7c00      	ldrb	r0, [r0, #16]
 23fed92:	f88d 3008 	strb.w	r3, [sp, #8]
 23fed96:	684b      	ldr	r3, [r1, #4]
 23fed98:	9303      	str	r3, [sp, #12]
 23fed9a:	68cb      	ldr	r3, [r1, #12]
 23fed9c:	9304      	str	r3, [sp, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
 23fed9e:	7a0b      	ldrb	r3, [r1, #8]
 23feda0:	a901      	add	r1, sp, #4
 23feda2:	9305      	str	r3, [sp, #20]
 23feda4:	f7ff f960 	bl	23fe068 <hal_i2c_request_ex>
}
 23feda8:	b007      	add	sp, #28
 23fedaa:	f85d fb04 	ldr.w	pc, [sp], #4

023fedae <_ZN7TwoWire11requestFromEhjh>:
{
 23fedae:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
 23fedb0:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
 23fedb2:	f88d 1000 	strb.w	r1, [sp]
 23fedb6:	f04f 0164 	mov.w	r1, #100	; 0x64
 23fedba:	bf18      	it	ne
 23fedbc:	2301      	movne	r3, #1
 23fedbe:	9103      	str	r1, [sp, #12]
 23fedc0:	4669      	mov	r1, sp
    size_ = size;
 23fedc2:	9201      	str	r2, [sp, #4]
 23fedc4:	f88d 3008 	strb.w	r3, [sp, #8]
 23fedc8:	f7ff ffda 	bl	23fed80 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
 23fedcc:	b005      	add	sp, #20
 23fedce:	f85d fb04 	ldr.w	pc, [sp], #4

023fedd2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
 23fedd2:	2301      	movs	r3, #1
 23fedd4:	f7ff bfeb 	b.w	23fedae <_ZN7TwoWire11requestFromEhjh>

023fedd8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
 23fedd8:	2200      	movs	r2, #0
 23fedda:	7c00      	ldrb	r0, [r0, #16]
 23feddc:	f7ff b8c6 	b.w	23fdf6c <hal_i2c_begin_transmission>

023fede0 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
 23fede0:	2200      	movs	r2, #0
 23fede2:	7c00      	ldrb	r0, [r0, #16]
 23fede4:	f7ff b8d0 	b.w	23fdf88 <hal_i2c_end_transmission>

023fede8 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
 23fede8:	2101      	movs	r1, #1
 23fedea:	f7ff bff9 	b.w	23fede0 <_ZN7TwoWire15endTransmissionEh>

023fedee <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 23fedee:	4770      	bx	lr

023fedf0 <_ZN9IPAddressD0Ev>:
 23fedf0:	b510      	push	{r4, lr}
 23fedf2:	4604      	mov	r4, r0
 23fedf4:	2118      	movs	r1, #24
 23fedf6:	f7fe fa24 	bl	23fd242 <_ZdlPvj>
 23fedfa:	4620      	mov	r0, r4
 23fedfc:	bd10      	pop	{r4, pc}

023fedfe <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 23fedfe:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
 23fee00:	7d03      	ldrb	r3, [r0, #20]
{
 23fee02:	460e      	mov	r6, r1
	if (address.v==6) {
 23fee04:	2b06      	cmp	r3, #6
 23fee06:	f04f 0400 	mov.w	r4, #0
{
 23fee0a:	b08d      	sub	sp, #52	; 0x34
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fee0c:	f100 0704 	add.w	r7, r0, #4
	if (address.v==6) {
 23fee10:	d012      	beq.n	23fee38 <_ZNK9IPAddress7printToER5Print+0x3a>
 23fee12:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
 23fee16:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 23fee1a:	220a      	movs	r2, #10
 23fee1c:	4630      	mov	r0, r6
 23fee1e:	f000 f944 	bl	23ff0aa <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 23fee22:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 23fee24:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
 23fee26:	d019      	beq.n	23fee5c <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
 23fee28:	2c00      	cmp	r4, #0
 23fee2a:	d0f4      	beq.n	23fee16 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
 23fee2c:	212e      	movs	r1, #46	; 0x2e
 23fee2e:	4630      	mov	r0, r6
 23fee30:	f000 f938 	bl	23ff0a4 <_ZN5Print5printEc>
 23fee34:	4404      	add	r4, r0
 23fee36:	e7ee      	b.n	23fee16 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fee38:	232f      	movs	r3, #47	; 0x2f
 23fee3a:	466a      	mov	r2, sp
 23fee3c:	4639      	mov	r1, r7
 23fee3e:	200a      	movs	r0, #10
		buf[0] = 0;
 23fee40:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
 23fee44:	f7ff f91e 	bl	23fe084 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
 23fee48:	4668      	mov	r0, sp
 23fee4a:	f7fe f9d1 	bl	23fd1f0 <strlen>
 23fee4e:	6833      	ldr	r3, [r6, #0]
 23fee50:	4602      	mov	r2, r0
 23fee52:	4669      	mov	r1, sp
 23fee54:	4630      	mov	r0, r6
 23fee56:	68db      	ldr	r3, [r3, #12]
 23fee58:	4798      	blx	r3
 23fee5a:	4604      	mov	r4, r0
    }
    return n;
}
 23fee5c:	4620      	mov	r0, r4
 23fee5e:	b00d      	add	sp, #52	; 0x34
 23fee60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

023fee64 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
 23fee64:	b510      	push	{r4, lr}
 23fee66:	4604      	mov	r4, r0
 23fee68:	4b04      	ldr	r3, [pc, #16]	; (23fee7c <_ZN9IPAddressC1Ev+0x18>)
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 23fee6a:	2211      	movs	r2, #17
 23fee6c:	2100      	movs	r1, #0
 23fee6e:	f840 3b04 	str.w	r3, [r0], #4
 23fee72:	f000 fe9b 	bl	23ffbac <memset>
}
 23fee76:	4620      	mov	r0, r4
 23fee78:	bd10      	pop	{r4, pc}
 23fee7a:	bf00      	nop
 23fee7c:	023ffe30 	.word	0x023ffe30

023fee80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
 23fee80:	4603      	mov	r3, r0
 23fee82:	4a07      	ldr	r2, [pc, #28]	; (23feea0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
 23fee84:	b510      	push	{r4, lr}
 23fee86:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
 23fee8a:	f101 0210 	add.w	r2, r1, #16
 23fee8e:	f851 4b04 	ldr.w	r4, [r1], #4
 23fee92:	4291      	cmp	r1, r2
 23fee94:	f843 4b04 	str.w	r4, [r3], #4
 23fee98:	d1f9      	bne.n	23fee8e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
 23fee9a:	780a      	ldrb	r2, [r1, #0]
 23fee9c:	701a      	strb	r2, [r3, #0]
}
 23fee9e:	bd10      	pop	{r4, pc}
 23feea0:	023ffe30 	.word	0x023ffe30

023feea4 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
 23feea4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 23feea6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 23feeaa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 23feeae:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
        address.v = version;
 23feeb2:	2304      	movs	r3, #4
 23feeb4:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 23feeb8:	6041      	str	r1, [r0, #4]
 23feeba:	7503      	strb	r3, [r0, #20]
}
 23feebc:	bd10      	pop	{r4, pc}
	...

023feec0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
 23feec0:	b507      	push	{r0, r1, r2, lr}
 23feec2:	4b06      	ldr	r3, [pc, #24]	; (23feedc <_ZN9IPAddressC1EPKh+0x1c>)
 23feec4:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
 23feec6:	78cb      	ldrb	r3, [r1, #3]
 23feec8:	9300      	str	r3, [sp, #0]
 23feeca:	788b      	ldrb	r3, [r1, #2]
 23feecc:	784a      	ldrb	r2, [r1, #1]
 23feece:	7809      	ldrb	r1, [r1, #0]
 23feed0:	f7ff ffe8 	bl	23feea4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 23feed4:	b003      	add	sp, #12
 23feed6:	f85d fb04 	ldr.w	pc, [sp], #4
 23feeda:	bf00      	nop
 23feedc:	023ffe30 	.word	0x023ffe30

023feee0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 23feee0:	4b01      	ldr	r3, [pc, #4]	; (23feee8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 23feee2:	4a02      	ldr	r2, [pc, #8]	; (23feeec <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 23feee4:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
 23feee6:	4770      	bx	lr
 23feee8:	1007ae8c 	.word	0x1007ae8c
 23feeec:	023ffe3c 	.word	0x023ffe3c

023feef0 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 23feef0:	2300      	movs	r3, #0
 23feef2:	6840      	ldr	r0, [r0, #4]
 23feef4:	461a      	mov	r2, r3
 23feef6:	f7ff babd 	b.w	23fe474 <network_connect>

023feefa <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 23feefa:	2200      	movs	r2, #0
 23feefc:	2102      	movs	r1, #2
 23feefe:	6840      	ldr	r0, [r0, #4]
 23fef00:	f7ff bad4 	b.w	23fe4ac <network_disconnect>

023fef04 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 23fef04:	2200      	movs	r2, #0
 23fef06:	6840      	ldr	r0, [r0, #4]
 23fef08:	4611      	mov	r1, r2
 23fef0a:	f7ff bac1 	b.w	23fe490 <network_connecting>

023fef0e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 23fef0e:	2200      	movs	r2, #0
 23fef10:	6840      	ldr	r0, [r0, #4]
 23fef12:	4611      	mov	r1, r2
 23fef14:	f7ff bad8 	b.w	23fe4c8 <network_ready>

023fef18 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 23fef18:	2300      	movs	r3, #0
 23fef1a:	6840      	ldr	r0, [r0, #4]
 23fef1c:	461a      	mov	r2, r3
 23fef1e:	4619      	mov	r1, r3
 23fef20:	f7ff bae0 	b.w	23fe4e4 <network_on>

023fef24 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 23fef24:	2300      	movs	r3, #0
 23fef26:	6840      	ldr	r0, [r0, #4]
 23fef28:	461a      	mov	r2, r3
 23fef2a:	4619      	mov	r1, r3
 23fef2c:	f7ff bae8 	b.w	23fe500 <network_off>

023fef30 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
 23fef30:	2100      	movs	r1, #0
 23fef32:	6840      	ldr	r0, [r0, #4]
 23fef34:	f7ff bb2a 	b.w	23fe58c <network_is_on>

023fef38 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
 23fef38:	2100      	movs	r1, #0
 23fef3a:	6840      	ldr	r0, [r0, #4]
 23fef3c:	f7ff bb34 	b.w	23fe5a8 <network_is_off>

023fef40 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 23fef40:	2200      	movs	r2, #0
 23fef42:	6840      	ldr	r0, [r0, #4]
 23fef44:	f081 0101 	eor.w	r1, r1, #1
 23fef48:	f7ff bae8 	b.w	23fe51c <network_listen>

023fef4c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 23fef4c:	2200      	movs	r2, #0
 23fef4e:	6840      	ldr	r0, [r0, #4]
 23fef50:	f7ff bb00 	b.w	23fe554 <network_set_listen_timeout>

023fef54 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 23fef54:	2200      	movs	r2, #0
 23fef56:	6840      	ldr	r0, [r0, #4]
 23fef58:	4611      	mov	r1, r2
 23fef5a:	f7ff bb09 	b.w	23fe570 <network_get_listen_timeout>

023fef5e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 23fef5e:	2200      	movs	r2, #0
 23fef60:	6840      	ldr	r0, [r0, #4]
 23fef62:	4611      	mov	r1, r2
 23fef64:	f7ff bae8 	b.w	23fe538 <network_listening>

023fef68 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 23fef68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 23fef6c:	b095      	sub	sp, #84	; 0x54
 23fef6e:	4614      	mov	r4, r2
 23fef70:	460d      	mov	r5, r1
 23fef72:	4607      	mov	r7, r0
    IPAddress addr;
 23fef74:	f7ff ff76 	bl	23fee64 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
 23fef78:	2100      	movs	r1, #0
    struct addrinfo hints = {};
 23fef7a:	221c      	movs	r2, #28
 23fef7c:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
 23fef7e:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
 23fef80:	f000 fe14 	bl	23ffbac <memset>
    hints.ai_flags = AI_ADDRCONFIG;
 23fef84:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef86:	4620      	mov	r0, r4
    hints.ai_flags = AI_ADDRCONFIG;
 23fef88:	930c      	str	r3, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
 23fef8a:	2100      	movs	r1, #0
 23fef8c:	466b      	mov	r3, sp
 23fef8e:	aa0c      	add	r2, sp, #48	; 0x30
 23fef90:	f7ff f894 	bl	23fe0bc <netdb_getaddrinfo>
    if (!r) {
 23fef94:	4604      	mov	r4, r0
 23fef96:	2800      	cmp	r0, #0
 23fef98:	d14b      	bne.n	23ff032 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fef9a:	4602      	mov	r2, r0
 23fef9c:	2101      	movs	r1, #1
 23fef9e:	6868      	ldr	r0, [r5, #4]
 23fefa0:	f7ff fa92 	bl	23fe4c8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefa4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
 23fefa6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefa8:	4622      	mov	r2, r4
 23fefaa:	6868      	ldr	r0, [r5, #4]
 23fefac:	f7ff fa8c 	bl	23fe4c8 <network_ready>
        bool ok = false;
 23fefb0:	4621      	mov	r1, r4
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
 23fefb2:	4681      	mov	r9, r0
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefb4:	9e00      	ldr	r6, [sp, #0]
 23fefb6:	2e00      	cmp	r6, #0
 23fefb8:	d03b      	beq.n	23ff032 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
 23fefba:	2900      	cmp	r1, #0
 23fefbc:	d139      	bne.n	23ff032 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
 23fefbe:	6873      	ldr	r3, [r6, #4]
 23fefc0:	2b02      	cmp	r3, #2
 23fefc2:	d003      	beq.n	23fefcc <_ZN5spark12NetworkClass7resolveEPKc+0x64>
 23fefc4:	2b0a      	cmp	r3, #10
 23fefc6:	d011      	beq.n	23fefec <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
 23fefc8:	69f6      	ldr	r6, [r6, #28]
 23fefca:	e7f4      	b.n	23fefb6 <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
 23fefcc:	f1b8 0f00 	cmp.w	r8, #0
 23fefd0:	d0fa      	beq.n	23fefc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
 23fefd2:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
 23fefd4:	a806      	add	r0, sp, #24
 23fefd6:	3104      	adds	r1, #4
class IPAddress : public Printable {
 23fefd8:	1d3c      	adds	r4, r7, #4
 23fefda:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
 23fefdc:	f7ff ff70 	bl	23feec0 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
 23fefe0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23fefe2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23fefe4:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23fefe6:	4641      	mov	r1, r8
 23fefe8:	7023      	strb	r3, [r4, #0]
        return *this = IPAddress(address);
 23fefea:	e7ed      	b.n	23fefc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
 23fefec:	f1b9 0f00 	cmp.w	r9, #0
 23feff0:	d0ea      	beq.n	23fefc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
 23feff2:	2210      	movs	r2, #16
 23feff4:	a801      	add	r0, sp, #4
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
 23feff6:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
 23feff8:	f000 fdd8 	bl	23ffbac <memset>
                    a.v = 6;
 23feffc:	2306      	movs	r3, #6
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23feffe:	ad01      	add	r5, sp, #4
                    a.v = 6;
 23ff000:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
 23ff004:	f104 0308 	add.w	r3, r4, #8
 23ff008:	3418      	adds	r4, #24
 23ff00a:	462a      	mov	r2, r5
 23ff00c:	6818      	ldr	r0, [r3, #0]
 23ff00e:	6859      	ldr	r1, [r3, #4]
 23ff010:	3308      	adds	r3, #8
 23ff012:	c203      	stmia	r2!, {r0, r1}
 23ff014:	42a3      	cmp	r3, r4
 23ff016:	4615      	mov	r5, r2
 23ff018:	d1f7      	bne.n	23ff00a <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
 23ff01a:	a901      	add	r1, sp, #4
 23ff01c:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
 23ff01e:	1d3c      	adds	r4, r7, #4
 23ff020:	ad07      	add	r5, sp, #28
 23ff022:	f7ff ff2d 	bl	23fee80 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
 23ff026:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 23ff028:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 23ff02a:	682b      	ldr	r3, [r5, #0]
                    ok = true;
 23ff02c:	4649      	mov	r1, r9
 23ff02e:	7023      	strb	r3, [r4, #0]
                    break;
 23ff030:	e7ca      	b.n	23fefc8 <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                }
            }
        }
    }
    freeaddrinfo(ai);
 23ff032:	9800      	ldr	r0, [sp, #0]
 23ff034:	f7ff f834 	bl	23fe0a0 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 23ff038:	4638      	mov	r0, r7
 23ff03a:	b015      	add	sp, #84	; 0x54
 23ff03c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

023ff040 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 23ff040:	4b02      	ldr	r3, [pc, #8]	; (23ff04c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 23ff042:	4a03      	ldr	r2, [pc, #12]	; (23ff050 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 23ff044:	601a      	str	r2, [r3, #0]
 23ff046:	2200      	movs	r2, #0
 23ff048:	605a      	str	r2, [r3, #4]
    network_free_configuration(c, count, nullptr);
    return res;
}
#endif // HAL_USE_SOCKET_HAL_POSIX

} // spark
 23ff04a:	4770      	bx	lr
 23ff04c:	1007ae90 	.word	0x1007ae90
 23ff050:	023ffe48 	.word	0x023ffe48

023ff054 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 23ff054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 23ff056:	4606      	mov	r6, r0
 23ff058:	460d      	mov	r5, r1
  size_t n = 0;
 23ff05a:	2400      	movs	r4, #0
 23ff05c:	188f      	adds	r7, r1, r2
  while (size--) {
 23ff05e:	42bd      	cmp	r5, r7
 23ff060:	d00c      	beq.n	23ff07c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 23ff062:	6833      	ldr	r3, [r6, #0]
 23ff064:	4630      	mov	r0, r6
 23ff066:	689b      	ldr	r3, [r3, #8]
 23ff068:	f815 1b01 	ldrb.w	r1, [r5], #1
 23ff06c:	4798      	blx	r3
     if (chunk>=0)
 23ff06e:	1e03      	subs	r3, r0, #0
 23ff070:	db01      	blt.n	23ff076 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 23ff072:	441c      	add	r4, r3
  while (size--) {
 23ff074:	e7f3      	b.n	23ff05e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 23ff076:	2c00      	cmp	r4, #0
 23ff078:	bf08      	it	eq
 23ff07a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
 23ff07c:	4620      	mov	r0, r4
 23ff07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

023ff080 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 23ff080:	b513      	push	{r0, r1, r4, lr}
 23ff082:	4604      	mov	r4, r0
    }
 23ff084:	4608      	mov	r0, r1
      if (str == NULL) return 0;
 23ff086:	b159      	cbz	r1, 23ff0a0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
 23ff088:	9101      	str	r1, [sp, #4]
 23ff08a:	f7fe f8b1 	bl	23fd1f0 <strlen>
 23ff08e:	4602      	mov	r2, r0
 23ff090:	4620      	mov	r0, r4
 23ff092:	6823      	ldr	r3, [r4, #0]
 23ff094:	9901      	ldr	r1, [sp, #4]
 23ff096:	68db      	ldr	r3, [r3, #12]
    }
 23ff098:	b002      	add	sp, #8
 23ff09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
 23ff09e:	4718      	bx	r3
    }
 23ff0a0:	b002      	add	sp, #8
 23ff0a2:	bd10      	pop	{r4, pc}

023ff0a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 23ff0a4:	6803      	ldr	r3, [r0, #0]
 23ff0a6:	689b      	ldr	r3, [r3, #8]
 23ff0a8:	4718      	bx	r3

023ff0aa <_ZN5Print11printNumberEmh>:

size_t Print::printNumber(unsigned long n, uint8_t base) {
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 23ff0aa:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 23ff0ac:	2a01      	cmp	r2, #1
 23ff0ae:	bf98      	it	ls
 23ff0b0:	220a      	movls	r2, #10
size_t Print::printNumber(unsigned long n, uint8_t base) {
 23ff0b2:	b530      	push	{r4, r5, lr}
 23ff0b4:	b08b      	sub	sp, #44	; 0x2c
  *str = '\0';
 23ff0b6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
 23ff0ba:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
 23ff0bc:	460d      	mov	r5, r1
 23ff0be:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
 23ff0c2:	fb01 5312 	mls	r3, r1, r2, r5
 23ff0c6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff0ca:	2b09      	cmp	r3, #9
 23ff0cc:	bf94      	ite	ls
 23ff0ce:	3330      	addls	r3, #48	; 0x30
 23ff0d0:	3337      	addhi	r3, #55	; 0x37
 23ff0d2:	b2db      	uxtb	r3, r3
  } while(n);
 23ff0d4:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
 23ff0d6:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
 23ff0da:	d9ef      	bls.n	23ff0bc <_ZN5Print11printNumberEmh+0x12>

  return write(str);
 23ff0dc:	4621      	mov	r1, r4
 23ff0de:	f7ff ffcf 	bl	23ff080 <_ZN5Print5writeEPKc>
}
 23ff0e2:	b00b      	add	sp, #44	; 0x2c
 23ff0e4:	bd30      	pop	{r4, r5, pc}
	...

023ff0e8 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
 23ff0e8:	2200      	movs	r2, #0
 23ff0ea:	4b01      	ldr	r3, [pc, #4]	; (23ff0f0 <_GLOBAL__sub_I_RGB+0x8>)
 23ff0ec:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
 23ff0ee:	4770      	bx	lr
 23ff0f0:	1007ae98 	.word	0x1007ae98

023ff0f4 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
 23ff0f4:	b510      	push	{r4, lr}
 23ff0f6:	4604      	mov	r4, r0
 23ff0f8:	4608      	mov	r0, r1
{
    _spi = spi;
 23ff0fa:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
 23ff0fc:	f7fe ffec 	bl	23fe0d8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff100:	2300      	movs	r3, #0
}
 23ff102:	4620      	mov	r0, r4
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
 23ff104:	6063      	str	r3, [r4, #4]
}
 23ff106:	bd10      	pop	{r4, pc}

023ff108 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 23ff108:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 23ff10c:	ec57 6b10 	vmov	r6, r7, d0
 23ff110:	4680      	mov	r8, r0
 23ff112:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
 23ff114:	2200      	movs	r2, #0
 23ff116:	2300      	movs	r3, #0
 23ff118:	ee10 0a10 	vmov	r0, s0
 23ff11c:	4639      	mov	r1, r7
 23ff11e:	f7fd fe71 	bl	23fce04 <__aeabi_dcmplt>
 23ff122:	b128      	cbz	r0, 23ff130 <_Z4dtoadhPc+0x28>
        val = -val;
 23ff124:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 23ff128:	461f      	mov	r7, r3
        *sout++ = '-';
 23ff12a:	232d      	movs	r3, #45	; 0x2d
 23ff12c:	f804 3b01 	strb.w	r3, [r4], #1
 23ff130:	2300      	movs	r3, #0
    }
    long scale = 1;
 23ff132:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 23ff136:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
 23ff138:	b2d9      	uxtb	r1, r3
 23ff13a:	4588      	cmp	r8, r1
 23ff13c:	d903      	bls.n	23ff146 <_Z4dtoadhPc+0x3e>
        scale *= 10;
 23ff13e:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
 23ff142:	3301      	adds	r3, #1
 23ff144:	e7f8      	b.n	23ff138 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
 23ff146:	4648      	mov	r0, r9
 23ff148:	f7fd fb80 	bl	23fc84c <__aeabi_i2d>
 23ff14c:	4632      	mov	r2, r6
 23ff14e:	463b      	mov	r3, r7
 23ff150:	f7fd fbe6 	bl	23fc920 <__aeabi_dmul>
 23ff154:	4606      	mov	r6, r0
 23ff156:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
 23ff158:	f7fd feb4 	bl	23fcec4 <__aeabi_d2ulz>
 23ff15c:	468a      	mov	sl, r1
 23ff15e:	4605      	mov	r5, r0
 23ff160:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
 23ff162:	f7fd fba7 	bl	23fc8b4 <__aeabi_ul2d>
 23ff166:	4602      	mov	r2, r0
 23ff168:	460b      	mov	r3, r1
 23ff16a:	4630      	mov	r0, r6
 23ff16c:	4639      	mov	r1, r7
 23ff16e:	f7fd fa1f 	bl	23fc5b0 <__aeabi_dsub>
 23ff172:	2200      	movs	r2, #0
 23ff174:	4b13      	ldr	r3, [pc, #76]	; (23ff1c4 <_Z4dtoadhPc+0xbc>)
 23ff176:	f7fd fe59 	bl	23fce2c <__aeabi_dcmpge>
 23ff17a:	b110      	cbz	r0, 23ff182 <_Z4dtoadhPc+0x7a>
        fixed++;
 23ff17c:	3501      	adds	r5, #1
 23ff17e:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
 23ff182:	464a      	mov	r2, r9
 23ff184:	4628      	mov	r0, r5
 23ff186:	4659      	mov	r1, fp
 23ff188:	17d3      	asrs	r3, r2, #31
 23ff18a:	f7fd fe83 	bl	23fce94 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 23ff18e:	2301      	movs	r3, #1
 23ff190:	4615      	mov	r5, r2
 23ff192:	4621      	mov	r1, r4
 23ff194:	220a      	movs	r2, #10
 23ff196:	f000 faa6 	bl	23ff6e6 <ultoa>
    if (prec) {
 23ff19a:	f1b8 0f00 	cmp.w	r8, #0
 23ff19e:	d00e      	beq.n	23ff1be <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
 23ff1a0:	4620      	mov	r0, r4
 23ff1a2:	f7fe f825 	bl	23fd1f0 <strlen>
        *sout++ = '.';
 23ff1a6:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
 23ff1a8:	1821      	adds	r1, r4, r0
        *sout++ = '.';
 23ff1aa:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
 23ff1ac:	220a      	movs	r2, #10
 23ff1ae:	4643      	mov	r3, r8
 23ff1b0:	4628      	mov	r0, r5
 23ff1b2:	3101      	adds	r1, #1
    }
}
 23ff1b4:	b001      	add	sp, #4
 23ff1b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
 23ff1ba:	f000 ba94 	b.w	23ff6e6 <ultoa>
}
 23ff1be:	b001      	add	sp, #4
 23ff1c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 23ff1c4:	3fe00000 	.word	0x3fe00000

023ff1c8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 23ff1c8:	b510      	push	{r4, lr}
 23ff1ca:	4604      	mov	r4, r0
{
	free(buffer);
 23ff1cc:	6800      	ldr	r0, [r0, #0]
 23ff1ce:	f7ff fa07 	bl	23fe5e0 <free>
}
 23ff1d2:	4620      	mov	r0, r4
 23ff1d4:	bd10      	pop	{r4, pc}

023ff1d6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 23ff1d6:	b510      	push	{r4, lr}
 23ff1d8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 23ff1da:	6800      	ldr	r0, [r0, #0]
 23ff1dc:	b108      	cbz	r0, 23ff1e2 <_ZN6String10invalidateEv+0xc>
 23ff1de:	f7ff f9ff 	bl	23fe5e0 <free>
	buffer = NULL;
 23ff1e2:	2300      	movs	r3, #0
	capacity = len = 0;
 23ff1e4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
 23ff1e8:	6023      	str	r3, [r4, #0]
}
 23ff1ea:	bd10      	pop	{r4, pc}

023ff1ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 23ff1ec:	b538      	push	{r3, r4, r5, lr}
 23ff1ee:	4604      	mov	r4, r0
 23ff1f0:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 23ff1f2:	6800      	ldr	r0, [r0, #0]
 23ff1f4:	3101      	adds	r1, #1
 23ff1f6:	f7ff fa01 	bl	23fe5fc <realloc>
	if (newbuffer) {
 23ff1fa:	b110      	cbz	r0, 23ff202 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 23ff1fc:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
 23ff200:	2001      	movs	r0, #1
	}
	return 0;
}
 23ff202:	bd38      	pop	{r3, r4, r5, pc}

023ff204 <_ZN6String7reserveEj>:
{
 23ff204:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 23ff206:	6803      	ldr	r3, [r0, #0]
{
 23ff208:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 23ff20a:	b123      	cbz	r3, 23ff216 <_ZN6String7reserveEj+0x12>
 23ff20c:	6843      	ldr	r3, [r0, #4]
 23ff20e:	428b      	cmp	r3, r1
 23ff210:	d301      	bcc.n	23ff216 <_ZN6String7reserveEj+0x12>
 23ff212:	2001      	movs	r0, #1
}
 23ff214:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
 23ff216:	4620      	mov	r0, r4
 23ff218:	f7ff ffe8 	bl	23ff1ec <_ZN6String12changeBufferEj>
 23ff21c:	2800      	cmp	r0, #0
 23ff21e:	d0f9      	beq.n	23ff214 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
 23ff220:	68a3      	ldr	r3, [r4, #8]
 23ff222:	2b00      	cmp	r3, #0
 23ff224:	d1f5      	bne.n	23ff212 <_ZN6String7reserveEj+0xe>
 23ff226:	6822      	ldr	r2, [r4, #0]
 23ff228:	7013      	strb	r3, [r2, #0]
 23ff22a:	e7f2      	b.n	23ff212 <_ZN6String7reserveEj+0xe>

023ff22c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 23ff22c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff22e:	460d      	mov	r5, r1
	if (!reserve(length)) {
 23ff230:	4611      	mov	r1, r2
 23ff232:	9201      	str	r2, [sp, #4]
{
 23ff234:	4604      	mov	r4, r0
	if (!reserve(length)) {
 23ff236:	f7ff ffe5 	bl	23ff204 <_ZN6String7reserveEj>
 23ff23a:	9a01      	ldr	r2, [sp, #4]
 23ff23c:	b928      	cbnz	r0, 23ff24a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
 23ff23e:	4620      	mov	r0, r4
 23ff240:	f7ff ffc9 	bl	23ff1d6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
 23ff244:	4620      	mov	r0, r4
 23ff246:	b003      	add	sp, #12
 23ff248:	bd30      	pop	{r4, r5, pc}
	memcpy(buffer, cstr, length);
 23ff24a:	4629      	mov	r1, r5
	len = length;
 23ff24c:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
 23ff24e:	6820      	ldr	r0, [r4, #0]
 23ff250:	f000 fc9f 	bl	23ffb92 <memcpy>
	buffer[len] = 0;
 23ff254:	2100      	movs	r1, #0
 23ff256:	6822      	ldr	r2, [r4, #0]
 23ff258:	68a3      	ldr	r3, [r4, #8]
 23ff25a:	54d1      	strb	r1, [r2, r3]
	return *this;
 23ff25c:	e7f2      	b.n	23ff244 <_ZN6String4copyEPKcj+0x18>

023ff25e <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
 23ff25e:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
 23ff260:	b513      	push	{r0, r1, r4, lr}
 23ff262:	4604      	mov	r4, r0
	capacity = 0;
 23ff264:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
 23ff268:	6083      	str	r3, [r0, #8]
	flags = 0;
 23ff26a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
 23ff26c:	b141      	cbz	r1, 23ff280 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
 23ff26e:	4608      	mov	r0, r1
 23ff270:	9101      	str	r1, [sp, #4]
 23ff272:	f7fd ffbd 	bl	23fd1f0 <strlen>
 23ff276:	9901      	ldr	r1, [sp, #4]
 23ff278:	4602      	mov	r2, r0
 23ff27a:	4620      	mov	r0, r4
 23ff27c:	f7ff ffd6 	bl	23ff22c <_ZN6String4copyEPKcj>
}
 23ff280:	4620      	mov	r0, r4
 23ff282:	b002      	add	sp, #8
 23ff284:	bd10      	pop	{r4, pc}

023ff286 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 23ff286:	b513      	push	{r0, r1, r4, lr}
 23ff288:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
 23ff28a:	b159      	cbz	r1, 23ff2a4 <_ZN6StringaSEPKc+0x1e>
 23ff28c:	4608      	mov	r0, r1
 23ff28e:	9101      	str	r1, [sp, #4]
 23ff290:	f7fd ffae 	bl	23fd1f0 <strlen>
 23ff294:	9901      	ldr	r1, [sp, #4]
 23ff296:	4602      	mov	r2, r0
 23ff298:	4620      	mov	r0, r4
 23ff29a:	f7ff ffc7 	bl	23ff22c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
 23ff29e:	4620      	mov	r0, r4
 23ff2a0:	b002      	add	sp, #8
 23ff2a2:	bd10      	pop	{r4, pc}
	else invalidate();
 23ff2a4:	f7ff ff97 	bl	23ff1d6 <_ZN6String10invalidateEv>
 23ff2a8:	e7f9      	b.n	23ff29e <_ZN6StringaSEPKc+0x18>

023ff2aa <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
 23ff2aa:	b510      	push	{r4, lr}
	buffer = NULL;
 23ff2ac:	2300      	movs	r3, #0
String::String(int value, unsigned char base)
 23ff2ae:	4604      	mov	r4, r0
 23ff2b0:	b08a      	sub	sp, #40	; 0x28
	capacity = 0;
 23ff2b2:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23ff2b6:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23ff2b8:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
 23ff2ba:	4608      	mov	r0, r1
	itoa(value, buf, base);
 23ff2bc:	a901      	add	r1, sp, #4
 23ff2be:	f000 fa37 	bl	23ff730 <itoa>
	*this = buf;
 23ff2c2:	4620      	mov	r0, r4
 23ff2c4:	a901      	add	r1, sp, #4
 23ff2c6:	f7ff ffde 	bl	23ff286 <_ZN6StringaSEPKc>
}
 23ff2ca:	4620      	mov	r0, r4
 23ff2cc:	b00a      	add	sp, #40	; 0x28
 23ff2ce:	bd10      	pop	{r4, pc}

023ff2d0 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
 23ff2d0:	b530      	push	{r4, r5, lr}
	buffer = NULL;
 23ff2d2:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
 23ff2d4:	4604      	mov	r4, r0
 23ff2d6:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
 23ff2d8:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
 23ff2dc:	60a3      	str	r3, [r4, #8]
	flags = 0;
 23ff2de:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
 23ff2e0:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
 23ff2e4:	b2cd      	uxtb	r5, r1
 23ff2e6:	f7fd fac3 	bl	23fc870 <__aeabi_f2d>
 23ff2ea:	ec41 0b10 	vmov	d0, r0, r1
 23ff2ee:	4628      	mov	r0, r5
 23ff2f0:	a901      	add	r1, sp, #4
 23ff2f2:	f7ff ff09 	bl	23ff108 <_Z4dtoadhPc>
        *this = buf;
 23ff2f6:	4620      	mov	r0, r4
 23ff2f8:	a901      	add	r1, sp, #4
 23ff2fa:	f7ff ffc4 	bl	23ff286 <_ZN6StringaSEPKc>
}
 23ff2fe:	4620      	mov	r0, r4
 23ff300:	b00b      	add	sp, #44	; 0x2c
 23ff302:	bd30      	pop	{r4, r5, pc}

023ff304 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 23ff304:	b570      	push	{r4, r5, r6, lr}
 23ff306:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 23ff308:	460e      	mov	r6, r1
 23ff30a:	b909      	cbnz	r1, 23ff310 <_ZN6String6concatEPKcj+0xc>
 23ff30c:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 23ff30e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 23ff310:	b16a      	cbz	r2, 23ff32e <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
 23ff312:	6884      	ldr	r4, [r0, #8]
 23ff314:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
 23ff316:	4621      	mov	r1, r4
 23ff318:	f7ff ff74 	bl	23ff204 <_ZN6String7reserveEj>
 23ff31c:	2800      	cmp	r0, #0
 23ff31e:	d0f5      	beq.n	23ff30c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 23ff320:	6828      	ldr	r0, [r5, #0]
 23ff322:	68ab      	ldr	r3, [r5, #8]
 23ff324:	4631      	mov	r1, r6
 23ff326:	4418      	add	r0, r3
 23ff328:	f000 fc76 	bl	23ffc18 <strcpy>
	len = newlen;
 23ff32c:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
 23ff32e:	2001      	movs	r0, #1
 23ff330:	e7ed      	b.n	23ff30e <_ZN6String6concatEPKcj+0xa>

023ff332 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 23ff332:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff334:	688a      	ldr	r2, [r1, #8]
 23ff336:	6809      	ldr	r1, [r1, #0]
{
 23ff338:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 23ff33a:	f7ff ffe3 	bl	23ff304 <_ZN6String6concatEPKcj>
 23ff33e:	b910      	cbnz	r0, 23ff346 <_ZplRK15StringSumHelperRK6String+0x14>
 23ff340:	4620      	mov	r0, r4
 23ff342:	f7ff ff48 	bl	23ff1d6 <_ZN6String10invalidateEv>
	return a;
}
 23ff346:	4620      	mov	r0, r4
 23ff348:	bd10      	pop	{r4, pc}

023ff34a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
 23ff34a:	b510      	push	{r4, lr}
 23ff34c:	4604      	mov	r4, r0
        if (wakeupSource_) {
 23ff34e:	6800      	ldr	r0, [r0, #0]
 23ff350:	b118      	cbz	r0, 23ff35a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
 23ff352:	f7ff f945 	bl	23fe5e0 <free>
            wakeupSource_ = nullptr;
 23ff356:	2300      	movs	r3, #0
 23ff358:	6023      	str	r3, [r4, #0]
        }
    }
 23ff35a:	bd10      	pop	{r4, pc}

023ff35c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
 23ff35c:	b538      	push	{r3, r4, r5, lr}
 23ff35e:	460c      	mov	r4, r1
 23ff360:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
 23ff362:	f7ff fff2 	bl	23ff34a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
 23ff366:	b154      	cbz	r4, 23ff37e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
 23ff368:	8820      	ldrh	r0, [r4, #0]
 23ff36a:	f7ff f92b 	bl	23fe5c4 <malloc>
 23ff36e:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
 23ff370:	b128      	cbz	r0, 23ff37e <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
 23ff372:	4621      	mov	r1, r4
 23ff374:	8822      	ldrh	r2, [r4, #0]
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
 23ff376:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
 23ff37a:	f000 bc0a 	b.w	23ffb92 <memcpy>
    }
 23ff37e:	bd38      	pop	{r3, r4, r5, pc}

023ff380 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 23ff380:	b538      	push	{r3, r4, r5, lr}
 23ff382:	460c      	mov	r4, r1
        error_ = result.error_;
 23ff384:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
 23ff388:	4605      	mov	r5, r0
        error_ = result.error_;
 23ff38a:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
 23ff38c:	f8d1 3006 	ldr.w	r3, [r1, #6]
 23ff390:	f8c0 3006 	str.w	r3, [r0, #6]
 23ff394:	894b      	ldrh	r3, [r1, #10]
 23ff396:	8143      	strh	r3, [r0, #10]
        freeWakeupSourceMemory();
 23ff398:	f7ff ffd7 	bl	23ff34a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
 23ff39c:	6823      	ldr	r3, [r4, #0]
 23ff39e:	b113      	cbz	r3, 23ff3a6 <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
 23ff3a0:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
 23ff3a2:	2300      	movs	r3, #0
 23ff3a4:	6023      	str	r3, [r4, #0]
    }
 23ff3a6:	bd38      	pop	{r3, r4, r5, pc}

023ff3a8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
 23ff3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 23ff3aa:	4d2b      	ldr	r5, [pc, #172]	; (23ff458 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
 23ff3ac:	7d0b      	ldrb	r3, [r1, #20]
 23ff3ae:	4604      	mov	r4, r0
 23ff3b0:	b08b      	sub	sp, #44	; 0x2c
 23ff3b2:	4608      	mov	r0, r1
 23ff3b4:	1daf      	adds	r7, r5, #6
 23ff3b6:	2b00      	cmp	r3, #0
 23ff3b8:	d036      	beq.n	23ff428 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
 23ff3ba:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
 23ff3bc:	791b      	ldrb	r3, [r3, #4]
 23ff3be:	2b00      	cmp	r3, #0
 23ff3c0:	d032      	beq.n	23ff428 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
              error_(SYSTEM_ERROR_NONE) {
 23ff3c2:	2200      	movs	r2, #0
    SleepResult() {}
 23ff3c4:	4b25      	ldr	r3, [pc, #148]	; (23ff45c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
 23ff3c6:	a902      	add	r1, sp, #8
 23ff3c8:	3004      	adds	r0, #4
 23ff3ca:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
 23ff3cc:	e9cd 2202 	strd	r2, r2, [sp, #8]
 23ff3d0:	f7fe ffee 	bl	23fe3b0 <system_sleep_ext>
        compatResult_ = result.compatResult_;
 23ff3d4:	f8dd 300e 	ldr.w	r3, [sp, #14]
        result.setError(static_cast<system_error_t>(ret));
 23ff3d8:	b200      	sxth	r0, r0
 23ff3da:	f8c5 3006 	str.w	r3, [r5, #6]
 23ff3de:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
 23ff3e2:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
 23ff3e6:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 23ff3e8:	9902      	ldr	r1, [sp, #8]
 23ff3ea:	4628      	mov	r0, r5
        compatResult_ = result.compatResult_;
 23ff3ec:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
 23ff3ee:	f7ff ffb5 	bl	23ff35c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
 23ff3f2:	a802      	add	r0, sp, #8
 23ff3f4:	f7ff ffa9 	bl	23ff34a <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
 23ff3f8:	2300      	movs	r3, #0
 23ff3fa:	6023      	str	r3, [r4, #0]
 23ff3fc:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
 23ff3fe:	71a3      	strb	r3, [r4, #6]
 23ff400:	8123      	strh	r3, [r4, #8]
 23ff402:	f64f 73ff 	movw	r3, #65535	; 0xffff
 23ff406:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
 23ff408:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
 23ff40c:	4620      	mov	r0, r4
        error_ = result.error_;
 23ff40e:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
 23ff410:	f8d5 3006 	ldr.w	r3, [r5, #6]
        copyWakeupSource(result.wakeupSource_);
 23ff414:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
 23ff416:	f8c4 3006 	str.w	r3, [r4, #6]
 23ff41a:	88bb      	ldrh	r3, [r7, #4]
 23ff41c:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
 23ff41e:	f7ff ff9d 	bl	23ff35c <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
 23ff422:	4620      	mov	r0, r4
 23ff424:	b00b      	add	sp, #44	; 0x2c
 23ff426:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
 23ff428:	2600      	movs	r6, #0
 23ff42a:	2320      	movs	r3, #32
 23ff42c:	e9cd 3602 	strd	r3, r6, [sp, #8]
 23ff430:	4b0b      	ldr	r3, [pc, #44]	; (23ff460 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
 23ff432:	aa02      	add	r2, sp, #8
 23ff434:	9300      	str	r3, [sp, #0]
 23ff436:	2032      	movs	r0, #50	; 0x32
 23ff438:	4633      	mov	r3, r6
 23ff43a:	490a      	ldr	r1, [pc, #40]	; (23ff464 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
 23ff43c:	f7fe ff2c 	bl	23fe298 <log_message>
            : wakeupSource_(nullptr),
 23ff440:	f64f 62f2 	movw	r2, #65266	; 0xfef2
 23ff444:	4b05      	ldr	r3, [pc, #20]	; (23ff45c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
 23ff446:	4804      	ldr	r0, [pc, #16]	; (23ff458 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
 23ff448:	a902      	add	r1, sp, #8
 23ff44a:	e9cd 2303 	strd	r2, r3, [sp, #12]
              error_(SYSTEM_ERROR_NONE) {
 23ff44e:	9602      	str	r6, [sp, #8]
 23ff450:	f7ff ff96 	bl	23ff380 <_ZN17SystemSleepResultaSEOS_.isra.0>
 23ff454:	e7cd      	b.n	23ff3f2 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
 23ff456:	bf00      	nop
 23ff458:	1007aea8 	.word	0x1007aea8
 23ff45c:	ffff0000 	.word	0xffff0000
 23ff460:	023ffe83 	.word	0x023ffe83
 23ff464:	023ffe7c 	.word	0x023ffe7c

023ff468 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 23ff468:	2202      	movs	r2, #2
 23ff46a:	2000      	movs	r0, #0
 23ff46c:	4b04      	ldr	r3, [pc, #16]	; (23ff480 <_GLOBAL__sub_I_System+0x18>)
 23ff46e:	601a      	str	r2, [r3, #0]
 23ff470:	4b04      	ldr	r3, [pc, #16]	; (23ff484 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
 23ff472:	4a05      	ldr	r2, [pc, #20]	; (23ff488 <_GLOBAL__sub_I_System+0x20>)
              error_(SYSTEM_ERROR_NONE) {
 23ff474:	e9c3 0000 	strd	r0, r0, [r3]
    SleepResult() {}
 23ff478:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 23ff47a:	f7fe bf1b 	b.w	23fe2b4 <set_system_mode>
 23ff47e:	bf00      	nop
 23ff480:	1007aeb4 	.word	0x1007aeb4
 23ff484:	1007aea8 	.word	0x1007aea8
 23ff488:	ffff0000 	.word	0xffff0000

023ff48c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 23ff48c:	4b02      	ldr	r3, [pc, #8]	; (23ff498 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 23ff48e:	681a      	ldr	r2, [r3, #0]
 23ff490:	4b02      	ldr	r3, [pc, #8]	; (23ff49c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 23ff492:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
 23ff494:	4770      	bx	lr
 23ff496:	bf00      	nop
 23ff498:	1007add0 	.word	0x1007add0
 23ff49c:	1007aeb8 	.word	0x1007aeb8

023ff4a0 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
 23ff4a0:	4770      	bx	lr

023ff4a2 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff4a2:	7441      	strb	r1, [r0, #17]
}
 23ff4a4:	4770      	bx	lr

023ff4a6 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
 23ff4a6:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
 23ff4a8:	7c00      	ldrb	r0, [r0, #16]
 23ff4aa:	f7fe fe85 	bl	23fe1b8 <hal_usart_available_data_for_write>
}
 23ff4ae:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff4b2:	bd08      	pop	{r3, pc}

023ff4b4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 23ff4b4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
 23ff4b6:	7c00      	ldrb	r0, [r0, #16]
 23ff4b8:	f7fe fe38 	bl	23fe12c <hal_usart_available>
}
 23ff4bc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff4c0:	bd08      	pop	{r3, pc}

023ff4c2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 23ff4c2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
 23ff4c4:	7c00      	ldrb	r0, [r0, #16]
 23ff4c6:	f7fe fe4d 	bl	23fe164 <hal_usart_peek>
}
 23ff4ca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff4ce:	bd08      	pop	{r3, pc}

023ff4d0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 23ff4d0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
 23ff4d2:	7c00      	ldrb	r0, [r0, #16]
 23ff4d4:	f7fe fe38 	bl	23fe148 <hal_usart_read>
}
 23ff4d8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff4dc:	bd08      	pop	{r3, pc}

023ff4de <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
 23ff4de:	7c00      	ldrb	r0, [r0, #16]
 23ff4e0:	f7fe be4e 	b.w	23fe180 <hal_usart_flush>

023ff4e4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 23ff4e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff4e6:	7c45      	ldrb	r5, [r0, #17]
{
 23ff4e8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff4ea:	b12d      	cbz	r5, 23ff4f8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
 23ff4ec:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 23ff4ee:	b003      	add	sp, #12
 23ff4f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
 23ff4f4:	f7fe be0c 	b.w	23fe110 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
 23ff4f8:	7c00      	ldrb	r0, [r0, #16]
 23ff4fa:	9101      	str	r1, [sp, #4]
 23ff4fc:	f7fe fe5c 	bl	23fe1b8 <hal_usart_available_data_for_write>
 23ff500:	2800      	cmp	r0, #0
 23ff502:	9901      	ldr	r1, [sp, #4]
 23ff504:	dcf2      	bgt.n	23ff4ec <_ZN11USARTSerial5writeEh+0x8>
}
 23ff506:	4628      	mov	r0, r5
 23ff508:	b003      	add	sp, #12
 23ff50a:	bd30      	pop	{r4, r5, pc}

023ff50c <_ZN11USARTSerialD0Ev>:
 23ff50c:	b510      	push	{r4, lr}
 23ff50e:	4604      	mov	r4, r0
 23ff510:	2114      	movs	r1, #20
 23ff512:	f7fd fe96 	bl	23fd242 <_ZdlPvj>
 23ff516:	4620      	mov	r0, r4
 23ff518:	bd10      	pop	{r4, pc}
	...

023ff51c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff51c:	b510      	push	{r4, lr}
 23ff51e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff522:	4604      	mov	r4, r0
 23ff524:	4608      	mov	r0, r1
 23ff526:	4611      	mov	r1, r2
 23ff528:	2200      	movs	r2, #0
 23ff52a:	e9c4 2301 	strd	r2, r3, [r4, #4]
 23ff52e:	4b04      	ldr	r3, [pc, #16]	; (23ff540 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
  _serial = serial;
 23ff530:	7420      	strb	r0, [r4, #16]
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
 23ff532:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff534:	2301      	movs	r3, #1
 23ff536:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
 23ff538:	f7fe fe4c 	bl	23fe1d4 <hal_usart_init_ex>
}
 23ff53c:	4620      	mov	r0, r4
 23ff53e:	bd10      	pop	{r4, pc}
 23ff540:	023ffed0 	.word	0x023ffed0

023ff544 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return hal_usart_is_enabled(_serial);
 23ff544:	7c00      	ldrb	r0, [r0, #16]
 23ff546:	f7fe be29 	b.w	23fe19c <hal_usart_is_enabled>

023ff54a <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 23ff54a:	7441      	strb	r1, [r0, #17]
}
 23ff54c:	4770      	bx	lr

023ff54e <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff54e:	4770      	bx	lr

023ff550 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 23ff550:	4770      	bx	lr

023ff552 <_ZN9USBSerial4readEv>:
{
 23ff552:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 23ff554:	2100      	movs	r1, #0
 23ff556:	7c00      	ldrb	r0, [r0, #16]
 23ff558:	f7fe fe74 	bl	23fe244 <HAL_USB_USART_Receive_Data>
}
 23ff55c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff560:	bd08      	pop	{r3, pc}

023ff562 <_ZN9USBSerial4peekEv>:
{
 23ff562:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 23ff564:	2101      	movs	r1, #1
 23ff566:	7c00      	ldrb	r0, [r0, #16]
 23ff568:	f7fe fe6c 	bl	23fe244 <HAL_USB_USART_Receive_Data>
}
 23ff56c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
 23ff570:	bd08      	pop	{r3, pc}

023ff572 <_ZN9USBSerial17availableForWriteEv>:
{
 23ff572:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 23ff574:	7c00      	ldrb	r0, [r0, #16]
 23ff576:	f7fe fe57 	bl	23fe228 <HAL_USB_USART_Available_Data_For_Write>
}
 23ff57a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff57e:	bd08      	pop	{r3, pc}

023ff580 <_ZN9USBSerial9availableEv>:
{
 23ff580:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 23ff582:	7c00      	ldrb	r0, [r0, #16]
 23ff584:	f7fe fe42 	bl	23fe20c <HAL_USB_USART_Available_Data>
}
 23ff588:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 23ff58c:	bd08      	pop	{r3, pc}

023ff58e <_ZN9USBSerial5writeEh>:
{
 23ff58e:	b513      	push	{r0, r1, r4, lr}
 23ff590:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff592:	7c00      	ldrb	r0, [r0, #16]
{
 23ff594:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 23ff596:	f7fe fe47 	bl	23fe228 <HAL_USB_USART_Available_Data_For_Write>
 23ff59a:	2800      	cmp	r0, #0
 23ff59c:	9901      	ldr	r1, [sp, #4]
 23ff59e:	dc01      	bgt.n	23ff5a4 <_ZN9USBSerial5writeEh+0x16>
 23ff5a0:	7c60      	ldrb	r0, [r4, #17]
 23ff5a2:	b120      	cbz	r0, 23ff5ae <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 23ff5a4:	7c20      	ldrb	r0, [r4, #16]
 23ff5a6:	f7fe fe5b 	bl	23fe260 <HAL_USB_USART_Send_Data>
 23ff5aa:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
 23ff5ae:	b002      	add	sp, #8
 23ff5b0:	bd10      	pop	{r4, pc}

023ff5b2 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
 23ff5b2:	7c00      	ldrb	r0, [r0, #16]
 23ff5b4:	f7fe be62 	b.w	23fe27c <HAL_USB_USART_Flush_Data>

023ff5b8 <_ZN9USBSerialD0Ev>:
 23ff5b8:	b510      	push	{r4, lr}
 23ff5ba:	4604      	mov	r4, r0
 23ff5bc:	2114      	movs	r1, #20
 23ff5be:	f7fd fe40 	bl	23fd242 <_ZdlPvj>
 23ff5c2:	4620      	mov	r0, r4
 23ff5c4:	bd10      	pop	{r4, pc}
	...

023ff5c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff5c8:	b510      	push	{r4, lr}
 23ff5ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 23ff5ce:	4604      	mov	r4, r0
 23ff5d0:	4608      	mov	r0, r1
 23ff5d2:	2100      	movs	r1, #0
 23ff5d4:	e9c4 1301 	strd	r1, r3, [r4, #4]
 23ff5d8:	4b04      	ldr	r3, [pc, #16]	; (23ff5ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
  _serial = serial;
 23ff5da:	7420      	strb	r0, [r4, #16]
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 23ff5dc:	6023      	str	r3, [r4, #0]
  _blocking = true;
 23ff5de:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
 23ff5e0:	4611      	mov	r1, r2
  _blocking = true;
 23ff5e2:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
 23ff5e4:	f7fe fe04 	bl	23fe1f0 <HAL_USB_USART_Init>
}
 23ff5e8:	4620      	mov	r0, r4
 23ff5ea:	bd10      	pop	{r4, pc}
 23ff5ec:	023fff00 	.word	0x023fff00

023ff5f0 <_Z19acquireSerialBufferv>:
{
 23ff5f0:	b510      	push	{r4, lr}
 23ff5f2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
 23ff5f4:	2214      	movs	r2, #20
 23ff5f6:	2100      	movs	r1, #0
 23ff5f8:	f000 fad8 	bl	23ffbac <memset>
}
 23ff5fc:	4620      	mov	r0, r4
 23ff5fe:	bd10      	pop	{r4, pc}

023ff600 <_Z16_fetch_usbserialv>:
{
 23ff600:	b510      	push	{r4, lr}
 23ff602:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 23ff604:	a803      	add	r0, sp, #12
 23ff606:	f7ff fff3 	bl	23ff5f0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 23ff60a:	4c0c      	ldr	r4, [pc, #48]	; (23ff63c <_Z16_fetch_usbserialv+0x3c>)
 23ff60c:	e8d4 1f8f 	ldab	r1, [r4]
 23ff610:	f011 0101 	ands.w	r1, r1, #1
 23ff614:	d10f      	bne.n	23ff636 <_Z16_fetch_usbserialv+0x36>
 23ff616:	4620      	mov	r0, r4
 23ff618:	9101      	str	r1, [sp, #4]
 23ff61a:	f7fd fe14 	bl	23fd246 <__cxa_guard_acquire>
 23ff61e:	9901      	ldr	r1, [sp, #4]
 23ff620:	b148      	cbz	r0, 23ff636 <_Z16_fetch_usbserialv+0x36>
 23ff622:	aa03      	add	r2, sp, #12
 23ff624:	4806      	ldr	r0, [pc, #24]	; (23ff640 <_Z16_fetch_usbserialv+0x40>)
 23ff626:	f7ff ffcf 	bl	23ff5c8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 23ff62a:	4620      	mov	r0, r4
 23ff62c:	f7fd fe10 	bl	23fd250 <__cxa_guard_release>
 23ff630:	4804      	ldr	r0, [pc, #16]	; (23ff644 <_Z16_fetch_usbserialv+0x44>)
 23ff632:	f000 faa8 	bl	23ffb86 <atexit>
	return _usbserial;
}
 23ff636:	4802      	ldr	r0, [pc, #8]	; (23ff640 <_Z16_fetch_usbserialv+0x40>)
 23ff638:	b008      	add	sp, #32
 23ff63a:	bd10      	pop	{r4, pc}
 23ff63c:	1007aebc 	.word	0x1007aebc
 23ff640:	1007aec0 	.word	0x1007aec0
 23ff644:	023ff54f 	.word	0x023ff54f

023ff648 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 23ff648:	2200      	movs	r2, #0
 23ff64a:	6840      	ldr	r0, [r0, #4]
 23ff64c:	4611      	mov	r1, r2
 23ff64e:	f7fe bf3b 	b.w	23fe4c8 <network_ready>

023ff652 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 23ff652:	2200      	movs	r2, #0
 23ff654:	6840      	ldr	r0, [r0, #4]
 23ff656:	4611      	mov	r1, r2
 23ff658:	f7fe bf6e 	b.w	23fe538 <network_listening>

023ff65c <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
 23ff65c:	2200      	movs	r2, #0
 23ff65e:	6840      	ldr	r0, [r0, #4]
 23ff660:	4611      	mov	r1, r2
 23ff662:	f7fe bf85 	b.w	23fe570 <network_get_listen_timeout>

023ff666 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
 23ff666:	2200      	movs	r2, #0
 23ff668:	6840      	ldr	r0, [r0, #4]
 23ff66a:	f7fe bf73 	b.w	23fe554 <network_set_listen_timeout>

023ff66e <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
 23ff66e:	2200      	movs	r2, #0
 23ff670:	6840      	ldr	r0, [r0, #4]
 23ff672:	f081 0101 	eor.w	r1, r1, #1
 23ff676:	f7fe bf51 	b.w	23fe51c <network_listen>

023ff67a <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
 23ff67a:	2300      	movs	r3, #0
 23ff67c:	6840      	ldr	r0, [r0, #4]
 23ff67e:	461a      	mov	r2, r3
 23ff680:	4619      	mov	r1, r3
 23ff682:	f7fe bf3d 	b.w	23fe500 <network_off>

023ff686 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
 23ff686:	2300      	movs	r3, #0
 23ff688:	6840      	ldr	r0, [r0, #4]
 23ff68a:	461a      	mov	r2, r3
 23ff68c:	4619      	mov	r1, r3
 23ff68e:	f7fe bf29 	b.w	23fe4e4 <network_on>

023ff692 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
 23ff692:	2200      	movs	r2, #0
 23ff694:	6840      	ldr	r0, [r0, #4]
 23ff696:	4611      	mov	r1, r2
 23ff698:	f7fe befa 	b.w	23fe490 <network_connecting>

023ff69c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 23ff69c:	2200      	movs	r2, #0
 23ff69e:	2102      	movs	r1, #2
 23ff6a0:	6840      	ldr	r0, [r0, #4]
 23ff6a2:	f7fe bf03 	b.w	23fe4ac <network_disconnect>

023ff6a6 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
 23ff6a6:	2300      	movs	r3, #0
 23ff6a8:	6840      	ldr	r0, [r0, #4]
 23ff6aa:	461a      	mov	r2, r3
 23ff6ac:	f7fe bee2 	b.w	23fe474 <network_connect>

023ff6b0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
 23ff6b0:	2204      	movs	r2, #4
 23ff6b2:	4b02      	ldr	r3, [pc, #8]	; (23ff6bc <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
 23ff6b4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
 23ff6b6:	4a02      	ldr	r2, [pc, #8]	; (23ff6c0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 23ff6b8:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
 23ff6ba:	4770      	bx	lr
 23ff6bc:	1007aed4 	.word	0x1007aed4
 23ff6c0:	023fff30 	.word	0x023fff30

023ff6c4 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 23ff6c4:	b510      	push	{r4, lr}
 23ff6c6:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 23ff6c8:	f7fd fd92 	bl	23fd1f0 <strlen>
 23ff6cc:	3801      	subs	r0, #1
 23ff6ce:	1823      	adds	r3, r4, r0
 23ff6d0:	4620      	mov	r0, r4
	while(i<j){
 23ff6d2:	4283      	cmp	r3, r0
 23ff6d4:	d906      	bls.n	23ff6e4 <_Z11str_reversePc+0x20>
		c = *i;
 23ff6d6:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 23ff6d8:	7819      	ldrb	r1, [r3, #0]
 23ff6da:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 23ff6de:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
 23ff6e2:	e7f6      	b.n	23ff6d2 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
 23ff6e4:	bd10      	pop	{r4, pc}

023ff6e6 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 23ff6e6:	b570      	push	{r4, r5, r6, lr}
 23ff6e8:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 23ff6ea:	1e91      	subs	r1, r2, #2
 23ff6ec:	2922      	cmp	r1, #34	; 0x22
 23ff6ee:	d81d      	bhi.n	23ff72c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
 23ff6f0:	4625      	mov	r5, r4

	div_t result;
	while(a){
 23ff6f2:	b930      	cbnz	r0, 23ff702 <ultoa+0x1c>
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';
 23ff6f4:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
 23ff6f6:	4423      	add	r3, r4
 23ff6f8:	429d      	cmp	r5, r3
 23ff6fa:	d210      	bcs.n	23ff71e <ultoa+0x38>
            *ptr++ = '0';
 23ff6fc:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
 23ff700:	e7fa      	b.n	23ff6f8 <ultoa+0x12>
            result.quot = a/radix;
 23ff702:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 23ff706:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 23ff70a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 23ff70c:	2809      	cmp	r0, #9
                *ptr += '0';
 23ff70e:	bf94      	ite	ls
 23ff710:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
 23ff712:	3157      	addhi	r1, #87	; 0x57
 23ff714:	b2c9      	uxtb	r1, r1
            a = result.quot;
 23ff716:	4630      	mov	r0, r6
 23ff718:	f805 1b01 	strb.w	r1, [r5], #1
	while(a){
 23ff71c:	e7e9      	b.n	23ff6f2 <ultoa+0xc>

	*ptr = '\0';
 23ff71e:	2300      	movs	r3, #0
	str_reverse(buffer);
 23ff720:	4620      	mov	r0, r4
	*ptr = '\0';
 23ff722:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
 23ff724:	f7ff ffce 	bl	23ff6c4 <_Z11str_reversePc>
	return buffer;
 23ff728:	4620      	mov	r0, r4
}
 23ff72a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
 23ff72c:	2000      	movs	r0, #0
 23ff72e:	e7fc      	b.n	23ff72a <ultoa+0x44>

023ff730 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff730:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 23ff732:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 23ff734:	460c      	mov	r4, r1
 23ff736:	4615      	mov	r5, r2
	if(a<0){
 23ff738:	da0d      	bge.n	23ff756 <itoa+0x26>
		*buffer = '-';
 23ff73a:	222d      	movs	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 23ff73c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 23ff740:	bf0c      	ite	eq
 23ff742:	4618      	moveq	r0, r3
 23ff744:	4258      	negne	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 23ff746:	2301      	movs	r3, #1
		*buffer = '-';
 23ff748:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
 23ff74a:	462a      	mov	r2, r5
 23ff74c:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
 23ff74e:	f7ff ffca 	bl	23ff6e6 <ultoa>
	}
	return buffer;
}
 23ff752:	4620      	mov	r0, r4
 23ff754:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
 23ff756:	2301      	movs	r3, #1
 23ff758:	e7f9      	b.n	23ff74e <itoa+0x1e>
	...

023ff75c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
 23ff75c:	4b01      	ldr	r3, [pc, #4]	; (23ff764 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
 23ff75e:	6018      	str	r0, [r3, #0]
    }, nullptr);
 23ff760:	4770      	bx	lr
 23ff762:	bf00      	nop
 23ff764:	1007add4 	.word	0x1007add4

023ff768 <serialEventRun>:
{
 23ff768:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 23ff76a:	4b0f      	ldr	r3, [pc, #60]	; (23ff7a8 <serialEventRun+0x40>)
 23ff76c:	b143      	cbz	r3, 23ff780 <serialEventRun+0x18>
 23ff76e:	f7ff ff47 	bl	23ff600 <_Z16_fetch_usbserialv>
 23ff772:	6803      	ldr	r3, [r0, #0]
 23ff774:	691b      	ldr	r3, [r3, #16]
 23ff776:	4798      	blx	r3
 23ff778:	2800      	cmp	r0, #0
 23ff77a:	dd01      	ble.n	23ff780 <serialEventRun+0x18>
        serialEvent();
 23ff77c:	e000      	b.n	23ff780 <serialEventRun+0x18>
 23ff77e:	bf00      	nop
    if (serialEvent1 && Serial1.available()>0)
 23ff780:	4b0a      	ldr	r3, [pc, #40]	; (23ff7ac <serialEventRun+0x44>)
 23ff782:	b143      	cbz	r3, 23ff796 <serialEventRun+0x2e>
 23ff784:	f000 f96a 	bl	23ffa5c <_Z22__fetch_global_Serial1v>
 23ff788:	6803      	ldr	r3, [r0, #0]
 23ff78a:	691b      	ldr	r3, [r3, #16]
 23ff78c:	4798      	blx	r3
 23ff78e:	2800      	cmp	r0, #0
 23ff790:	dd01      	ble.n	23ff796 <serialEventRun+0x2e>
        serialEvent1();
 23ff792:	e000      	b.n	23ff796 <serialEventRun+0x2e>
 23ff794:	bf00      	nop
    if (serialEvent2) serialEventRun2();
 23ff796:	4b06      	ldr	r3, [pc, #24]	; (23ff7b0 <serialEventRun+0x48>)
 23ff798:	b10b      	cbz	r3, 23ff79e <serialEventRun+0x36>
 23ff79a:	f000 f9a5 	bl	23ffae8 <_Z15serialEventRun2v>
    if (serialEvent3) serialEventRun3();
 23ff79e:	4b05      	ldr	r3, [pc, #20]	; (23ff7b4 <serialEventRun+0x4c>)
 23ff7a0:	b10b      	cbz	r3, 23ff7a6 <serialEventRun+0x3e>
 23ff7a2:	f000 f9d7 	bl	23ffb54 <_Z15serialEventRun3v>
}
 23ff7a6:	bd08      	pop	{r3, pc}
	...

023ff7b8 <_post_loop>:
{
 23ff7b8:	b508      	push	{r3, lr}
	serialEventRun();
 23ff7ba:	f7ff ffd5 	bl	23ff768 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 23ff7be:	f7fe fb81 	bl	23fdec4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 23ff7c2:	4b01      	ldr	r3, [pc, #4]	; (23ff7c8 <_post_loop+0x10>)
 23ff7c4:	6018      	str	r0, [r3, #0]
}
 23ff7c6:	bd08      	pop	{r3, pc}
 23ff7c8:	1007aef0 	.word	0x1007aef0

023ff7cc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff7cc:	4805      	ldr	r0, [pc, #20]	; (23ff7e4 <_Z33system_initialize_user_backup_ramv+0x18>)
 23ff7ce:	4a06      	ldr	r2, [pc, #24]	; (23ff7e8 <_Z33system_initialize_user_backup_ramv+0x1c>)
{
 23ff7d0:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 23ff7d2:	1a12      	subs	r2, r2, r0
 23ff7d4:	4905      	ldr	r1, [pc, #20]	; (23ff7ec <_Z33system_initialize_user_backup_ramv+0x20>)
 23ff7d6:	f000 f9dc 	bl	23ffb92 <memcpy>
    __backup_sram_signature = signature;
 23ff7da:	4b05      	ldr	r3, [pc, #20]	; (23ff7f0 <_Z33system_initialize_user_backup_ramv+0x24>)
 23ff7dc:	4a05      	ldr	r2, [pc, #20]	; (23ff7f4 <_Z33system_initialize_user_backup_ramv+0x28>)
 23ff7de:	601a      	str	r2, [r3, #0]
}
 23ff7e0:	bd08      	pop	{r3, pc}
 23ff7e2:	bf00      	nop
 23ff7e4:	1007b400 	.word	0x1007b400
 23ff7e8:	1007b404 	.word	0x1007b404
 23ff7ec:	085ffb7c 	.word	0x085ffb7c
 23ff7f0:	1007b400 	.word	0x1007b400
 23ff7f4:	9a271c1e 	.word	0x9a271c1e

023ff7f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff7f8:	2300      	movs	r3, #0
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 23ff7fa:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff7fc:	461a      	mov	r2, r3
 23ff7fe:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff802:	9300      	str	r3, [sp, #0]
 23ff804:	f7fe fdaa 	bl	23fe35c <system_ctrl_set_result>
}
 23ff808:	b003      	add	sp, #12
 23ff80a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

023ff810 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
 23ff810:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 23ff812:	8843      	ldrh	r3, [r0, #2]
 23ff814:	2b0a      	cmp	r3, #10
 23ff816:	d008      	beq.n	23ff82a <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 23ff818:	2b50      	cmp	r3, #80	; 0x50
 23ff81a:	d10b      	bne.n	23ff834 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
 23ff81c:	4b09      	ldr	r3, [pc, #36]	; (23ff844 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 23ff81e:	681b      	ldr	r3, [r3, #0]
 23ff820:	b14b      	cbz	r3, 23ff836 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
 23ff822:	b003      	add	sp, #12
 23ff824:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
 23ff828:	4718      	bx	r3
        ctrl_request_custom_handler(req);
 23ff82a:	f7ff ffe5 	bl	23ff7f8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
 23ff82e:	b003      	add	sp, #12
 23ff830:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 23ff834:	2300      	movs	r3, #0
 23ff836:	461a      	mov	r2, r3
 23ff838:	f06f 0177 	mvn.w	r1, #119	; 0x77
 23ff83c:	9300      	str	r3, [sp, #0]
 23ff83e:	f7fe fd8d 	bl	23fe35c <system_ctrl_set_result>
}
 23ff842:	e7f4      	b.n	23ff82e <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
 23ff844:	1007aee0 	.word	0x1007aee0

023ff848 <module_user_init_hook>:
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff848:	2100      	movs	r1, #0
{
 23ff84a:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
 23ff84c:	4811      	ldr	r0, [pc, #68]	; (23ff894 <module_user_init_hook+0x4c>)
 23ff84e:	f7fe ff0d 	bl	23fe66c <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
 23ff852:	4b11      	ldr	r3, [pc, #68]	; (23ff898 <module_user_init_hook+0x50>)
 23ff854:	681a      	ldr	r2, [r3, #0]
 23ff856:	4b11      	ldr	r3, [pc, #68]	; (23ff89c <module_user_init_hook+0x54>)
 23ff858:	429a      	cmp	r2, r3
 23ff85a:	bf0c      	ite	eq
 23ff85c:	2201      	moveq	r2, #1
 23ff85e:	2200      	movne	r2, #0
 23ff860:	4b0f      	ldr	r3, [pc, #60]	; (23ff8a0 <module_user_init_hook+0x58>)
 23ff862:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 23ff864:	d001      	beq.n	23ff86a <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
 23ff866:	f7ff ffb1 	bl	23ff7cc <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 23ff86a:	f7fe fb0f 	bl	23fde8c <HAL_RNG_GetRandomNumber>
 23ff86e:	4604      	mov	r4, r0
    srand(seed);
 23ff870:	f000 f9a4 	bl	23ffbbc <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 23ff874:	4b0b      	ldr	r3, [pc, #44]	; (23ff8a4 <module_user_init_hook+0x5c>)
 23ff876:	b113      	cbz	r3, 23ff87e <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
 23ff878:	4620      	mov	r0, r4
 23ff87a:	e000      	b.n	23ff87e <module_user_init_hook+0x36>
 23ff87c:	bf00      	nop
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 23ff87e:	2100      	movs	r1, #0
 23ff880:	4808      	ldr	r0, [pc, #32]	; (23ff8a4 <module_user_init_hook+0x5c>)
 23ff882:	f7fe fddb 	bl	23fe43c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 23ff886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 23ff88a:	2100      	movs	r1, #0
 23ff88c:	4806      	ldr	r0, [pc, #24]	; (23ff8a8 <module_user_init_hook+0x60>)
 23ff88e:	f7fe bd57 	b.w	23fe340 <system_ctrl_set_app_request_handler>
 23ff892:	bf00      	nop
 23ff894:	023ff75d 	.word	0x023ff75d
 23ff898:	1007b400 	.word	0x1007b400
 23ff89c:	9a271c1e 	.word	0x9a271c1e
 23ff8a0:	1007aedc 	.word	0x1007aedc
 23ff8a4:	00000000 	.word	0x00000000
 23ff8a8:	023ff811 	.word	0x023ff811

023ff8ac <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
 23ff8ac:	281b      	cmp	r0, #27
bool pinAvailable(uint16_t pin) {
 23ff8ae:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ff8b0:	4604      	mov	r4, r0
  if (pin >= TOTAL_PINS) {
 23ff8b2:	d902      	bls.n	23ff8ba <pinAvailable+0xe>
    return false;
 23ff8b4:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
 23ff8b6:	b003      	add	sp, #12
 23ff8b8:	bd30      	pop	{r4, r5, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff8ba:	f1a0 030f 	sub.w	r3, r0, #15
 23ff8be:	2b02      	cmp	r3, #2
 23ff8c0:	d90b      	bls.n	23ff8da <pinAvailable+0x2e>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
 23ff8c2:	2801      	cmp	r0, #1
 23ff8c4:	d821      	bhi.n	23ff90a <pinAvailable+0x5e>
 23ff8c6:	f000 f875 	bl	23ff9b4 <_Z19__fetch_global_Wirev>
 23ff8ca:	2100      	movs	r1, #0
 23ff8cc:	7c00      	ldrb	r0, [r0, #16]
 23ff8ce:	f7fe fbaf 	bl	23fe030 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff8d2:	f080 0001 	eor.w	r0, r0, #1
 23ff8d6:	b2c0      	uxtb	r0, r0
 23ff8d8:	e7ed      	b.n	23ff8b6 <pinAvailable+0xa>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
 23ff8da:	4d11      	ldr	r5, [pc, #68]	; (23ff920 <pinAvailable+0x74>)
 23ff8dc:	e8d5 1f8f 	ldab	r1, [r5]
 23ff8e0:	f011 0101 	ands.w	r1, r1, #1
 23ff8e4:	d10b      	bne.n	23ff8fe <pinAvailable+0x52>
 23ff8e6:	4628      	mov	r0, r5
 23ff8e8:	9101      	str	r1, [sp, #4]
 23ff8ea:	f7fd fcac 	bl	23fd246 <__cxa_guard_acquire>
 23ff8ee:	9901      	ldr	r1, [sp, #4]
 23ff8f0:	b128      	cbz	r0, 23ff8fe <pinAvailable+0x52>
 23ff8f2:	480c      	ldr	r0, [pc, #48]	; (23ff924 <pinAvailable+0x78>)
 23ff8f4:	f7ff fbfe 	bl	23ff0f4 <_ZN8SPIClassC1E19hal_spi_interface_t>
 23ff8f8:	4628      	mov	r0, r5
 23ff8fa:	f7fd fca9 	bl	23fd250 <__cxa_guard_release>
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
 23ff8fe:	4b09      	ldr	r3, [pc, #36]	; (23ff924 <pinAvailable+0x78>)
 23ff900:	7818      	ldrb	r0, [r3, #0]
 23ff902:	f7fe fbf7 	bl	23fe0f4 <hal_spi_is_enabled>
 23ff906:	2800      	cmp	r0, #0
 23ff908:	d1d4      	bne.n	23ff8b4 <pinAvailable+0x8>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
 23ff90a:	3c08      	subs	r4, #8
 23ff90c:	2c01      	cmp	r4, #1
 23ff90e:	d805      	bhi.n	23ff91c <pinAvailable+0x70>
 23ff910:	f000 f8a4 	bl	23ffa5c <_Z22__fetch_global_Serial1v>
 23ff914:	7c00      	ldrb	r0, [r0, #16]
 23ff916:	f7fe fc41 	bl	23fe19c <hal_usart_is_enabled>
 23ff91a:	e7da      	b.n	23ff8d2 <pinAvailable+0x26>
  return true; // 'pin' is available
 23ff91c:	2001      	movs	r0, #1
 23ff91e:	e7ca      	b.n	23ff8b6 <pinAvailable+0xa>
 23ff920:	1007aee4 	.word	0x1007aee4
 23ff924:	1007aee8 	.word	0x1007aee8

023ff928 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff928:	281b      	cmp	r0, #27
{
 23ff92a:	b538      	push	{r3, r4, r5, lr}
 23ff92c:	4604      	mov	r4, r0
 23ff92e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 23ff930:	d80a      	bhi.n	23ff948 <pinMode+0x20>
 23ff932:	29ff      	cmp	r1, #255	; 0xff
 23ff934:	d008      	beq.n	23ff948 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
 23ff936:	f7ff ffb9 	bl	23ff8ac <pinAvailable>
 23ff93a:	b128      	cbz	r0, 23ff948 <pinMode+0x20>
  hal_gpio_mode(pin, setMode);
 23ff93c:	4629      	mov	r1, r5
 23ff93e:	4620      	mov	r0, r4
}
 23ff940:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_mode(pin, setMode);
 23ff944:	f7fe bacc 	b.w	23fdee0 <hal_gpio_mode>
}
 23ff948:	bd38      	pop	{r3, r4, r5, pc}

023ff94a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(hal_pin_t pin, uint8_t value)
{
 23ff94a:	b538      	push	{r3, r4, r5, lr}
 23ff94c:	4604      	mov	r4, r0
 23ff94e:	460d      	mov	r5, r1
    PinMode mode = hal_gpio_get_mode(pin);
 23ff950:	f7fe fad4 	bl	23fdefc <hal_gpio_get_mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 23ff954:	28ff      	cmp	r0, #255	; 0xff
 23ff956:	d010      	beq.n	23ff97a <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
 23ff958:	2806      	cmp	r0, #6
 23ff95a:	d804      	bhi.n	23ff966 <digitalWrite+0x1c>
 23ff95c:	234d      	movs	r3, #77	; 0x4d
 23ff95e:	fa23 f000 	lsr.w	r0, r3, r0
 23ff962:	07c3      	lsls	r3, r0, #31
 23ff964:	d409      	bmi.n	23ff97a <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 23ff966:	4620      	mov	r0, r4
 23ff968:	f7ff ffa0 	bl	23ff8ac <pinAvailable>
 23ff96c:	b128      	cbz	r0, 23ff97a <digitalWrite+0x30>
    return;
  }

  hal_gpio_write(pin, value);
 23ff96e:	4629      	mov	r1, r5
 23ff970:	4620      	mov	r0, r4
}
 23ff972:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  hal_gpio_write(pin, value);
 23ff976:	f7fe bacf 	b.w	23fdf18 <hal_gpio_write>
}
 23ff97a:	bd38      	pop	{r3, r4, r5, pc}

023ff97c <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff97c:	4770      	bx	lr
	...

023ff980 <_Z17acquireWireBufferv>:
{
 23ff980:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
 23ff982:	4b0a      	ldr	r3, [pc, #40]	; (23ff9ac <_Z17acquireWireBufferv+0x2c>)
{
 23ff984:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
 23ff986:	6003      	str	r3, [r0, #0]
 23ff988:	2301      	movs	r3, #1
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff98a:	4909      	ldr	r1, [pc, #36]	; (23ff9b0 <_Z17acquireWireBufferv+0x30>)
	hal_i2c_config_t config = {
 23ff98c:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff98e:	2020      	movs	r0, #32
 23ff990:	f000 f8f4 	bl	23ffb7c <_ZnajRKSt9nothrow_t>
	};
 23ff994:	2520      	movs	r5, #32
 23ff996:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff998:	4905      	ldr	r1, [pc, #20]	; (23ff9b0 <_Z17acquireWireBufferv+0x30>)
 23ff99a:	4628      	mov	r0, r5
	};
 23ff99c:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
 23ff99e:	f000 f8ed 	bl	23ffb7c <_ZnajRKSt9nothrow_t>
	};
 23ff9a2:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
 23ff9a6:	4620      	mov	r0, r4
 23ff9a8:	bd38      	pop	{r3, r4, r5, pc}
 23ff9aa:	bf00      	nop
 23ff9ac:	00010018 	.word	0x00010018
 23ff9b0:	023fff64 	.word	0x023fff64

023ff9b4 <_Z19__fetch_global_Wirev>:
{
 23ff9b4:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9b6:	4d0e      	ldr	r5, [pc, #56]	; (23ff9f0 <_Z19__fetch_global_Wirev+0x3c>)
{
 23ff9b8:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
 23ff9ba:	e8d5 1f8f 	ldab	r1, [r5]
 23ff9be:	f011 0401 	ands.w	r4, r1, #1
 23ff9c2:	d111      	bne.n	23ff9e8 <_Z19__fetch_global_Wirev+0x34>
 23ff9c4:	4628      	mov	r0, r5
 23ff9c6:	f7fd fc3e 	bl	23fd246 <__cxa_guard_acquire>
 23ff9ca:	b168      	cbz	r0, 23ff9e8 <_Z19__fetch_global_Wirev+0x34>
 23ff9cc:	4668      	mov	r0, sp
 23ff9ce:	f7ff ffd7 	bl	23ff980 <_Z17acquireWireBufferv>
 23ff9d2:	466a      	mov	r2, sp
 23ff9d4:	4621      	mov	r1, r4
 23ff9d6:	4807      	ldr	r0, [pc, #28]	; (23ff9f4 <_Z19__fetch_global_Wirev+0x40>)
 23ff9d8:	f7ff f9aa 	bl	23fed30 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
 23ff9dc:	4628      	mov	r0, r5
 23ff9de:	f7fd fc37 	bl	23fd250 <__cxa_guard_release>
 23ff9e2:	4805      	ldr	r0, [pc, #20]	; (23ff9f8 <_Z19__fetch_global_Wirev+0x44>)
 23ff9e4:	f000 f8cf 	bl	23ffb86 <atexit>
	return wire;
}
 23ff9e8:	4802      	ldr	r0, [pc, #8]	; (23ff9f4 <_Z19__fetch_global_Wirev+0x40>)
 23ff9ea:	b007      	add	sp, #28
 23ff9ec:	bd30      	pop	{r4, r5, pc}
 23ff9ee:	bf00      	nop
 23ff9f0:	1007aef4 	.word	0x1007aef4
 23ff9f4:	1007aef8 	.word	0x1007aef8
 23ff9f8:	023ff97d 	.word	0x023ff97d

023ff9fc <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ff9fc:	4770      	bx	lr
	...

023ffa00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>:
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa00:	b538      	push	{r3, r4, r5, lr}
    hal_usart_buffer_config_t config = {
 23ffa02:	2514      	movs	r5, #20
hal_usart_buffer_config_t defaultUsartConfig() {
 23ffa04:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
 23ffa06:	462a      	mov	r2, r5
 23ffa08:	2100      	movs	r1, #0
 23ffa0a:	f000 f8cf 	bl	23ffbac <memset>
 23ffa0e:	8025      	strh	r5, [r4, #0]
 23ffa10:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa12:	4907      	ldr	r1, [pc, #28]	; (23ffa30 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
 23ffa14:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
 23ffa16:	8125      	strh	r5, [r4, #8]
 23ffa18:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa1a:	f000 f8af 	bl	23ffb7c <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa1e:	4904      	ldr	r1, [pc, #16]	; (23ffa30 <_ZN12_GLOBAL__N_118defaultUsartConfigEv+0x30>)
    };
 23ffa20:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
 23ffa22:	4628      	mov	r0, r5
 23ffa24:	f000 f8aa 	bl	23ffb7c <_ZnajRKSt9nothrow_t>
    };
 23ffa28:	60e0      	str	r0, [r4, #12]
}
 23ffa2a:	4620      	mov	r0, r4
 23ffa2c:	bd38      	pop	{r3, r4, r5, pc}
 23ffa2e:	bf00      	nop
 23ffa30:	023fff64 	.word	0x023fff64

023ffa34 <__tcf_2>:
 23ffa34:	4770      	bx	lr

023ffa36 <__tcf_1>:
 23ffa36:	4770      	bx	lr

023ffa38 <_Z20acquireSerial1Bufferv>:
{
 23ffa38:	b510      	push	{r4, lr}
 23ffa3a:	4604      	mov	r4, r0
    return defaultUsartConfig();
 23ffa3c:	f7ff ffe0 	bl	23ffa00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
}
 23ffa40:	4620      	mov	r0, r4
 23ffa42:	bd10      	pop	{r4, pc}

023ffa44 <_Z20acquireSerial2Bufferv>:
 23ffa44:	b510      	push	{r4, lr}
 23ffa46:	4604      	mov	r4, r0
 23ffa48:	f7ff ffda 	bl	23ffa00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffa4c:	4620      	mov	r0, r4
 23ffa4e:	bd10      	pop	{r4, pc}

023ffa50 <_Z20acquireSerial3Bufferv>:
 23ffa50:	b510      	push	{r4, lr}
 23ffa52:	4604      	mov	r4, r0
 23ffa54:	f7ff ffd4 	bl	23ffa00 <_ZN12_GLOBAL__N_118defaultUsartConfigEv>
 23ffa58:	4620      	mov	r0, r4
 23ffa5a:	bd10      	pop	{r4, pc}

023ffa5c <_Z22__fetch_global_Serial1v>:
{
 23ffa5c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa5e:	4d0e      	ldr	r5, [pc, #56]	; (23ffa98 <_Z22__fetch_global_Serial1v+0x3c>)
{
 23ffa60:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
 23ffa62:	e8d5 1f8f 	ldab	r1, [r5]
 23ffa66:	f011 0401 	ands.w	r4, r1, #1
 23ffa6a:	d111      	bne.n	23ffa90 <_Z22__fetch_global_Serial1v+0x34>
 23ffa6c:	4628      	mov	r0, r5
 23ffa6e:	f7fd fbea 	bl	23fd246 <__cxa_guard_acquire>
 23ffa72:	b168      	cbz	r0, 23ffa90 <_Z22__fetch_global_Serial1v+0x34>
 23ffa74:	a801      	add	r0, sp, #4
 23ffa76:	f7ff ffdf 	bl	23ffa38 <_Z20acquireSerial1Bufferv>
 23ffa7a:	4621      	mov	r1, r4
 23ffa7c:	aa01      	add	r2, sp, #4
 23ffa7e:	4807      	ldr	r0, [pc, #28]	; (23ffa9c <_Z22__fetch_global_Serial1v+0x40>)
 23ffa80:	f7ff fd4c 	bl	23ff51c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffa84:	4628      	mov	r0, r5
 23ffa86:	f7fd fbe3 	bl	23fd250 <__cxa_guard_release>
 23ffa8a:	4805      	ldr	r0, [pc, #20]	; (23ffaa0 <_Z22__fetch_global_Serial1v+0x44>)
 23ffa8c:	f000 f87b 	bl	23ffb86 <atexit>
    return serial1;
}
 23ffa90:	4802      	ldr	r0, [pc, #8]	; (23ffa9c <_Z22__fetch_global_Serial1v+0x40>)
 23ffa92:	b007      	add	sp, #28
 23ffa94:	bd30      	pop	{r4, r5, pc}
 23ffa96:	bf00      	nop
 23ffa98:	1007af0c 	.word	0x1007af0c
 23ffa9c:	1007af18 	.word	0x1007af18
 23ffaa0:	023ff9fd 	.word	0x023ff9fd

023ffaa4 <_Z22__fetch_global_Serial2v>:

#if Wiring_Serial2
USARTSerial& __fetch_global_Serial2()
{
 23ffaa4:	b510      	push	{r4, lr}
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffaa6:	4c0d      	ldr	r4, [pc, #52]	; (23ffadc <_Z22__fetch_global_Serial2v+0x38>)
{
 23ffaa8:	b086      	sub	sp, #24
	static USARTSerial serial2(HAL_USART_SERIAL2, acquireSerial2Buffer());
 23ffaaa:	e8d4 3f8f 	ldab	r3, [r4]
 23ffaae:	07db      	lsls	r3, r3, #31
 23ffab0:	d411      	bmi.n	23ffad6 <_Z22__fetch_global_Serial2v+0x32>
 23ffab2:	4620      	mov	r0, r4
 23ffab4:	f7fd fbc7 	bl	23fd246 <__cxa_guard_acquire>
 23ffab8:	b168      	cbz	r0, 23ffad6 <_Z22__fetch_global_Serial2v+0x32>
 23ffaba:	a801      	add	r0, sp, #4
 23ffabc:	f7ff ffc2 	bl	23ffa44 <_Z20acquireSerial2Bufferv>
 23ffac0:	2101      	movs	r1, #1
 23ffac2:	aa01      	add	r2, sp, #4
 23ffac4:	4806      	ldr	r0, [pc, #24]	; (23ffae0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffac6:	f7ff fd29 	bl	23ff51c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffaca:	4620      	mov	r0, r4
 23ffacc:	f7fd fbc0 	bl	23fd250 <__cxa_guard_release>
 23ffad0:	4804      	ldr	r0, [pc, #16]	; (23ffae4 <_Z22__fetch_global_Serial2v+0x40>)
 23ffad2:	f000 f858 	bl	23ffb86 <atexit>
	return serial2;
}
 23ffad6:	4802      	ldr	r0, [pc, #8]	; (23ffae0 <_Z22__fetch_global_Serial2v+0x3c>)
 23ffad8:	b006      	add	sp, #24
 23ffada:	bd10      	pop	{r4, pc}
 23ffadc:	1007af10 	.word	0x1007af10
 23ffae0:	1007af2c 	.word	0x1007af2c
 23ffae4:	023ffa37 	.word	0x023ffa37

023ffae8 <_Z15serialEventRun2v>:

void serialEventRun2()
{
 23ffae8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial2, serialEvent2);
 23ffaea:	f7ff ffdb 	bl	23ffaa4 <_Z22__fetch_global_Serial2v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffaee:	4b07      	ldr	r3, [pc, #28]	; (23ffb0c <_Z15serialEventRun2v+0x24>)
 23ffaf0:	4604      	mov	r4, r0
 23ffaf2:	b153      	cbz	r3, 23ffb0a <_Z15serialEventRun2v+0x22>
 23ffaf4:	f7ff fd26 	bl	23ff544 <_ZN11USARTSerial9isEnabledEv>
 23ffaf8:	b138      	cbz	r0, 23ffb0a <_Z15serialEventRun2v+0x22>
 23ffafa:	6823      	ldr	r3, [r4, #0]
 23ffafc:	4620      	mov	r0, r4
 23ffafe:	691b      	ldr	r3, [r3, #16]
 23ffb00:	4798      	blx	r3
 23ffb02:	2800      	cmp	r0, #0
 23ffb04:	dd01      	ble.n	23ffb0a <_Z15serialEventRun2v+0x22>
        handler();
 23ffb06:	e000      	b.n	23ffb0a <_Z15serialEventRun2v+0x22>
 23ffb08:	bf00      	nop
}
 23ffb0a:	bd10      	pop	{r4, pc}
 23ffb0c:	00000000 	.word	0x00000000

023ffb10 <_Z22__fetch_global_Serial3v>:
#endif

#if Wiring_Serial3
USARTSerial& __fetch_global_Serial3()
{
 23ffb10:	b510      	push	{r4, lr}
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb12:	4c0d      	ldr	r4, [pc, #52]	; (23ffb48 <_Z22__fetch_global_Serial3v+0x38>)
{
 23ffb14:	b086      	sub	sp, #24
	static USARTSerial serial3(HAL_USART_SERIAL3, acquireSerial3Buffer());
 23ffb16:	e8d4 3f8f 	ldab	r3, [r4]
 23ffb1a:	07db      	lsls	r3, r3, #31
 23ffb1c:	d411      	bmi.n	23ffb42 <_Z22__fetch_global_Serial3v+0x32>
 23ffb1e:	4620      	mov	r0, r4
 23ffb20:	f7fd fb91 	bl	23fd246 <__cxa_guard_acquire>
 23ffb24:	b168      	cbz	r0, 23ffb42 <_Z22__fetch_global_Serial3v+0x32>
 23ffb26:	a801      	add	r0, sp, #4
 23ffb28:	f7ff ff92 	bl	23ffa50 <_Z20acquireSerial3Bufferv>
 23ffb2c:	2102      	movs	r1, #2
 23ffb2e:	aa01      	add	r2, sp, #4
 23ffb30:	4806      	ldr	r0, [pc, #24]	; (23ffb4c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb32:	f7ff fcf3 	bl	23ff51c <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
 23ffb36:	4620      	mov	r0, r4
 23ffb38:	f7fd fb8a 	bl	23fd250 <__cxa_guard_release>
 23ffb3c:	4804      	ldr	r0, [pc, #16]	; (23ffb50 <_Z22__fetch_global_Serial3v+0x40>)
 23ffb3e:	f000 f822 	bl	23ffb86 <atexit>
	return serial3;
}
 23ffb42:	4802      	ldr	r0, [pc, #8]	; (23ffb4c <_Z22__fetch_global_Serial3v+0x3c>)
 23ffb44:	b006      	add	sp, #24
 23ffb46:	bd10      	pop	{r4, pc}
 23ffb48:	1007af14 	.word	0x1007af14
 23ffb4c:	1007af40 	.word	0x1007af40
 23ffb50:	023ffa35 	.word	0x023ffa35

023ffb54 <_Z15serialEventRun3v>:

void serialEventRun3()
{
 23ffb54:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial3, serialEvent3);
 23ffb56:	f7ff ffdb 	bl	23ffb10 <_Z22__fetch_global_Serial3v>
    if (handler && serial.isEnabled() && serial.available()>0)
 23ffb5a:	4b07      	ldr	r3, [pc, #28]	; (23ffb78 <_Z15serialEventRun3v+0x24>)
 23ffb5c:	4604      	mov	r4, r0
 23ffb5e:	b153      	cbz	r3, 23ffb76 <_Z15serialEventRun3v+0x22>
 23ffb60:	f7ff fcf0 	bl	23ff544 <_ZN11USARTSerial9isEnabledEv>
 23ffb64:	b138      	cbz	r0, 23ffb76 <_Z15serialEventRun3v+0x22>
 23ffb66:	6823      	ldr	r3, [r4, #0]
 23ffb68:	4620      	mov	r0, r4
 23ffb6a:	691b      	ldr	r3, [r3, #16]
 23ffb6c:	4798      	blx	r3
 23ffb6e:	2800      	cmp	r0, #0
 23ffb70:	dd01      	ble.n	23ffb76 <_Z15serialEventRun3v+0x22>
        handler();
 23ffb72:	e000      	b.n	23ffb76 <_Z15serialEventRun3v+0x22>
 23ffb74:	bf00      	nop
}
 23ffb76:	bd10      	pop	{r4, pc}
 23ffb78:	00000000 	.word	0x00000000

023ffb7c <_ZnajRKSt9nothrow_t>:
 23ffb7c:	f7fd bb5f 	b.w	23fd23e <_Znaj>

023ffb80 <_ZSt25__throw_bad_function_callv>:
 23ffb80:	b508      	push	{r3, lr}
 23ffb82:	f7fe fd49 	bl	23fe618 <abort>

023ffb86 <atexit>:
 23ffb86:	2300      	movs	r3, #0
 23ffb88:	4601      	mov	r1, r0
 23ffb8a:	461a      	mov	r2, r3
 23ffb8c:	4618      	mov	r0, r3
 23ffb8e:	f000 b869 	b.w	23ffc64 <__register_exitproc>

023ffb92 <memcpy>:
 23ffb92:	440a      	add	r2, r1
 23ffb94:	1e43      	subs	r3, r0, #1
 23ffb96:	4291      	cmp	r1, r2
 23ffb98:	d100      	bne.n	23ffb9c <memcpy+0xa>
 23ffb9a:	4770      	bx	lr
 23ffb9c:	b510      	push	{r4, lr}
 23ffb9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 23ffba2:	4291      	cmp	r1, r2
 23ffba4:	f803 4f01 	strb.w	r4, [r3, #1]!
 23ffba8:	d1f9      	bne.n	23ffb9e <memcpy+0xc>
 23ffbaa:	bd10      	pop	{r4, pc}

023ffbac <memset>:
 23ffbac:	4402      	add	r2, r0
 23ffbae:	4603      	mov	r3, r0
 23ffbb0:	4293      	cmp	r3, r2
 23ffbb2:	d100      	bne.n	23ffbb6 <memset+0xa>
 23ffbb4:	4770      	bx	lr
 23ffbb6:	f803 1b01 	strb.w	r1, [r3], #1
 23ffbba:	e7f9      	b.n	23ffbb0 <memset+0x4>

023ffbbc <srand>:
 23ffbbc:	b538      	push	{r3, r4, r5, lr}
 23ffbbe:	4b10      	ldr	r3, [pc, #64]	; (23ffc00 <srand+0x44>)
 23ffbc0:	4604      	mov	r4, r0
 23ffbc2:	681d      	ldr	r5, [r3, #0]
 23ffbc4:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffbc6:	b9b3      	cbnz	r3, 23ffbf6 <srand+0x3a>
 23ffbc8:	2018      	movs	r0, #24
 23ffbca:	f7fe fcfb 	bl	23fe5c4 <malloc>
 23ffbce:	4602      	mov	r2, r0
 23ffbd0:	63a8      	str	r0, [r5, #56]	; 0x38
 23ffbd2:	b920      	cbnz	r0, 23ffbde <srand+0x22>
 23ffbd4:	4b0b      	ldr	r3, [pc, #44]	; (23ffc04 <srand+0x48>)
 23ffbd6:	2142      	movs	r1, #66	; 0x42
 23ffbd8:	480b      	ldr	r0, [pc, #44]	; (23ffc08 <srand+0x4c>)
 23ffbda:	f7fe fd39 	bl	23fe650 <__assert_func>
 23ffbde:	490b      	ldr	r1, [pc, #44]	; (23ffc0c <srand+0x50>)
 23ffbe0:	4b0b      	ldr	r3, [pc, #44]	; (23ffc10 <srand+0x54>)
 23ffbe2:	e9c0 1300 	strd	r1, r3, [r0]
 23ffbe6:	4b0b      	ldr	r3, [pc, #44]	; (23ffc14 <srand+0x58>)
 23ffbe8:	2100      	movs	r1, #0
 23ffbea:	6083      	str	r3, [r0, #8]
 23ffbec:	230b      	movs	r3, #11
 23ffbee:	8183      	strh	r3, [r0, #12]
 23ffbf0:	2001      	movs	r0, #1
 23ffbf2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 23ffbf6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 23ffbf8:	2200      	movs	r2, #0
 23ffbfa:	611c      	str	r4, [r3, #16]
 23ffbfc:	615a      	str	r2, [r3, #20]
 23ffbfe:	bd38      	pop	{r3, r4, r5, pc}
 23ffc00:	1007add4 	.word	0x1007add4
 23ffc04:	023fff65 	.word	0x023fff65
 23ffc08:	023fff7c 	.word	0x023fff7c
 23ffc0c:	abcd330e 	.word	0xabcd330e
 23ffc10:	e66d1234 	.word	0xe66d1234
 23ffc14:	0005deec 	.word	0x0005deec

023ffc18 <strcpy>:
 23ffc18:	4603      	mov	r3, r0
 23ffc1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 23ffc1e:	f803 2b01 	strb.w	r2, [r3], #1
 23ffc22:	2a00      	cmp	r2, #0
 23ffc24:	d1f9      	bne.n	23ffc1a <strcpy+0x2>
 23ffc26:	4770      	bx	lr

023ffc28 <strdup>:
 23ffc28:	4b02      	ldr	r3, [pc, #8]	; (23ffc34 <strdup+0xc>)
 23ffc2a:	4601      	mov	r1, r0
 23ffc2c:	6818      	ldr	r0, [r3, #0]
 23ffc2e:	f000 b803 	b.w	23ffc38 <_strdup_r>
 23ffc32:	bf00      	nop
 23ffc34:	1007add4 	.word	0x1007add4

023ffc38 <_strdup_r>:
 23ffc38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 23ffc3a:	4604      	mov	r4, r0
 23ffc3c:	4608      	mov	r0, r1
 23ffc3e:	460d      	mov	r5, r1
 23ffc40:	f7fd fad6 	bl	23fd1f0 <strlen>
 23ffc44:	1c42      	adds	r2, r0, #1
 23ffc46:	4620      	mov	r0, r4
 23ffc48:	4611      	mov	r1, r2
 23ffc4a:	9201      	str	r2, [sp, #4]
 23ffc4c:	f7fe fcf2 	bl	23fe634 <_malloc_r>
 23ffc50:	4604      	mov	r4, r0
 23ffc52:	b118      	cbz	r0, 23ffc5c <_strdup_r+0x24>
 23ffc54:	9a01      	ldr	r2, [sp, #4]
 23ffc56:	4629      	mov	r1, r5
 23ffc58:	f7ff ff9b 	bl	23ffb92 <memcpy>
 23ffc5c:	4620      	mov	r0, r4
 23ffc5e:	b003      	add	sp, #12
 23ffc60:	bd30      	pop	{r4, r5, pc}
	...

023ffc64 <__register_exitproc>:
 23ffc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 23ffc68:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 23ffd28 <__register_exitproc+0xc4>
 23ffc6c:	4606      	mov	r6, r0
 23ffc6e:	461f      	mov	r7, r3
 23ffc70:	460d      	mov	r5, r1
 23ffc72:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc76:	4691      	mov	r9, r2
 23ffc78:	f000 f858 	bl	23ffd2c <__retarget_lock_acquire_recursive>
 23ffc7c:	4b26      	ldr	r3, [pc, #152]	; (23ffd18 <__register_exitproc+0xb4>)
 23ffc7e:	681c      	ldr	r4, [r3, #0]
 23ffc80:	b934      	cbnz	r4, 23ffc90 <__register_exitproc+0x2c>
 23ffc82:	4c26      	ldr	r4, [pc, #152]	; (23ffd1c <__register_exitproc+0xb8>)
 23ffc84:	601c      	str	r4, [r3, #0]
 23ffc86:	4b26      	ldr	r3, [pc, #152]	; (23ffd20 <__register_exitproc+0xbc>)
 23ffc88:	b113      	cbz	r3, 23ffc90 <__register_exitproc+0x2c>
 23ffc8a:	681b      	ldr	r3, [r3, #0]
 23ffc8c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 23ffc90:	6863      	ldr	r3, [r4, #4]
 23ffc92:	2b1f      	cmp	r3, #31
 23ffc94:	dd07      	ble.n	23ffca6 <__register_exitproc+0x42>
 23ffc96:	f8d8 0000 	ldr.w	r0, [r8]
 23ffc9a:	f000 f849 	bl	23ffd30 <__retarget_lock_release_recursive>
 23ffc9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 23ffca2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 23ffca6:	b35e      	cbz	r6, 23ffd00 <__register_exitproc+0x9c>
 23ffca8:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 23ffcac:	b988      	cbnz	r0, 23ffcd2 <__register_exitproc+0x6e>
 23ffcae:	4b1d      	ldr	r3, [pc, #116]	; (23ffd24 <__register_exitproc+0xc0>)
 23ffcb0:	b923      	cbnz	r3, 23ffcbc <__register_exitproc+0x58>
 23ffcb2:	f8d8 0000 	ldr.w	r0, [r8]
 23ffcb6:	f000 f83a 	bl	23ffd2e <__retarget_lock_release>
 23ffcba:	e7f0      	b.n	23ffc9e <__register_exitproc+0x3a>
 23ffcbc:	f44f 7084 	mov.w	r0, #264	; 0x108
 23ffcc0:	f7fe fc80 	bl	23fe5c4 <malloc>
 23ffcc4:	2800      	cmp	r0, #0
 23ffcc6:	d0f4      	beq.n	23ffcb2 <__register_exitproc+0x4e>
 23ffcc8:	2300      	movs	r3, #0
 23ffcca:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 23ffcce:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 23ffcd2:	6863      	ldr	r3, [r4, #4]
 23ffcd4:	2201      	movs	r2, #1
 23ffcd6:	2e02      	cmp	r6, #2
 23ffcd8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 23ffcdc:	fa02 f203 	lsl.w	r2, r2, r3
 23ffce0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 23ffce4:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 23ffce8:	ea43 0302 	orr.w	r3, r3, r2
 23ffcec:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 23ffcf0:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 23ffcf4:	bf02      	ittt	eq
 23ffcf6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 23ffcfa:	4313      	orreq	r3, r2
 23ffcfc:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 23ffd00:	6863      	ldr	r3, [r4, #4]
 23ffd02:	f8d8 0000 	ldr.w	r0, [r8]
 23ffd06:	1c5a      	adds	r2, r3, #1
 23ffd08:	3302      	adds	r3, #2
 23ffd0a:	6062      	str	r2, [r4, #4]
 23ffd0c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 23ffd10:	f000 f80e 	bl	23ffd30 <__retarget_lock_release_recursive>
 23ffd14:	2000      	movs	r0, #0
 23ffd16:	e7c4      	b.n	23ffca2 <__register_exitproc+0x3e>
 23ffd18:	1007afe0 	.word	0x1007afe0
 23ffd1c:	1007af54 	.word	0x1007af54
 23ffd20:	00000000 	.word	0x00000000
 23ffd24:	023fe5c5 	.word	0x023fe5c5
 23ffd28:	1007ae38 	.word	0x1007ae38

023ffd2c <__retarget_lock_acquire_recursive>:
 23ffd2c:	4770      	bx	lr

023ffd2e <__retarget_lock_release>:
 23ffd2e:	4770      	bx	lr

023ffd30 <__retarget_lock_release_recursive>:
 23ffd30:	4770      	bx	lr
	...

023ffd34 <dynalib_user>:
 23ffd34:	d201 023f d229 023f d22d 023f 0000 0000     ..?.).?.-.?.....
 23ffd44:	6f43 6c75 2064 6f6e 2074 6966 646e 6120     Could not find a
 23ffd54:	7620 6c61 6469 5420 466f 2031 6e6f 6220      valid ToF1 on b
 23ffd64:	7375 3020 202c 6863 6365 206b 6977 6972     us 0, check wiri
 23ffd74:	676e 0021 6f54 2066 6544 6976 6563 4f20     ng!.Tof Device O
 23ffd84:	004b 6157 6574 2072 654c 6576 3a6c 0020     K.Water Level: .
 23ffd94:	654c 6576 206c 6944 7473 6e61 6563 203a     Level Distance: 
 23ffda4:	0000 0000                                   ....

023ffda8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 23ffdb0:	e6fd 023f e703 023f e741 023f e711 023f     ..?...?.A.?...?.
 23ffdc0:	e6ff 023f                                   ..?.

023ffdc4 <_ZTVN5spark13EthernetClassE>:
	...
 23ffdcc:	ecbb 023f ecb1 023f eca7 023f ec9d 023f     ..?...?...?...?.
 23ffddc:	ec91 023f ec85 023f ef31 023f ef39 023f     ..?...?.1.?.9.?.
 23ffdec:	ec79 023f ec71 023f ec67 023f ec5d 023f     y.?.q.?.g.?.].?.
 23ffdfc:	ef69 023f                                   i.?.

023ffe00 <_ZTV7TwoWire>:
	...
 23ffe08:	ecd9 023f ed23 023f ecfb 023f ecdb 023f     ..?.#.?...?...?.
 23ffe18:	ed03 023f ed0b 023f ed13 023f ed1b 023f     ..?...?...?...?.

023ffe28 <_ZTV9IPAddress>:
	...
 23ffe30:	edff 023f edef 023f edf1 023f 7061 0070     ..?...?...?.app.

023ffe40 <_ZTVN5spark12NetworkClassE>:
	...
 23ffe48:	eef1 023f eefb 023f ef05 023f ef0f 023f     ..?...?...?...?.
 23ffe58:	ef19 023f ef25 023f ef31 023f ef39 023f     ..?.%.?.1.?.9.?.
 23ffe68:	ef41 023f ef4d 023f ef55 023f ef5f 023f     A.?.M.?.U.?._.?.
 23ffe78:	ef69 023f 6977 6972 676e 5300 7379 6574     i.?.wiring.Syste
 23ffe88:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
 23ffe98:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
 23ffea8:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
 23ffeb8:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

023ffec8 <_ZTV11USARTSerial>:
	...
 23ffed0:	f4a1 023f f50d 023f f4e5 023f f055 023f     ..?...?...?.U.?.
 23ffee0:	f4b5 023f f4d1 023f f4c3 023f f4df 023f     ..?...?...?...?.
 23ffef0:	f4a3 023f f4a7 023f                         ..?...?.

023ffef8 <_ZTV9USBSerial>:
	...
 23fff00:	f551 023f f5b9 023f f58f 023f f055 023f     Q.?...?...?.U.?.
 23fff10:	f581 023f f553 023f f563 023f f5b3 023f     ..?.S.?.c.?...?.
 23fff20:	f573 023f f54b 023f                         s.?.K.?.

023fff28 <_ZTVN5spark9WiFiClassE>:
	...
 23fff30:	f6a7 023f f69d 023f f693 023f f649 023f     ..?...?...?.I.?.
 23fff40:	f687 023f f67b 023f ef31 023f ef39 023f     ..?.{.?.1.?.9.?.
 23fff50:	f66f 023f f667 023f f65d 023f f653 023f     o.?.g.?.].?.S.?.
 23fff60:	ef69 023f                                   i.?.

023fff64 <_ZSt7nothrow>:
 23fff64:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
 23fff74:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
 23fff84:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
 23fff94:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
 23fffa4:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
 23fffb4:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
 23fffc4:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

023fffd5 <link_const_data_end>:
 23fffd5:	00          	.byte	0x00
	...

023fffd8 <link_constructors_location>:
 23fffd8:	023fd2c1 	.word	0x023fd2c1
 23fffdc:	023fe6ed 	.word	0x023fe6ed
 23fffe0:	023fecc5 	.word	0x023fecc5
 23fffe4:	023feee1 	.word	0x023feee1
 23fffe8:	023ff041 	.word	0x023ff041
 23fffec:	023ff0e9 	.word	0x023ff0e9
 23ffff0:	023ff469 	.word	0x023ff469
 23ffff4:	023ff48d 	.word	0x023ff48d
 23ffff8:	023ff6b1 	.word	0x023ff6b1
