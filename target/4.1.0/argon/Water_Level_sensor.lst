
/Users/friedl/Desktop/Projects/Water_Level_sensor/target/4.1.0/argon/Water_Level_sensor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000b4000  000b4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000b4018  000b4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00003544  000b401c  000b401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .note.gnu.build-id 00000024  000b7560  000b7560  00007560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.exidx    00000008  000b7584  000b7584  00007584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .backup       00000004  2003f400  000b758c  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000088  2003e5ec  000b7590  0001e5ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000017c  2003e674  2003e674  0002e674  2**2
                  ALLOC
  8 .module_info_suffix 00000028  000b7618  000b7618  00027618  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .module_info_crc 00000004  000b7640  000b7640  00027640  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .debug_info   0012d67b  00000000  00000000  00027644  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000133dc  00000000  00000000  00154cbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_loc    0003a3ff  00000000  00000000  0016809b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00002d00  00000000  00000000  001a249a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_ranges 0000a7a0  00000000  00000000  001a519a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003a2a2  00000000  00000000  001af93a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0003efe3  00000000  00000000  001e9bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0014090b  00000000  00000000  00228bbf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00007f64  00000000  00000000  003694cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

000b401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b401c:	4809      	ldr	r0, [pc, #36]	; (b4044 <module_user_pre_init+0x28>)
   b401e:	490a      	ldr	r1, [pc, #40]	; (b4048 <module_user_pre_init+0x2c>)
   b4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   b4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   b4024:	d005      	beq.n	b4032 <module_user_pre_init+0x16>
   b4026:	4a09      	ldr	r2, [pc, #36]	; (b404c <module_user_pre_init+0x30>)
   b4028:	4282      	cmp	r2, r0
   b402a:	d002      	beq.n	b4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   b402c:	1a12      	subs	r2, r2, r0
   b402e:	f003 f875 	bl	b711c <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   b4032:	4807      	ldr	r0, [pc, #28]	; (b4050 <module_user_pre_init+0x34>)
   b4034:	4a07      	ldr	r2, [pc, #28]	; (b4054 <module_user_pre_init+0x38>)
   b4036:	2100      	movs	r1, #0
   b4038:	1a12      	subs	r2, r2, r0
   b403a:	f003 f87d 	bl	b7138 <memset>
    return &link_global_data_start;
}
   b403e:	4801      	ldr	r0, [pc, #4]	; (b4044 <module_user_pre_init+0x28>)
   b4040:	bd08      	pop	{r3, pc}
   b4042:	bf00      	nop
   b4044:	2003e5ec 	.word	0x2003e5ec
   b4048:	000b7590 	.word	0x000b7590
   b404c:	2003e674 	.word	0x2003e674
   b4050:	2003e674 	.word	0x2003e674
   b4054:	2003e7ed 	.word	0x2003e7ed

000b4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   b4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b405a:	4e07      	ldr	r6, [pc, #28]	; (b4078 <module_user_init+0x20>)
   b405c:	4c07      	ldr	r4, [pc, #28]	; (b407c <module_user_init+0x24>)
    module_user_init_hook();
   b405e:	f002 f91f 	bl	b62a0 <module_user_init_hook>
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4062:	1ba4      	subs	r4, r4, r6
   b4064:	08a4      	lsrs	r4, r4, #2
   b4066:	2500      	movs	r5, #0
   b4068:	42ac      	cmp	r4, r5
   b406a:	d100      	bne.n	b406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   b406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   b406e:	f856 3b04 	ldr.w	r3, [r6], #4
   b4072:	4798      	blx	r3
    for (size_t ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   b4074:	3501      	adds	r5, #1
   b4076:	e7f7      	b.n	b4068 <module_user_init+0x10>
   b4078:	000b7530 	.word	0x000b7530
   b407c:	000b7554 	.word	0x000b7554

000b4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   b4080:	f000 b816 	b.w	b40b0 <setup>

000b4084 <module_user_loop>:
}

void module_user_loop() {
   b4084:	b508      	push	{r3, lr}
    loop();
   b4086:	f000 f9dd 	bl	b4444 <loop>
    _post_loop();
}
   b408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   b408e:	f002 b8bf 	b.w	b6210 <_post_loop>

000b4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   b4092:	f000 bff9 	b.w	b5088 <malloc>

000b4096 <_Znaj>:
   b4096:	f000 bff7 	b.w	b5088 <malloc>

000b409a <_ZdlPvj>:
	free(p);
}

void operator delete(void *p, size_t size)
{
	free(p);
   b409a:	f000 bffd 	b.w	b5098 <free>

000b409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   b409e:	7800      	ldrb	r0, [r0, #0]
   b40a0:	fab0 f080 	clz	r0, r0
   b40a4:	0940      	lsrs	r0, r0, #5
   b40a6:	4770      	bx	lr

000b40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   b40a8:	2301      	movs	r3, #1
   b40aa:	7003      	strb	r3, [r0, #0]
   b40ac:	4770      	bx	lr
	...

000b40b0 <setup>:
int sensorValue;                                      // The integer value (between 0 and 4095) that we read from the sensor

//--  Other declarations  --//


void setup() {
   b40b0:	b510      	push	{r4, lr}

    Wire.begin();
                               
    pinMode(XSHUT, OUTPUT);                                                                          // Set to LOW when using SYSTEM MODE SEMI_AUTOMATIC 
   b40b2:	4c07      	ldr	r4, [pc, #28]	; (b40d0 <setup+0x20>)
    Wire.begin();
   b40b4:	f002 f9aa 	bl	b640c <_Z19__fetch_global_Wirev>
   b40b8:	f001 fb96 	bl	b57e8 <_ZN7TwoWire5beginEv>
    pinMode(XSHUT, OUTPUT);                                                                          // Set to LOW when using SYSTEM MODE SEMI_AUTOMATIC 
   b40bc:	8820      	ldrh	r0, [r4, #0]
   b40be:	2101      	movs	r1, #1
   b40c0:	f002 f95e 	bl	b6380 <pinMode>
    digitalWrite(XSHUT, LOW);
   b40c4:	8820      	ldrh	r0, [r4, #0]
   b40c6:	2100      	movs	r1, #0
}
   b40c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(XSHUT, LOW);
   b40cc:	f002 b969 	b.w	b63a2 <digitalWrite>
   b40d0:	2003e604 	.word	0x2003e604

000b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   b40d4:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   b40d6:	6804      	ldr	r4, [r0, #0]
      ~__shared_count() noexcept
   b40d8:	4605      	mov	r5, r0
	if (_M_pi != nullptr)
   b40da:	b17c      	cbz	r4, b40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
      if (--_M_use_count == 0)
   b40dc:	6863      	ldr	r3, [r4, #4]
   b40de:	3b01      	subs	r3, #1
   b40e0:	6063      	str	r3, [r4, #4]
   b40e2:	b95b      	cbnz	r3, b40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
          _M_dispose();
   b40e4:	6823      	ldr	r3, [r4, #0]
   b40e6:	4620      	mov	r0, r4
   b40e8:	689b      	ldr	r3, [r3, #8]
   b40ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
   b40ec:	68a3      	ldr	r3, [r4, #8]
   b40ee:	3b01      	subs	r3, #1
   b40f0:	60a3      	str	r3, [r4, #8]
   b40f2:	b91b      	cbnz	r3, b40fc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   b40f4:	6823      	ldr	r3, [r4, #0]
   b40f6:	4620      	mov	r0, r4
   b40f8:	68db      	ldr	r3, [r3, #12]
   b40fa:	4798      	blx	r3
	  _M_pi->_M_release();
      }
   b40fc:	4628      	mov	r0, r5
   b40fe:	bd38      	pop	{r3, r4, r5, pc}

000b4100 <_GLOBAL__sub_I_SystemMode>:
    ToF1();
    delay(5000);

    Sleep();                    // After readings system sleeps for 10 minutes

   b4100:	b538      	push	{r3, r4, r5, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b4102:	4b0a      	ldr	r3, [pc, #40]	; (b412c <_GLOBAL__sub_I_SystemMode+0x2c>)
};

PARTICLE_DEFINE_ENUM_COMPARISON_OPERATORS(UpdateStatus)

struct SleepResult {
    SleepResult() {}
   b4104:	4a0a      	ldr	r2, [pc, #40]	; (b4130 <_GLOBAL__sub_I_SystemMode+0x30>)
   b4106:	2501      	movs	r5, #1
   b4108:	701d      	strb	r5, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   b410a:	4b0a      	ldr	r3, [pc, #40]	; (b4134 <_GLOBAL__sub_I_SystemMode+0x34>)
   b410c:	2400      	movs	r4, #0
   b410e:	e9c3 4400 	strd	r4, r4, [r3]
    SleepResult() {}
   b4112:	609a      	str	r2, [r3, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b4114:	2002      	movs	r0, #2
   b4116:	f000 fee1 	bl	b4edc <set_system_mode>
SYSTEM_THREAD(ENABLED);                                 // DANGER!!! //
   b411a:	4628      	mov	r0, r5
   b411c:	4621      	mov	r1, r4
   b411e:	f000 feed 	bl	b4efc <system_thread_set_state>
   b4122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
VL53L1X sensor;
   b4126:	4804      	ldr	r0, [pc, #16]	; (b4138 <_GLOBAL__sub_I_SystemMode+0x38>)
   b4128:	f000 b9a6 	b.w	b4478 <_ZN7VL53L1XC1Ev>
   b412c:	2003e680 	.word	0x2003e680
   b4130:	ffff0000 	.word	0xffff0000
   b4134:	2003e674 	.word	0x2003e674
   b4138:	2003e688 	.word	0x2003e688

000b413c <_Z4ToF1v>:
void ToF1() {
   b413c:	b570      	push	{r4, r5, r6, lr}
   b413e:	ed2d 8b02 	vpush	{d8}
    digitalWrite(XSHUT, HIGH);                                      // Enable ToF
   b4142:	4d79      	ldr	r5, [pc, #484]	; (b4328 <_Z4ToF1v+0x1ec>)
    int value_prev = 0;                                             // The integaer value of the "prevous" sample.
   b4144:	ed9f 8a79 	vldr	s16, [pc, #484]	; b432c <_Z4ToF1v+0x1f0>
    digitalWrite(XSHUT, HIGH);                                      // Enable ToF
   b4148:	8828      	ldrh	r0, [r5, #0]
        int distance = sensor.read();                                                   //Get the result of the measurement from the sensor
   b414a:	4e79      	ldr	r6, [pc, #484]	; (b4330 <_Z4ToF1v+0x1f4>)
void ToF1() {
   b414c:	b08c      	sub	sp, #48	; 0x30
    digitalWrite(XSHUT, HIGH);                                      // Enable ToF
   b414e:	2101      	movs	r1, #1
   b4150:	f002 f927 	bl	b63a2 <digitalWrite>
    Wire.setClock(400000);                                          // use 400 kHz I2C     
   b4154:	f002 f95a 	bl	b640c <_Z19__fetch_global_Wirev>

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
  inline void setClock(uint32_t speed) {
	  setSpeed(speed);
   b4158:	4976      	ldr	r1, [pc, #472]	; (b4334 <_Z4ToF1v+0x1f8>)
   b415a:	f001 fb41 	bl	b57e0 <_ZN7TwoWire8setSpeedEm>
    sensor.init(0x29);
   b415e:	2101      	movs	r1, #1
   b4160:	4873      	ldr	r0, [pc, #460]	; (b4330 <_Z4ToF1v+0x1f4>)
   b4162:	f000 fcb6 	bl	b4ad2 <_ZN7VL53L1X4initEb>
    sensor.setDistanceMode(VL53L1X::Long);
   b4166:	2102      	movs	r1, #2
   b4168:	4871      	ldr	r0, [pc, #452]	; (b4330 <_Z4ToF1v+0x1f4>)
   b416a:	f000 fc39 	bl	b49e0 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>
    sensor.setMeasurementTimingBudget(50000);
   b416e:	f24c 3150 	movw	r1, #50000	; 0xc350
   b4172:	486f      	ldr	r0, [pc, #444]	; (b4330 <_Z4ToF1v+0x1f4>)
   b4174:	f000 fbb6 	bl	b48e4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
    sensor.startContinuous(50);                                                         // timing budget -- 50ms default
   b4178:	486d      	ldr	r0, [pc, #436]	; (b4330 <_Z4ToF1v+0x1f4>)
   b417a:	2132      	movs	r1, #50	; 0x32
   b417c:	f000 fa3d 	bl	b45fa <_ZN7VL53L1X15startContinuousEm>
   b4180:	2464      	movs	r4, #100	; 0x64
        int distance = sensor.read();                                                   //Get the result of the measurement from the sensor
   b4182:	2101      	movs	r1, #1
   b4184:	4630      	mov	r0, r6
   b4186:	f000 fb59 	bl	b483c <_ZN7VL53L1X4readEb>
        val_now = float(distance);
   b418a:	ee07 0a90 	vmov	s15, r0
        val_prev = float(value_prev);
   b418e:	eeb8 8ac8 	vcvt.f32.s32	s16, s16
        val_now = float(distance);
   b4192:	eef8 7ae7 	vcvt.f32.s32	s15, s15
for (int k=0; k<numSamples; k++) {
   b4196:	3c01      	subs	r4, #1
        accum = (val_now + val_prev);
   b4198:	ee78 7a27 	vadd.f32	s15, s16, s15
        value_prev = accum;
   b419c:	eebd 8ae7 	vcvt.s32.f32	s16, s15
for (int k=0; k<numSamples; k++) {
   b41a0:	d1ef      	bne.n	b4182 <_Z4ToF1v+0x46>
        avgValue = accum / numSamples;
   b41a2:	ed9f 7a65 	vldr	s14, [pc, #404]	; b4338 <_Z4ToF1v+0x1fc>
if (avgValue <=(L1_t) && avgValue >=(L1_b)) {            
   b41a6:	4b65      	ldr	r3, [pc, #404]	; (b433c <_Z4ToF1v+0x200>)
   b41a8:	4c65      	ldr	r4, [pc, #404]	; (b4340 <_Z4ToF1v+0x204>)
        avgValue = accum / numSamples;
   b41aa:	ee87 8a87 	vdiv.f32	s16, s15, s14
if (avgValue <=(L1_t) && avgValue >=(L1_b)) {            
   b41ae:	edd3 7a00 	vldr	s15, [r3]
   b41b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b41b6:	eef4 7ac8 	vcmpe.f32	s15, s16
   b41ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b41be:	db2a      	blt.n	b4216 <_Z4ToF1v+0xda>
   b41c0:	4b60      	ldr	r3, [pc, #384]	; (b4344 <_Z4ToF1v+0x208>)
   b41c2:	edd3 7a00 	vldr	s15, [r3]
   b41c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b41ca:	eef4 7ac8 	vcmpe.f32	s15, s16
   b41ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b41d2:	d820      	bhi.n	b4216 <_Z4ToF1v+0xda>
        tof1_level = 1;                               
   b41d4:	2301      	movs	r3, #1
    delay(50);
   b41d6:	2032      	movs	r0, #50	; 0x32
    } else { tof1_level = 4; 
   b41d8:	6023      	str	r3, [r4, #0]
    delay(50);
   b41da:	f000 ff8d 	bl	b50f8 <delay>
    digitalWrite(XSHUT, LOW);                                      // Disable ToF1 
   b41de:	8828      	ldrh	r0, [r5, #0]
if (tof1_level != level) {                                          // only send data if Level has shifted
   b41e0:	4d59      	ldr	r5, [pc, #356]	; (b4348 <_Z4ToF1v+0x20c>)
    digitalWrite(XSHUT, LOW);                                      // Disable ToF1 
   b41e2:	2100      	movs	r1, #0
   b41e4:	f002 f8dd 	bl	b63a2 <digitalWrite>
if (tof1_level != level) {                                          // only send data if Level has shifted
   b41e8:	6822      	ldr	r2, [r4, #0]
   b41ea:	682b      	ldr	r3, [r5, #0]
   b41ec:	429a      	cmp	r2, r3
   b41ee:	f000 8091 	beq.w	b4314 <_Z4ToF1v+0x1d8>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b41f2:	f000 fec9 	bl	b4f88 <spark_cloud_flag_connected>
    if (Particle.connected() == false) {
   b41f6:	4603      	mov	r3, r0
   b41f8:	2800      	cmp	r0, #0
   b41fa:	d147      	bne.n	b428c <_Z4ToF1v+0x150>
    virtual void setListenTimeout(uint16_t timeout);
    virtual uint16_t getListenTimeout();
    virtual bool listening();

    operator network_interface_t() const {
        return iface_;
   b41fc:	4e53      	ldr	r6, [pc, #332]	; (b434c <_Z4ToF1v+0x210>)
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   b41fe:	4602      	mov	r2, r0
   b4200:	4601      	mov	r1, r0
   b4202:	6870      	ldr	r0, [r6, #4]
   b4204:	f000 ff00 	bl	b5008 <network_on>
        waitUntil(WiFi.isOn);
   b4208:	4630      	mov	r0, r6
   b420a:	f001 fbcb 	bl	b59a4 <_ZN5spark12NetworkClass4isOnEv>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   b420e:	bb80      	cbnz	r0, b4272 <_Z4ToF1v+0x136>
            spark_process();
   b4210:	f000 feaa 	bl	b4f68 <spark_process>
        while (_while() && !_condition()) {
   b4214:	e7f8      	b.n	b4208 <_Z4ToF1v+0xcc>
        (avgValue <=(L2_t) && avgValue >=(L2_b)) {
   b4216:	4b4e      	ldr	r3, [pc, #312]	; (b4350 <_Z4ToF1v+0x214>)
   b4218:	edd3 7a00 	vldr	s15, [r3]
   b421c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    } else if                                       
   b4220:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4228:	db0b      	blt.n	b4242 <_Z4ToF1v+0x106>
        (avgValue <=(L2_t) && avgValue >=(L2_b)) {
   b422a:	4b4a      	ldr	r3, [pc, #296]	; (b4354 <_Z4ToF1v+0x218>)
   b422c:	edd3 7a00 	vldr	s15, [r3]
   b4230:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4234:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b423c:	d801      	bhi.n	b4242 <_Z4ToF1v+0x106>
        tof1_level = 2;
   b423e:	2302      	movs	r3, #2
   b4240:	e7c9      	b.n	b41d6 <_Z4ToF1v+0x9a>
        (avgValue <=(L3_t) && avgValue >=(L3_b)) {
   b4242:	4b45      	ldr	r3, [pc, #276]	; (b4358 <_Z4ToF1v+0x21c>)
   b4244:	edd3 7a00 	vldr	s15, [r3]
   b4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    } else if                                       
   b424c:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4254:	db0b      	blt.n	b426e <_Z4ToF1v+0x132>
        (avgValue <=(L3_t) && avgValue >=(L3_b)) {
   b4256:	4b41      	ldr	r3, [pc, #260]	; (b435c <_Z4ToF1v+0x220>)
   b4258:	edd3 7a00 	vldr	s15, [r3]
   b425c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   b4260:	eef4 7ac8 	vcmpe.f32	s15, s16
   b4264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   b4268:	d801      	bhi.n	b426e <_Z4ToF1v+0x132>
        tof1_level = 3;
   b426a:	2303      	movs	r3, #3
   b426c:	e7b3      	b.n	b41d6 <_Z4ToF1v+0x9a>
    } else { tof1_level = 4; 
   b426e:	2304      	movs	r3, #4
   b4270:	e7b1      	b.n	b41d6 <_Z4ToF1v+0x9a>
        waitUntil(WiFi.isOn);
   b4272:	4836      	ldr	r0, [pc, #216]	; (b434c <_Z4ToF1v+0x210>)
   b4274:	f001 fb96 	bl	b59a4 <_ZN5spark12NetworkClass4isOnEv>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   b4278:	f000 fe7e 	bl	b4f78 <spark_cloud_flag_connect>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b427c:	f000 fe84 	bl	b4f88 <spark_cloud_flag_connected>
   b4280:	b910      	cbnz	r0, b4288 <_Z4ToF1v+0x14c>
            spark_process();
   b4282:	f000 fe71 	bl	b4f68 <spark_process>
        while (_while() && !_condition()) {
   b4286:	e7f9      	b.n	b427c <_Z4ToF1v+0x140>
   b4288:	f000 fe7e 	bl	b4f88 <spark_cloud_flag_connected>
   b428c:	f000 fe7c 	bl	b4f88 <spark_cloud_flag_connected>
    if (Particle.connected() == true) {
   b4290:	2800      	cmp	r0, #0
   b4292:	d03f      	beq.n	b4314 <_Z4ToF1v+0x1d8>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
   b4294:	4932      	ldr	r1, [pc, #200]	; (b4360 <_Z4ToF1v+0x224>)
   b4296:	4e33      	ldr	r6, [pc, #204]	; (b4364 <_Z4ToF1v+0x228>)
   b4298:	a808      	add	r0, sp, #32
   b429a:	f001 fd1a 	bl	b5cd2 <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Water Level: " + String(tof1_level), PRIVATE);
   b429e:	220a      	movs	r2, #10
   b42a0:	6821      	ldr	r1, [r4, #0]
   b42a2:	a804      	add	r0, sp, #16
   b42a4:	f001 fd3b 	bl	b5d1e <_ZN6StringC1Eih>
   b42a8:	a904      	add	r1, sp, #16
   b42aa:	a808      	add	r0, sp, #32
   b42ac:	f001 fd7b 	bl	b5da6 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b42b0:	7833      	ldrb	r3, [r6, #0]
   b42b2:	6801      	ldr	r1, [r0, #0]
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   b42b4:	f88d 3000 	strb.w	r3, [sp]
   b42b8:	2200      	movs	r2, #0
   b42ba:	233c      	movs	r3, #60	; 0x3c
   b42bc:	a802      	add	r0, sp, #8
   b42be:	f001 f89b 	bl	b53f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	  __r._M_ptr = 0;
	}

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   b42c2:	a803      	add	r0, sp, #12
   b42c4:	f7ff ff06 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b42c8:	a804      	add	r0, sp, #16
   b42ca:	f001 fcb7 	bl	b5c3c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b42ce:	a808      	add	r0, sp, #32
   b42d0:	f001 fcb4 	bl	b5c3c <_ZN6StringD1Ev>
	StringSumHelper(const char *p) : String(p) {}
   b42d4:	4924      	ldr	r1, [pc, #144]	; (b4368 <_Z4ToF1v+0x22c>)
   b42d6:	a808      	add	r0, sp, #32
   b42d8:	f001 fcfb 	bl	b5cd2 <_ZN6StringC1EPK19__FlashStringHelper>
        Particle.publish("Level Distance: " + String(avgValue), PRIVATE);
   b42dc:	eeb0 0a48 	vmov.f32	s0, s16
   b42e0:	2106      	movs	r1, #6
   b42e2:	a804      	add	r0, sp, #16
   b42e4:	f001 fd2e 	bl	b5d44 <_ZN6StringC1Efi>
   b42e8:	a904      	add	r1, sp, #16
   b42ea:	a808      	add	r0, sp, #32
   b42ec:	f001 fd5b 	bl	b5da6 <_ZplRK15StringSumHelperRK6String>
	const char * c_str() const { return buffer; }
   b42f0:	7833      	ldrb	r3, [r6, #0]
   b42f2:	6801      	ldr	r1, [r0, #0]
   b42f4:	f88d 3000 	strb.w	r3, [sp]
   b42f8:	2200      	movs	r2, #0
   b42fa:	233c      	movs	r3, #60	; 0x3c
   b42fc:	a802      	add	r0, sp, #8
   b42fe:	f001 f87b 	bl	b53f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
   b4302:	a803      	add	r0, sp, #12
   b4304:	f7ff fee6 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b4308:	a804      	add	r0, sp, #16
   b430a:	f001 fc97 	bl	b5c3c <_ZN6StringD1Ev>
class StringSumHelper : public String
   b430e:	a808      	add	r0, sp, #32
   b4310:	f001 fc94 	bl	b5c3c <_ZN6StringD1Ev>
    level = tof1_level;
   b4314:	6823      	ldr	r3, [r4, #0]
   b4316:	602b      	str	r3, [r5, #0]
    delay(50);                     
   b4318:	2032      	movs	r0, #50	; 0x32
}
   b431a:	b00c      	add	sp, #48	; 0x30
   b431c:	ecbd 8b02 	vpop	{d8}
   b4320:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(50);                     
   b4324:	f000 bee8 	b.w	b50f8 <delay>
   b4328:	2003e604 	.word	0x2003e604
   b432c:	00000000 	.word	0x00000000
   b4330:	2003e688 	.word	0x2003e688
   b4334:	00061a80 	.word	0x00061a80
   b4338:	42c80000 	.word	0x42c80000
   b433c:	2003e5f0 	.word	0x2003e5f0
   b4340:	2003e6b4 	.word	0x2003e6b4
   b4344:	2003e5ec 	.word	0x2003e5ec
   b4348:	2003e684 	.word	0x2003e684
   b434c:	2003e70c 	.word	0x2003e70c
   b4350:	2003e5f8 	.word	0x2003e5f8
   b4354:	2003e5f4 	.word	0x2003e5f4
   b4358:	2003e600 	.word	0x2003e600
   b435c:	2003e5fc 	.word	0x2003e5fc
   b4360:	000b72e0 	.word	0x000b72e0
   b4364:	2003e680 	.word	0x2003e680
   b4368:	000b72ee 	.word	0x000b72ee

000b436c <_Z5Sleepv>:
void Sleep() {
   b436c:	b530      	push	{r4, r5, lr}
inline bool CloudDisconnectOptions::isGracefulSet() const {
    return (flags_ & SPARK_CLOUD_DISCONNECT_OPTION_GRACEFUL);
}

inline CloudDisconnectOptions& CloudDisconnectOptions::timeout(system_tick_t timeout) {
    timeout_ = timeout;
   b436e:	f241 3388 	movw	r3, #5000	; 0x1388
   b4372:	b08b      	sub	sp, #44	; 0x2c
   b4374:	2203      	movs	r2, #3
   b4376:	e9cd 2304 	strd	r2, r3, [sp, #16]
    Particle.disconnect(CloudDisconnectOptions().graceful(true).timeout(5000));       // Use only in SEMI_AUTOMATIC mode
   b437a:	a804      	add	r0, sp, #16
        bool clearSession) :
   b437c:	2301      	movs	r3, #1
   b437e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b4382:	f000 ff38 	bl	b51f6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
    static bool connected(void) { return spark_cloud_flag_connected(); }
   b4386:	f000 fdff 	bl	b4f88 <spark_cloud_flag_connected>
   b438a:	4604      	mov	r4, r0
   b438c:	b110      	cbz	r0, b4394 <_Z5Sleepv+0x28>
            spark_process();
   b438e:	f000 fdeb 	bl	b4f68 <spark_process>
        while (_while() && !_condition()) {
   b4392:	e7f8      	b.n	b4386 <_Z5Sleepv+0x1a>
   b4394:	4d27      	ldr	r5, [pc, #156]	; (b4434 <_Z5Sleepv+0xc8>)
   b4396:	f000 fdf7 	bl	b4f88 <spark_cloud_flag_connected>
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   b439a:	6868      	ldr	r0, [r5, #4]
   b439c:	4623      	mov	r3, r4
   b439e:	4622      	mov	r2, r4
   b43a0:	4621      	mov	r1, r4
   b43a2:	f000 fe39 	bl	b5018 <network_off>
    waitUntil(WiFi.isOff);
   b43a6:	4628      	mov	r0, r5
   b43a8:	f001 fb00 	bl	b59ac <_ZN5spark12NetworkClass5isOffEv>
   b43ac:	b910      	cbnz	r0, b43b4 <_Z5Sleepv+0x48>
            spark_process();
   b43ae:	f000 fddb 	bl	b4f68 <spark_process>
        while (_while() && !_condition()) {
   b43b2:	e7f8      	b.n	b43a6 <_Z5Sleepv+0x3a>
   b43b4:	481f      	ldr	r0, [pc, #124]	; (b4434 <_Z5Sleepv+0xc8>)
   b43b6:	f001 faf9 	bl	b59ac <_ZN5spark12NetworkClass5isOffEv>
    delay(50);
   b43ba:	2032      	movs	r0, #50	; 0x32
   b43bc:	f000 fe9c 	bl	b50f8 <delay>
ENABLE_ENUM_CLASS_BITWISE(SystemSleepNetworkFlag);

class SystemSleepConfigurationHelper {
public:
    SystemSleepConfigurationHelper(const hal_sleep_config_t* config)
        : config_(config) {
   b43c0:	ab05      	add	r3, sp, #20
   b43c2:	9304      	str	r3, [sp, #16]
public:
    // Constructor
    SystemSleepConfiguration()
            : SystemSleepConfigurationHelper(&config_),
              config_(),
              valid_(true) {
   b43c4:	2301      	movs	r3, #1
        config_.size = sizeof(hal_sleep_config_t);
   b43c6:	2210      	movs	r2, #16
              valid_(true) {
   b43c8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        config_.version = HAL_SLEEP_VERSION;
   b43cc:	2303      	movs	r3, #3
              valid_(true) {
   b43ce:	2500      	movs	r5, #0
        config_.version = HAL_SLEEP_VERSION;
   b43d0:	f8ad 3016 	strh.w	r3, [sp, #22]
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43d4:	4918      	ldr	r1, [pc, #96]	; (b4438 <_Z5Sleepv+0xcc>)
              valid_(true) {
   b43d6:	9508      	str	r5, [sp, #32]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b43d8:	2302      	movs	r3, #2
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43da:	4610      	mov	r0, r2
              valid_(true) {
   b43dc:	e9cd 5506 	strd	r5, r5, [sp, #24]
        config_.size = sizeof(hal_sleep_config_t);
   b43e0:	f8ad 2014 	strh.w	r2, [sp, #20]
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   b43e4:	f88d 3018 	strb.w	r3, [sp, #24]
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   b43e8:	f002 f874 	bl	b64d4 <_ZnwjRKSt9nothrow_t>
   b43ec:	4604      	mov	r4, r0
   b43ee:	b1e0      	cbz	r0, b442a <_Z5Sleepv+0xbe>
   b43f0:	2210      	movs	r2, #16
   b43f2:	4629      	mov	r1, r5
   b43f4:	f002 fea0 	bl	b7138 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   b43f8:	4b10      	ldr	r3, [pc, #64]	; (b443c <_Z5Sleepv+0xd0>)
   b43fa:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   b43fc:	2304      	movs	r3, #4
   b43fe:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   b4400:	9b08      	ldr	r3, [sp, #32]
   b4402:	60a3      	str	r3, [r4, #8]
            wakeupSource->ms = ms;
   b4404:	4b0e      	ldr	r3, [pc, #56]	; (b4440 <_Z5Sleepv+0xd4>)
   b4406:	60e3      	str	r3, [r4, #12]
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   b4408:	9408      	str	r4, [sp, #32]
System.sleep(config);
   b440a:	a801      	add	r0, sp, #4
   b440c:	a904      	add	r1, sp, #16
   b440e:	f001 fd05 	bl	b5e1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   b4412:	9801      	ldr	r0, [sp, #4]
   b4414:	b108      	cbz	r0, b441a <_Z5Sleepv+0xae>
            free(wakeupSource_);
   b4416:	f000 fe3f 	bl	b5098 <free>
        auto wakeupSource = config_.wakeup_sources;
   b441a:	9808      	ldr	r0, [sp, #32]
        while (wakeupSource) {
   b441c:	b140      	cbz	r0, b4430 <_Z5Sleepv+0xc4>
            auto next = wakeupSource->next;
   b441e:	6884      	ldr	r4, [r0, #8]
            delete wakeupSource;
   b4420:	210c      	movs	r1, #12
   b4422:	f7ff fe3a 	bl	b409a <_ZdlPvj>
            wakeupSource = next;
   b4426:	4620      	mov	r0, r4
        while (wakeupSource) {
   b4428:	e7f8      	b.n	b441c <_Z5Sleepv+0xb0>
                valid_ = false;
   b442a:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
                return *this;
   b442e:	e7ec      	b.n	b440a <_Z5Sleepv+0x9e>
}
   b4430:	b00b      	add	sp, #44	; 0x2c
   b4432:	bd30      	pop	{r4, r5, pc}
   b4434:	2003e70c 	.word	0x2003e70c
   b4438:	000b74bc 	.word	0x000b74bc
   b443c:	00030010 	.word	0x00030010
   b4440:	0001d4c0 	.word	0x0001d4c0

000b4444 <loop>:
void loop() {
   b4444:	b508      	push	{r3, lr}
    ToF1();
   b4446:	f7ff fe79 	bl	b413c <_Z4ToF1v>
    delay(5000);
   b444a:	f241 3088 	movw	r0, #5000	; 0x1388
   b444e:	f000 fe53 	bl	b50f8 <delay>
   b4452:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Sleep();                    // After readings system sleeps for 10 minutes
   b4456:	f7ff bf89 	b.w	b436c <_Z5Sleepv>

000b445a <_ZN7VL53L1X19checkTimeoutExpiredEv>:

    // Record the current time to check an upcoming timeout against
    void startTimeout() { timeout_start_ms = millis(); }

    // Check if timeout is enabled (set to nonzero value) and has expired
    bool checkTimeoutExpired() {return (io_timeout > 0) && ((uint16_t)(millis() - timeout_start_ms) > io_timeout); }
   b445a:	b510      	push	{r4, lr}
   b445c:	4604      	mov	r4, r0
   b445e:	8bc0      	ldrh	r0, [r0, #30]
   b4460:	b148      	cbz	r0, b4476 <_ZN7VL53L1X19checkTimeoutExpiredEv+0x1c>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4462:	f000 fc1b 	bl	b4c9c <HAL_Timer_Get_Milli_Seconds>
   b4466:	8c62      	ldrh	r2, [r4, #34]	; 0x22
   b4468:	8be3      	ldrh	r3, [r4, #30]
   b446a:	1a82      	subs	r2, r0, r2
   b446c:	b290      	uxth	r0, r2
   b446e:	4283      	cmp	r3, r0
   b4470:	bf2c      	ite	cs
   b4472:	2000      	movcs	r0, #0
   b4474:	2001      	movcc	r0, #1
   b4476:	bd10      	pop	{r4, pc}

000b4478 <_ZN7VL53L1XC1Ev>:

#include "../lib/tof/src/VL53L1X.h"

// Constructors ////////////////////////////////////////////////////////////////

VL53L1X::VL53L1X()
   b4478:	b510      	push	{r4, lr}
   b447a:	4604      	mov	r4, r0
#if !defined(NO_GLOBAL_INSTANCES) && !defined(NO_GLOBAL_TWOWIRE)
  : bus(&Wire)
   b447c:	f001 ffc6 	bl	b640c <_Z19__fetch_global_Wirev>
  , io_timeout(0) // no timeout
  , did_timeout(false)
  , calibrated(false)
  , saved_vhv_init(0)
  , saved_vhv_timeout(0)
  , distance_mode(Unknown)
   b4480:	2329      	movs	r3, #41	; 0x29
   b4482:	7723      	strb	r3, [r4, #28]
   b4484:	2300      	movs	r3, #0
   b4486:	83e3      	strh	r3, [r4, #30]
   b4488:	f884 3020 	strb.w	r3, [r4, #32]
   b448c:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
   b4490:	61a0      	str	r0, [r4, #24]
   b4492:	62a3      	str	r3, [r4, #40]	; 0x28
{
}
   b4494:	4620      	mov	r0, r4
   b4496:	bd10      	pop	{r4, pc}

000b4498 <_ZN7VL53L1X8writeRegEth>:
  return true;
}

// Write an 8-bit register
void VL53L1X::writeReg(uint16_t reg, uint8_t value)
{
   b4498:	b570      	push	{r4, r5, r6, lr}
   b449a:	4604      	mov	r4, r0
   b449c:	460d      	mov	r5, r1
  bus->beginTransmission(address);
   b449e:	7f01      	ldrb	r1, [r0, #28]
   b44a0:	6980      	ldr	r0, [r0, #24]
{
   b44a2:	4616      	mov	r6, r2
  bus->beginTransmission(address);
   b44a4:	f001 f9d2 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
   b44a8:	69a0      	ldr	r0, [r4, #24]
   b44aa:	6803      	ldr	r3, [r0, #0]
   b44ac:	0a29      	lsrs	r1, r5, #8
   b44ae:	689b      	ldr	r3, [r3, #8]
   b44b0:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
   b44b2:	69a0      	ldr	r0, [r4, #24]
   b44b4:	6803      	ldr	r3, [r0, #0]
   b44b6:	b2e9      	uxtb	r1, r5
   b44b8:	689b      	ldr	r3, [r3, #8]
   b44ba:	4798      	blx	r3
  bus->write(value);
   b44bc:	69a0      	ldr	r0, [r4, #24]
   b44be:	6803      	ldr	r3, [r0, #0]
   b44c0:	4631      	mov	r1, r6
   b44c2:	689b      	ldr	r3, [r3, #8]
   b44c4:	4798      	blx	r3
  last_status = bus->endTransmission();
   b44c6:	69a0      	ldr	r0, [r4, #24]
   b44c8:	f001 f9c8 	bl	b585c <_ZN7TwoWire15endTransmissionEv>
   b44cc:	7320      	strb	r0, [r4, #12]
}
   b44ce:	bd70      	pop	{r4, r5, r6, pc}

000b44d0 <_ZN7VL53L1X13writeReg16BitEtt>:

// Write a 16-bit register
void VL53L1X::writeReg16Bit(uint16_t reg, uint16_t value)
{
   b44d0:	b570      	push	{r4, r5, r6, lr}
   b44d2:	4604      	mov	r4, r0
   b44d4:	460e      	mov	r6, r1
  bus->beginTransmission(address);
   b44d6:	7f01      	ldrb	r1, [r0, #28]
   b44d8:	6980      	ldr	r0, [r0, #24]
{
   b44da:	4615      	mov	r5, r2
  bus->beginTransmission(address);
   b44dc:	f001 f9b6 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
   b44e0:	69a0      	ldr	r0, [r4, #24]
   b44e2:	6803      	ldr	r3, [r0, #0]
   b44e4:	0a31      	lsrs	r1, r6, #8
   b44e6:	689b      	ldr	r3, [r3, #8]
   b44e8:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
   b44ea:	69a0      	ldr	r0, [r4, #24]
   b44ec:	6803      	ldr	r3, [r0, #0]
   b44ee:	b2f1      	uxtb	r1, r6
   b44f0:	689b      	ldr	r3, [r3, #8]
   b44f2:	4798      	blx	r3
  bus->write((uint8_t)(value >> 8)); // value high byte
   b44f4:	69a0      	ldr	r0, [r4, #24]
   b44f6:	6803      	ldr	r3, [r0, #0]
   b44f8:	0a29      	lsrs	r1, r5, #8
   b44fa:	689b      	ldr	r3, [r3, #8]
   b44fc:	4798      	blx	r3
  bus->write((uint8_t)(value));      // value low byte
   b44fe:	69a0      	ldr	r0, [r4, #24]
   b4500:	6803      	ldr	r3, [r0, #0]
   b4502:	b2e9      	uxtb	r1, r5
   b4504:	689b      	ldr	r3, [r3, #8]
   b4506:	4798      	blx	r3
  last_status = bus->endTransmission();
   b4508:	69a0      	ldr	r0, [r4, #24]
   b450a:	f001 f9a7 	bl	b585c <_ZN7TwoWire15endTransmissionEv>
   b450e:	7320      	strb	r0, [r4, #12]
}
   b4510:	bd70      	pop	{r4, r5, r6, pc}

000b4512 <_ZN7VL53L1X13writeReg32BitEtm>:

// Write a 32-bit register
void VL53L1X::writeReg32Bit(uint16_t reg, uint32_t value)
{
   b4512:	b570      	push	{r4, r5, r6, lr}
   b4514:	4604      	mov	r4, r0
   b4516:	460e      	mov	r6, r1
  bus->beginTransmission(address);
   b4518:	7f01      	ldrb	r1, [r0, #28]
   b451a:	6980      	ldr	r0, [r0, #24]
{
   b451c:	4615      	mov	r5, r2
  bus->beginTransmission(address);
   b451e:	f001 f995 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
   b4522:	69a0      	ldr	r0, [r4, #24]
   b4524:	6803      	ldr	r3, [r0, #0]
   b4526:	0a31      	lsrs	r1, r6, #8
   b4528:	689b      	ldr	r3, [r3, #8]
   b452a:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
   b452c:	69a0      	ldr	r0, [r4, #24]
   b452e:	6803      	ldr	r3, [r0, #0]
   b4530:	b2f1      	uxtb	r1, r6
   b4532:	689b      	ldr	r3, [r3, #8]
   b4534:	4798      	blx	r3
  bus->write((uint8_t)(value >> 24)); // value highest byte
   b4536:	69a0      	ldr	r0, [r4, #24]
   b4538:	6803      	ldr	r3, [r0, #0]
   b453a:	0e29      	lsrs	r1, r5, #24
   b453c:	689b      	ldr	r3, [r3, #8]
   b453e:	4798      	blx	r3
  bus->write((uint8_t)(value >> 16));
   b4540:	69a0      	ldr	r0, [r4, #24]
   b4542:	6803      	ldr	r3, [r0, #0]
   b4544:	f3c5 4107 	ubfx	r1, r5, #16, #8
   b4548:	689b      	ldr	r3, [r3, #8]
   b454a:	4798      	blx	r3
  bus->write((uint8_t)(value >>  8));
   b454c:	69a0      	ldr	r0, [r4, #24]
   b454e:	6803      	ldr	r3, [r0, #0]
   b4550:	f3c5 2107 	ubfx	r1, r5, #8, #8
   b4554:	689b      	ldr	r3, [r3, #8]
   b4556:	4798      	blx	r3
  bus->write((uint8_t)(value));       // value lowest byte
   b4558:	69a0      	ldr	r0, [r4, #24]
   b455a:	6803      	ldr	r3, [r0, #0]
   b455c:	b2e9      	uxtb	r1, r5
   b455e:	689b      	ldr	r3, [r3, #8]
   b4560:	4798      	blx	r3
  last_status = bus->endTransmission();
   b4562:	69a0      	ldr	r0, [r4, #24]
   b4564:	f001 f97a 	bl	b585c <_ZN7TwoWire15endTransmissionEv>
   b4568:	7320      	strb	r0, [r4, #12]
}
   b456a:	bd70      	pop	{r4, r5, r6, pc}

000b456c <_ZN7VL53L1X7readRegENS_7regAddrE>:

// Read an 8-bit register
uint8_t VL53L1X::readReg(regAddr reg)
{
   b456c:	b538      	push	{r3, r4, r5, lr}
   b456e:	4604      	mov	r4, r0
   b4570:	460d      	mov	r5, r1
  uint8_t value;

  bus->beginTransmission(address);
   b4572:	7f01      	ldrb	r1, [r0, #28]
   b4574:	6980      	ldr	r0, [r0, #24]
   b4576:	f001 f969 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
   b457a:	69a0      	ldr	r0, [r4, #24]
   b457c:	6803      	ldr	r3, [r0, #0]
   b457e:	0a29      	lsrs	r1, r5, #8
   b4580:	689b      	ldr	r3, [r3, #8]
   b4582:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
   b4584:	69a0      	ldr	r0, [r4, #24]
   b4586:	6803      	ldr	r3, [r0, #0]
   b4588:	b2e9      	uxtb	r1, r5
   b458a:	689b      	ldr	r3, [r3, #8]
   b458c:	4798      	blx	r3
  last_status = bus->endTransmission();
   b458e:	69a0      	ldr	r0, [r4, #24]
   b4590:	f001 f964 	bl	b585c <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)1);
   b4594:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
   b4596:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)1);
   b4598:	2201      	movs	r2, #1
   b459a:	69a0      	ldr	r0, [r4, #24]
   b459c:	f001 f953 	bl	b5846 <_ZN7TwoWire11requestFromEhj>
  value = bus->read();
   b45a0:	69a0      	ldr	r0, [r4, #24]
   b45a2:	6803      	ldr	r3, [r0, #0]
   b45a4:	695b      	ldr	r3, [r3, #20]
   b45a6:	4798      	blx	r3

  return value;
}
   b45a8:	b2c0      	uxtb	r0, r0
   b45aa:	bd38      	pop	{r3, r4, r5, pc}

000b45ac <_ZN7VL53L1X12readReg16BitEt>:

// Read a 16-bit register
uint16_t VL53L1X::readReg16Bit(uint16_t reg)
{
   b45ac:	b538      	push	{r3, r4, r5, lr}
   b45ae:	4604      	mov	r4, r0
   b45b0:	460d      	mov	r5, r1
  uint16_t value;

  bus->beginTransmission(address);
   b45b2:	7f01      	ldrb	r1, [r0, #28]
   b45b4:	6980      	ldr	r0, [r0, #24]
   b45b6:	f001 f949 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(reg >> 8)); // reg high byte
   b45ba:	69a0      	ldr	r0, [r4, #24]
   b45bc:	6803      	ldr	r3, [r0, #0]
   b45be:	0a29      	lsrs	r1, r5, #8
   b45c0:	689b      	ldr	r3, [r3, #8]
   b45c2:	4798      	blx	r3
  bus->write((uint8_t)(reg));      // reg low byte
   b45c4:	69a0      	ldr	r0, [r4, #24]
   b45c6:	6803      	ldr	r3, [r0, #0]
   b45c8:	b2e9      	uxtb	r1, r5
   b45ca:	689b      	ldr	r3, [r3, #8]
   b45cc:	4798      	blx	r3
  last_status = bus->endTransmission();
   b45ce:	69a0      	ldr	r0, [r4, #24]
   b45d0:	f001 f944 	bl	b585c <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)2);
   b45d4:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
   b45d6:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)2);
   b45d8:	2202      	movs	r2, #2
   b45da:	69a0      	ldr	r0, [r4, #24]
   b45dc:	f001 f933 	bl	b5846 <_ZN7TwoWire11requestFromEhj>
  value  = (uint16_t)bus->read() << 8; // value high byte
   b45e0:	69a0      	ldr	r0, [r4, #24]
   b45e2:	6803      	ldr	r3, [r0, #0]
   b45e4:	695b      	ldr	r3, [r3, #20]
   b45e6:	4798      	blx	r3
   b45e8:	4605      	mov	r5, r0
  value |=           bus->read();      // value low byte
   b45ea:	69a0      	ldr	r0, [r4, #24]
   b45ec:	6803      	ldr	r3, [r0, #0]
   b45ee:	695b      	ldr	r3, [r3, #20]
   b45f0:	4798      	blx	r3
   b45f2:	ea40 2005 	orr.w	r0, r0, r5, lsl #8

  return value;
}
   b45f6:	b280      	uxth	r0, r0
   b45f8:	bd38      	pop	{r3, r4, r5, pc}

000b45fa <_ZN7VL53L1X15startContinuousEm>:
}

// Start continuous ranging measurements, with the given inter-measurement
// period in milliseconds determining how often the sensor takes a measurement.
void VL53L1X::startContinuous(uint32_t period_ms)
{
   b45fa:	b510      	push	{r4, lr}
  // from VL53L1_set_inter_measurement_period_ms()
  writeReg32Bit(SYSTEM__INTERMEASUREMENT_PERIOD, period_ms * osc_calibrate_val);
   b45fc:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
{
   b45fe:	4604      	mov	r4, r0
  writeReg32Bit(SYSTEM__INTERMEASUREMENT_PERIOD, period_ms * osc_calibrate_val);
   b4600:	434a      	muls	r2, r1
   b4602:	216c      	movs	r1, #108	; 0x6c
   b4604:	f7ff ff85 	bl	b4512 <_ZN7VL53L1X13writeReg32BitEtm>

  writeReg(SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
   b4608:	4620      	mov	r0, r4
   b460a:	2201      	movs	r2, #1
   b460c:	2186      	movs	r1, #134	; 0x86
   b460e:	f7ff ff43 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__MODE_START, 0x40); // mode_range__timed
   b4612:	4620      	mov	r0, r4
   b4614:	2240      	movs	r2, #64	; 0x40
}
   b4616:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeReg(SYSTEM__MODE_START, 0x40); // mode_range__timed
   b461a:	2187      	movs	r1, #135	; 0x87
   b461c:	f7ff bf3c 	b.w	b4498 <_ZN7VL53L1X8writeRegEth>

000b4620 <_ZN7VL53L1X22setupManualCalibrationEv>:

// "Setup ranges after the first one in low power auto mode by turning off
// FW calibration steps and programming static values"
// based on VL53L1_low_power_auto_setup_manual_calibration()
void VL53L1X::setupManualCalibration()
{
   b4620:	b510      	push	{r4, lr}
  // "save original vhv configs"
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
   b4622:	210b      	movs	r1, #11
{
   b4624:	4604      	mov	r4, r0
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
   b4626:	f7ff ffa1 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
   b462a:	2108      	movs	r1, #8
  saved_vhv_init = readReg(VHV_CONFIG__INIT);
   b462c:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
   b4630:	4620      	mov	r0, r4
   b4632:	f7ff ff9b 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>

  // "disable VHV init"
  writeReg(VHV_CONFIG__INIT, saved_vhv_init & 0x7F);
   b4636:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
  saved_vhv_timeout = readReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND);
   b463a:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  writeReg(VHV_CONFIG__INIT, saved_vhv_init & 0x7F);
   b463e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   b4642:	4620      	mov	r0, r4
   b4644:	210b      	movs	r1, #11
   b4646:	f7ff ff27 	bl	b4498 <_ZN7VL53L1X8writeRegEth>

  // "set loop bound to tuning param"
  writeReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
    (saved_vhv_timeout & 0x03) + (3 << 2)); // tuning parm default (LOWPOWERAUTO_VHV_LOOP_BOUND_DEFAULT)
   b464a:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
   b464e:	f002 0203 	and.w	r2, r2, #3
  writeReg(VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND,
   b4652:	4620      	mov	r0, r4
   b4654:	320c      	adds	r2, #12
   b4656:	2108      	movs	r1, #8
   b4658:	f7ff ff1e 	bl	b4498 <_ZN7VL53L1X8writeRegEth>

  // "override phasecal"
  writeReg(PHASECAL_CONFIG__OVERRIDE, 0x01);
   b465c:	2201      	movs	r2, #1
   b465e:	4620      	mov	r0, r4
   b4660:	214d      	movs	r1, #77	; 0x4d
   b4662:	f7ff ff19 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(CAL_CONFIG__VCSEL_START, readReg(PHASECAL_RESULT__VCSEL_START));
   b4666:	21d8      	movs	r1, #216	; 0xd8
   b4668:	4620      	mov	r0, r4
   b466a:	f7ff ff7f 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b466e:	2147      	movs	r1, #71	; 0x47
   b4670:	4602      	mov	r2, r0
   b4672:	4620      	mov	r0, r4
}
   b4674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  writeReg(CAL_CONFIG__VCSEL_START, readReg(PHASECAL_RESULT__VCSEL_START));
   b4678:	f7ff bf0e 	b.w	b4498 <_ZN7VL53L1X8writeRegEth>

000b467c <_ZN7VL53L1X11readResultsEv>:

// read measurement results into buffer
void VL53L1X::readResults()
{
   b467c:	b510      	push	{r4, lr}
   b467e:	4604      	mov	r4, r0
  bus->beginTransmission(address);
   b4680:	7f01      	ldrb	r1, [r0, #28]
   b4682:	6980      	ldr	r0, [r0, #24]
   b4684:	f001 f8e2 	bl	b584c <_ZN7TwoWire17beginTransmissionEh>
  bus->write((uint8_t)(RESULT__RANGE_STATUS >> 8)); // reg high byte
   b4688:	69a0      	ldr	r0, [r4, #24]
   b468a:	6803      	ldr	r3, [r0, #0]
   b468c:	2100      	movs	r1, #0
   b468e:	689b      	ldr	r3, [r3, #8]
   b4690:	4798      	blx	r3
  bus->write((uint8_t)(RESULT__RANGE_STATUS));      // reg low byte
   b4692:	69a0      	ldr	r0, [r4, #24]
   b4694:	6803      	ldr	r3, [r0, #0]
   b4696:	2189      	movs	r1, #137	; 0x89
   b4698:	689b      	ldr	r3, [r3, #8]
   b469a:	4798      	blx	r3
  last_status = bus->endTransmission();
   b469c:	69a0      	ldr	r0, [r4, #24]
   b469e:	f001 f8dd 	bl	b585c <_ZN7TwoWire15endTransmissionEv>

  bus->requestFrom(address, (uint8_t)17);
   b46a2:	7f21      	ldrb	r1, [r4, #28]
  last_status = bus->endTransmission();
   b46a4:	7320      	strb	r0, [r4, #12]
  bus->requestFrom(address, (uint8_t)17);
   b46a6:	2211      	movs	r2, #17
   b46a8:	69a0      	ldr	r0, [r4, #24]
   b46aa:	f001 f8cc 	bl	b5846 <_ZN7TwoWire11requestFromEhj>

  results.range_status = bus->read();
   b46ae:	69a0      	ldr	r0, [r4, #24]
   b46b0:	6803      	ldr	r3, [r0, #0]
   b46b2:	695b      	ldr	r3, [r3, #20]
   b46b4:	4798      	blx	r3
   b46b6:	73a0      	strb	r0, [r4, #14]

  bus->read(); // report_status: not used
   b46b8:	69a0      	ldr	r0, [r4, #24]
   b46ba:	6803      	ldr	r3, [r0, #0]
   b46bc:	695b      	ldr	r3, [r3, #20]
   b46be:	4798      	blx	r3

  results.stream_count = bus->read();
   b46c0:	69a0      	ldr	r0, [r4, #24]
   b46c2:	6803      	ldr	r3, [r0, #0]
   b46c4:	695b      	ldr	r3, [r3, #20]
   b46c6:	4798      	blx	r3
   b46c8:	73e0      	strb	r0, [r4, #15]

  results.dss_actual_effective_spads_sd0  = (uint16_t)bus->read() << 8; // high byte
   b46ca:	69a0      	ldr	r0, [r4, #24]
   b46cc:	6803      	ldr	r3, [r0, #0]
   b46ce:	695b      	ldr	r3, [r3, #20]
   b46d0:	4798      	blx	r3
   b46d2:	0200      	lsls	r0, r0, #8
   b46d4:	8220      	strh	r0, [r4, #16]
  results.dss_actual_effective_spads_sd0 |=           bus->read();      // low byte
   b46d6:	69a0      	ldr	r0, [r4, #24]
   b46d8:	6803      	ldr	r3, [r0, #0]
   b46da:	695b      	ldr	r3, [r3, #20]
   b46dc:	4798      	blx	r3
   b46de:	8a23      	ldrh	r3, [r4, #16]
   b46e0:	4318      	orrs	r0, r3
   b46e2:	8220      	strh	r0, [r4, #16]

  bus->read(); // peak_signal_count_rate_mcps_sd0: not used
   b46e4:	69a0      	ldr	r0, [r4, #24]
   b46e6:	6803      	ldr	r3, [r0, #0]
   b46e8:	695b      	ldr	r3, [r3, #20]
   b46ea:	4798      	blx	r3
  bus->read();
   b46ec:	69a0      	ldr	r0, [r4, #24]
   b46ee:	6803      	ldr	r3, [r0, #0]
   b46f0:	695b      	ldr	r3, [r3, #20]
   b46f2:	4798      	blx	r3

  results.ambient_count_rate_mcps_sd0  = (uint16_t)bus->read() << 8; // high byte
   b46f4:	69a0      	ldr	r0, [r4, #24]
   b46f6:	6803      	ldr	r3, [r0, #0]
   b46f8:	695b      	ldr	r3, [r3, #20]
   b46fa:	4798      	blx	r3
   b46fc:	0200      	lsls	r0, r0, #8
   b46fe:	8260      	strh	r0, [r4, #18]
  results.ambient_count_rate_mcps_sd0 |=           bus->read();      // low byte
   b4700:	69a0      	ldr	r0, [r4, #24]
   b4702:	6803      	ldr	r3, [r0, #0]
   b4704:	695b      	ldr	r3, [r3, #20]
   b4706:	4798      	blx	r3
   b4708:	8a63      	ldrh	r3, [r4, #18]
   b470a:	4318      	orrs	r0, r3
   b470c:	8260      	strh	r0, [r4, #18]

  bus->read(); // sigma_sd0: not used
   b470e:	69a0      	ldr	r0, [r4, #24]
   b4710:	6803      	ldr	r3, [r0, #0]
   b4712:	695b      	ldr	r3, [r3, #20]
   b4714:	4798      	blx	r3
  bus->read();
   b4716:	69a0      	ldr	r0, [r4, #24]
   b4718:	6803      	ldr	r3, [r0, #0]
   b471a:	695b      	ldr	r3, [r3, #20]
   b471c:	4798      	blx	r3

  bus->read(); // phase_sd0: not used
   b471e:	69a0      	ldr	r0, [r4, #24]
   b4720:	6803      	ldr	r3, [r0, #0]
   b4722:	695b      	ldr	r3, [r3, #20]
   b4724:	4798      	blx	r3
  bus->read();
   b4726:	69a0      	ldr	r0, [r4, #24]
   b4728:	6803      	ldr	r3, [r0, #0]
   b472a:	695b      	ldr	r3, [r3, #20]
   b472c:	4798      	blx	r3

  results.final_crosstalk_corrected_range_mm_sd0  = (uint16_t)bus->read() << 8; // high byte
   b472e:	69a0      	ldr	r0, [r4, #24]
   b4730:	6803      	ldr	r3, [r0, #0]
   b4732:	695b      	ldr	r3, [r3, #20]
   b4734:	4798      	blx	r3
   b4736:	0200      	lsls	r0, r0, #8
   b4738:	82a0      	strh	r0, [r4, #20]
  results.final_crosstalk_corrected_range_mm_sd0 |=           bus->read();      // low byte
   b473a:	69a0      	ldr	r0, [r4, #24]
   b473c:	6803      	ldr	r3, [r0, #0]
   b473e:	695b      	ldr	r3, [r3, #20]
   b4740:	4798      	blx	r3
   b4742:	8aa3      	ldrh	r3, [r4, #20]
   b4744:	4318      	orrs	r0, r3
   b4746:	82a0      	strh	r0, [r4, #20]

  results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0  = (uint16_t)bus->read() << 8; // high byte
   b4748:	69a0      	ldr	r0, [r4, #24]
   b474a:	6803      	ldr	r3, [r0, #0]
   b474c:	695b      	ldr	r3, [r3, #20]
   b474e:	4798      	blx	r3
   b4750:	0200      	lsls	r0, r0, #8
   b4752:	82e0      	strh	r0, [r4, #22]
  results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 |=           bus->read();      // low byte
   b4754:	69a0      	ldr	r0, [r4, #24]
   b4756:	6803      	ldr	r3, [r0, #0]
   b4758:	695b      	ldr	r3, [r3, #20]
   b475a:	4798      	blx	r3
   b475c:	8ae3      	ldrh	r3, [r4, #22]
   b475e:	4318      	orrs	r0, r3
   b4760:	82e0      	strh	r0, [r4, #22]
}
   b4762:	bd10      	pop	{r4, pc}

000b4764 <_ZN7VL53L1X9updateDSSEv>:

// perform Dynamic SPAD Selection calculation/update
// based on VL53L1_low_power_auto_update_DSS()
void VL53L1X::updateDSS()
{
   b4764:	b430      	push	{r4, r5}
  uint16_t spadCount = results.dss_actual_effective_spads_sd0;
   b4766:	8a04      	ldrh	r4, [r0, #16]
{
   b4768:	4603      	mov	r3, r0

  if (spadCount != 0)
   b476a:	b1d4      	cbz	r4, b47a2 <_ZN7VL53L1X9updateDSSEv+0x3e>
  {
    // "Calc total rate per spad"

    uint32_t totalRatePerSpad =
      (uint32_t)results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
      results.ambient_count_rate_mcps_sd0;
   b476c:	8a42      	ldrh	r2, [r0, #18]
      (uint32_t)results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0 +
   b476e:	8ac1      	ldrh	r1, [r0, #22]
   b4770:	f64f 75ff 	movw	r5, #65535	; 0xffff
    uint32_t totalRatePerSpad =
   b4774:	4411      	add	r1, r2

    // "clip to 16 bits"
    if (totalRatePerSpad > 0xFFFF) { totalRatePerSpad = 0xFFFF; }
   b4776:	42a9      	cmp	r1, r5
   b4778:	bf28      	it	cs
   b477a:	4629      	movcs	r1, r5
    // "shift up to take advantage of 32 bits"
    totalRatePerSpad <<= 16;

    totalRatePerSpad /= spadCount;

    if (totalRatePerSpad != 0)
   b477c:	ebb4 4f01 	cmp.w	r4, r1, lsl #16
    totalRatePerSpad <<= 16;
   b4780:	ea4f 4201 	mov.w	r2, r1, lsl #16
    if (totalRatePerSpad != 0)
   b4784:	d80d      	bhi.n	b47a2 <_ZN7VL53L1X9updateDSSEv+0x3e>
    totalRatePerSpad /= spadCount;
   b4786:	fbb2 f2f4 	udiv	r2, r2, r4
    {
      // "get the target rate and shift up by 16"
      uint32_t requiredSpads = ((uint32_t)TargetRate << 16) / totalRatePerSpad;
   b478a:	f04f 6320 	mov.w	r3, #167772160	; 0xa000000
   b478e:	fbb3 f2f2 	udiv	r2, r3, r2

      // "clip to 16 bit"
      if (requiredSpads > 0xFFFF) { requiredSpads = 0xFFFF; }

      // "override DSS config"
      writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, requiredSpads);
   b4792:	42aa      	cmp	r2, r5
   b4794:	bf28      	it	cs
   b4796:	462a      	movcs	r2, r5
   b4798:	b292      	uxth	r2, r2
   b479a:	2154      	movs	r1, #84	; 0x54
  // divide by zero.
  // "We want to gracefully set a spad target, not just exit with an error"

   // "set target to mid point"
   writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
}
   b479c:	bc30      	pop	{r4, r5}
   writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 0x8000);
   b479e:	f7ff be97 	b.w	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
   b47a2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   b47a6:	2154      	movs	r1, #84	; 0x54
   b47a8:	4618      	mov	r0, r3
   b47aa:	e7f7      	b.n	b479c <_ZN7VL53L1X9updateDSSEv+0x38>

000b47ac <_ZN7VL53L1X14getRangingDataEv>:

  // "apply correction gain"
  // gain factor of 2011 is tuning parm default (VL53L1_TUNINGPARM_LITE_RANGING_GAIN_FACTOR_DEFAULT)
  // Basically, this appears to scale the result by 2011/2048, or about 98%
  // (with the 1024 added for proper rounding).
  ranging_data.range_mm = ((uint32_t)range * 2011 + 0x0400) / 0x0800;
   b47ac:	8a83      	ldrh	r3, [r0, #20]
   b47ae:	f240 72db 	movw	r2, #2011	; 0x7db
   b47b2:	4353      	muls	r3, r2
   b47b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
   b47b8:	0adb      	lsrs	r3, r3, #11
   b47ba:	8003      	strh	r3, [r0, #0]

  // VL53L1_copy_sys_and_core_results_to_range_results() end

  // set range_status in ranging_data based on value of RESULT__RANGE_STATUS register
  // mostly based on ConvertStatusLite()
  switch(results.range_status)
   b47bc:	7b83      	ldrb	r3, [r0, #14]
   b47be:	3b01      	subs	r3, #1
   b47c0:	2b11      	cmp	r3, #17
   b47c2:	d837      	bhi.n	b4834 <_ZN7VL53L1X14getRangingDataEv+0x88>
   b47c4:	e8df f003 	tbb	[pc, r3]
   b47c8:	26090909 	.word	0x26090909
   b47cc:	2e2a2824 	.word	0x2e2a2824
   b47d0:	2c363630 	.word	0x2c363630
   b47d4:	36363620 	.word	0x36363620
   b47d8:	2209      	.short	0x2209
    case 17: // MULTCLIPFAIL
    case 2: // VCSELWATCHDOGTESTFAILURE
    case 1: // VCSELCONTINUITYTESTFAILURE
    case 3: // NOVHVVALUEFOUND
      // from SetSimpleData()
      ranging_data.range_status = HardwareFail;
   b47da:	2305      	movs	r3, #5
        ranging_data.range_status = RangeValid;
      }
      break;

    default:
      ranging_data.range_status = None;
   b47dc:	7083      	strb	r3, [r0, #2]
    static uint32_t timeoutMclksToMicroseconds(uint32_t timeout_mclks, uint32_t macro_period_us);
    static uint32_t timeoutMicrosecondsToMclks(uint32_t timeout_us, uint32_t macro_period_us);
    uint32_t calcMacroPeriod(uint8_t vcsel_period);

    // Convert count rate from fixed point 9.7 format to float
    float countRateFixedToFloat(uint16_t count_rate_fixed) { return (float)count_rate_fixed / (1 << 7); }
   b47de:	8ac3      	ldrh	r3, [r0, #22]
   b47e0:	eddf 6a15 	vldr	s13, [pc, #84]	; b4838 <_ZN7VL53L1X14getRangingDataEv+0x8c>
   b47e4:	ee07 3a10 	vmov	s14, r3
   b47e8:	8a43      	ldrh	r3, [r0, #18]
   b47ea:	ee07 3a90 	vmov	s15, r3
   b47ee:	eeb8 7a47 	vcvt.f32.u32	s14, s14
   b47f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
   b47f6:	ee27 7a26 	vmul.f32	s14, s14, s13
   b47fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
  }

  // from SetSimpleData()
  ranging_data.peak_signal_count_rate_MCPS =
   b47fe:	ed80 7a01 	vstr	s14, [r0, #4]
    countRateFixedToFloat(results.peak_signal_count_rate_crosstalk_corrected_mcps_sd0);
  ranging_data.ambient_count_rate_MCPS =
   b4802:	edc0 7a02 	vstr	s15, [r0, #8]
    countRateFixedToFloat(results.ambient_count_rate_mcps_sd0);
}
   b4806:	4770      	bx	lr
      ranging_data.range_status = MinRangeFail;
   b4808:	230d      	movs	r3, #13
   b480a:	e7e7      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SynchronizationInt;
   b480c:	230a      	movs	r3, #10
   b480e:	e7e5      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status =  OutOfBoundsFail;
   b4810:	2304      	movs	r3, #4
   b4812:	e7e3      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SignalFail;
   b4814:	2302      	movs	r3, #2
   b4816:	e7e1      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = SigmaFail;
   b4818:	2301      	movs	r3, #1
   b481a:	e7df      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = WrapTargetFail;
   b481c:	2307      	movs	r3, #7
   b481e:	e7dd      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = XtalkSignalFail;
   b4820:	2309      	movs	r3, #9
   b4822:	e7db      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = RangeValidMinRangeClipped;
   b4824:	2303      	movs	r3, #3
   b4826:	e7d9      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      if (results.stream_count == 0)
   b4828:	7bc3      	ldrb	r3, [r0, #15]
   b482a:	b90b      	cbnz	r3, b4830 <_ZN7VL53L1X14getRangingDataEv+0x84>
        ranging_data.range_status = RangeValidNoWrapCheckFail;
   b482c:	2306      	movs	r3, #6
   b482e:	e7d5      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
        ranging_data.range_status = RangeValid;
   b4830:	2300      	movs	r3, #0
   b4832:	e7d3      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
      ranging_data.range_status = None;
   b4834:	23ff      	movs	r3, #255	; 0xff
   b4836:	e7d1      	b.n	b47dc <_ZN7VL53L1X14getRangingDataEv+0x30>
   b4838:	3c000000 	.word	0x3c000000

000b483c <_ZN7VL53L1X4readEb>:
{
   b483c:	b538      	push	{r3, r4, r5, lr}
   b483e:	4604      	mov	r4, r0
  if (blocking)
   b4840:	b1a1      	cbz	r1, b486c <_ZN7VL53L1X4readEb+0x30>
   b4842:	f000 fa2b 	bl	b4c9c <HAL_Timer_Get_Milli_Seconds>
    void startTimeout() { timeout_start_ms = millis(); }
   b4846:	8460      	strh	r0, [r4, #34]	; 0x22
    bool dataReady() { return (readReg(GPIO__TIO_HV_STATUS) & 0x01) == 0; }
   b4848:	2131      	movs	r1, #49	; 0x31
   b484a:	4620      	mov	r0, r4
   b484c:	f7ff fe8e 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b4850:	43c0      	mvns	r0, r0
    while (!dataReady())
   b4852:	f010 0501 	ands.w	r5, r0, #1
   b4856:	d109      	bne.n	b486c <_ZN7VL53L1X4readEb+0x30>
      if (checkTimeoutExpired())
   b4858:	4620      	mov	r0, r4
   b485a:	f7ff fdfe 	bl	b445a <_ZN7VL53L1X19checkTimeoutExpiredEv>
   b485e:	2800      	cmp	r0, #0
   b4860:	d0f2      	beq.n	b4848 <_ZN7VL53L1X4readEb+0xc>
        did_timeout = true;
   b4862:	2301      	movs	r3, #1
   b4864:	f884 3020 	strb.w	r3, [r4, #32]
        return 0;
   b4868:	4628      	mov	r0, r5
}
   b486a:	bd38      	pop	{r3, r4, r5, pc}
  readResults();
   b486c:	4620      	mov	r0, r4
   b486e:	f7ff ff05 	bl	b467c <_ZN7VL53L1X11readResultsEv>
  if (!calibrated)
   b4872:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   b4876:	b92b      	cbnz	r3, b4884 <_ZN7VL53L1X4readEb+0x48>
    setupManualCalibration();
   b4878:	4620      	mov	r0, r4
   b487a:	f7ff fed1 	bl	b4620 <_ZN7VL53L1X22setupManualCalibrationEv>
    calibrated = true;
   b487e:	2301      	movs	r3, #1
   b4880:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
  updateDSS();
   b4884:	4620      	mov	r0, r4
   b4886:	f7ff ff6d 	bl	b4764 <_ZN7VL53L1X9updateDSSEv>
  getRangingData();
   b488a:	4620      	mov	r0, r4
   b488c:	f7ff ff8e 	bl	b47ac <_ZN7VL53L1X14getRangingDataEv>
  writeReg(SYSTEM__INTERRUPT_CLEAR, 0x01); // sys_interrupt_clear_range
   b4890:	2186      	movs	r1, #134	; 0x86
   b4892:	2201      	movs	r2, #1
   b4894:	f7ff fe00 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  return ranging_data.range_mm;
   b4898:	8820      	ldrh	r0, [r4, #0]
   b489a:	e7e6      	b.n	b486a <_ZN7VL53L1X4readEb+0x2e>

000b489c <_ZN7VL53L1X13decodeTimeoutEt>:

// Decode sequence step timeout in MCLKs from register value
// based on VL53L1_decode_timeout()
uint32_t VL53L1X::decodeTimeout(uint16_t reg_val)
{
  return ((uint32_t)(reg_val & 0xFF) << (reg_val >> 8)) + 1;
   b489c:	b2c3      	uxtb	r3, r0
   b489e:	0a00      	lsrs	r0, r0, #8
   b48a0:	fa03 f000 	lsl.w	r0, r3, r0
}
   b48a4:	3001      	adds	r0, #1
   b48a6:	4770      	bx	lr

000b48a8 <_ZN7VL53L1X13encodeTimeoutEm>:
  // encoded format: "(LSByte * 2^MSByte) + 1"

  uint32_t ls_byte = 0;
  uint16_t ms_byte = 0;

  if (timeout_mclks > 0)
   b48a8:	b160      	cbz	r0, b48c4 <_ZN7VL53L1X13encodeTimeoutEm+0x1c>
  {
    ls_byte = timeout_mclks - 1;
   b48aa:	3801      	subs	r0, #1
   b48ac:	2300      	movs	r3, #0

    while ((ls_byte & 0xFFFFFF00) > 0)
   b48ae:	f030 01ff 	bics.w	r1, r0, #255	; 0xff
   b48b2:	b29a      	uxth	r2, r3
   b48b4:	f103 0301 	add.w	r3, r3, #1
   b48b8:	d001      	beq.n	b48be <_ZN7VL53L1X13encodeTimeoutEm+0x16>
    {
      ls_byte >>= 1;
   b48ba:	0840      	lsrs	r0, r0, #1
    while ((ls_byte & 0xFFFFFF00) > 0)
   b48bc:	e7f7      	b.n	b48ae <_ZN7VL53L1X13encodeTimeoutEm+0x6>
      ms_byte++;
    }

    return (ms_byte << 8) | (ls_byte & 0xFF);
   b48be:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   b48c2:	b280      	uxth	r0, r0
  }
  else { return 0; }
}
   b48c4:	4770      	bx	lr

000b48c6 <_ZN7VL53L1X15calcMacroPeriodEh>:
// based on VL53L1_calc_macro_period_us()
uint32_t VL53L1X::calcMacroPeriod(uint8_t vcsel_period)
{
  // from VL53L1_calc_pll_period_us()
  // fast osc frequency in 4.12 format; PLL period in 0.24 format
  uint32_t pll_period_us = ((uint32_t)0x01 << 30) / fast_osc_frequency;
   b48c6:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   b48c8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
   b48cc:	fbb0 f0f3 	udiv	r0, r0, r3

  // from VL53L1_decode_vcsel_period()
  uint8_t vcsel_period_pclks = (vcsel_period + 1) << 1;

  // VL53L1_MACRO_PERIOD_VCSEL_PERIODS = 2304
  uint32_t macro_period_us = (uint32_t)2304 * pll_period_us;
   b48d0:	f44f 6310 	mov.w	r3, #2304	; 0x900
   b48d4:	4358      	muls	r0, r3
  macro_period_us >>= 6;
   b48d6:	0983      	lsrs	r3, r0, #6
  uint8_t vcsel_period_pclks = (vcsel_period + 1) << 1;
   b48d8:	1c48      	adds	r0, r1, #1
   b48da:	0040      	lsls	r0, r0, #1
  macro_period_us *= vcsel_period_pclks;
   b48dc:	b2c0      	uxtb	r0, r0
   b48de:	4358      	muls	r0, r3
  macro_period_us >>= 6;

  return macro_period_us;
   b48e0:	0980      	lsrs	r0, r0, #6
   b48e2:	4770      	bx	lr

000b48e4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>:
  if (budget_us <= TimingGuard) { return false; }
   b48e4:	f241 13b0 	movw	r3, #4528	; 0x11b0
   b48e8:	4299      	cmp	r1, r3
{
   b48ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   b48ee:	4605      	mov	r5, r0
  if (budget_us <= TimingGuard) { return false; }
   b48f0:	d956      	bls.n	b49a0 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xbc>
  if (range_config_timeout_us > 1100000) { return false; } // FDA_MAX_TIMING_BUDGET_US * 2
   b48f2:	4b2c      	ldr	r3, [pc, #176]	; (b49a4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xc0>)
  uint32_t range_config_timeout_us = budget_us -= TimingGuard;
   b48f4:	f5a1 548d 	sub.w	r4, r1, #4512	; 0x11a0
   b48f8:	3c10      	subs	r4, #16
  if (range_config_timeout_us > 1100000) { return false; } // FDA_MAX_TIMING_BUDGET_US * 2
   b48fa:	429c      	cmp	r4, r3
   b48fc:	d850      	bhi.n	b49a0 <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xbc>
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
   b48fe:	2160      	movs	r1, #96	; 0x60
   b4900:	f7ff fe34 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b4904:	4601      	mov	r1, r0
   b4906:	4628      	mov	r0, r5
   b4908:	f7ff ffdd 	bl	b48c6 <_ZN7VL53L1X15calcMacroPeriodEh>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b490c:	0847      	lsrs	r7, r0, #1
   b490e:	f507 127a 	add.w	r2, r7, #4096000	; 0x3e8000
   b4912:	fbb2 f2f0 	udiv	r2, r2, r0
  writeReg(PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);
   b4916:	2aff      	cmp	r2, #255	; 0xff
   b4918:	bf28      	it	cs
   b491a:	22ff      	movcs	r2, #255	; 0xff
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
   b491c:	4606      	mov	r6, r0
  writeReg(PHASECAL_CONFIG__TIMEOUT_MACROP, phasecal_timeout_mclks);
   b491e:	b2d2      	uxtb	r2, r2
   b4920:	214b      	movs	r1, #75	; 0x4b
   b4922:	4628      	mov	r0, r5
   b4924:	f7ff fdb8 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b4928:	f507 5080 	add.w	r0, r7, #4096	; 0x1000
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
   b492c:	fbb0 f0f6 	udiv	r0, r0, r6
   b4930:	f7ff ffba 	bl	b48a8 <_ZN7VL53L1X13encodeTimeoutEm>
  range_config_timeout_us /= 2;
   b4934:	0864      	lsrs	r4, r4, #1
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
   b4936:	4602      	mov	r2, r0
   b4938:	215a      	movs	r1, #90	; 0x5a
   b493a:	4628      	mov	r0, r5
   b493c:	f7ff fdc8 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b4940:	ea4f 3804 	mov.w	r8, r4, lsl #12
   b4944:	eb07 3404 	add.w	r4, r7, r4, lsl #12
  writeReg16Bit(RANGE_CONFIG__TIMEOUT_MACROP_A, encodeTimeout(
   b4948:	fbb4 f0f6 	udiv	r0, r4, r6
   b494c:	f7ff ffac 	bl	b48a8 <_ZN7VL53L1X13encodeTimeoutEm>
   b4950:	215e      	movs	r1, #94	; 0x5e
   b4952:	4602      	mov	r2, r0
   b4954:	4628      	mov	r0, r5
   b4956:	f7ff fdbb 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_B));
   b495a:	2163      	movs	r1, #99	; 0x63
   b495c:	4628      	mov	r0, r5
   b495e:	f7ff fe05 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b4962:	4601      	mov	r1, r0
   b4964:	4628      	mov	r0, r5
   b4966:	f7ff ffae 	bl	b48c6 <_ZN7VL53L1X15calcMacroPeriodEh>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b496a:	0846      	lsrs	r6, r0, #1
  macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_B));
   b496c:	4604      	mov	r4, r0
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b496e:	f506 5080 	add.w	r0, r6, #4096	; 0x1000
  writeReg16Bit(MM_CONFIG__TIMEOUT_MACROP_B, encodeTimeout(
   b4972:	fbb0 f0f4 	udiv	r0, r0, r4
   b4976:	f7ff ff97 	bl	b48a8 <_ZN7VL53L1X13encodeTimeoutEm>
   b497a:	215c      	movs	r1, #92	; 0x5c
   b497c:	4602      	mov	r2, r0
   b497e:	4628      	mov	r0, r5
   b4980:	f7ff fda6 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  return (((uint32_t)timeout_us << 12) + (macro_period_us >> 1)) / macro_period_us;
   b4984:	eb08 0006 	add.w	r0, r8, r6
  writeReg16Bit(RANGE_CONFIG__TIMEOUT_MACROP_B, encodeTimeout(
   b4988:	fbb0 f0f4 	udiv	r0, r0, r4
   b498c:	f7ff ff8c 	bl	b48a8 <_ZN7VL53L1X13encodeTimeoutEm>
   b4990:	2161      	movs	r1, #97	; 0x61
   b4992:	4602      	mov	r2, r0
   b4994:	4628      	mov	r0, r5
   b4996:	f7ff fd9b 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  return true;
   b499a:	2001      	movs	r0, #1
}
   b499c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (budget_us <= TimingGuard) { return false; }
   b49a0:	2000      	movs	r0, #0
   b49a2:	e7fb      	b.n	b499c <_ZN7VL53L1X26setMeasurementTimingBudgetEm+0xb8>
   b49a4:	0010c8e0 	.word	0x0010c8e0

000b49a8 <_ZN7VL53L1X26getMeasurementTimingBudgetEv>:
{
   b49a8:	b538      	push	{r3, r4, r5, lr}
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
   b49aa:	2160      	movs	r1, #96	; 0x60
{
   b49ac:	4605      	mov	r5, r0
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
   b49ae:	f7ff fddd 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b49b2:	4601      	mov	r1, r0
   b49b4:	4628      	mov	r0, r5
   b49b6:	f7ff ff86 	bl	b48c6 <_ZN7VL53L1X15calcMacroPeriodEh>
  uint32_t range_config_timeout_us = timeoutMclksToMicroseconds(decodeTimeout(
   b49ba:	215e      	movs	r1, #94	; 0x5e
  uint32_t macro_period_us = calcMacroPeriod(readReg(RANGE_CONFIG__VCSEL_PERIOD_A));
   b49bc:	4604      	mov	r4, r0
  uint32_t range_config_timeout_us = timeoutMclksToMicroseconds(decodeTimeout(
   b49be:	4628      	mov	r0, r5
   b49c0:	f7ff fdf4 	bl	b45ac <_ZN7VL53L1X12readReg16BitEt>
   b49c4:	f7ff ff6a 	bl	b489c <_ZN7VL53L1X13decodeTimeoutEt>
  return ((uint64_t)timeout_mclks * macro_period_us + 0x800) >> 12;
   b49c8:	2200      	movs	r2, #0
   b49ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
   b49ce:	fbe4 3200 	umlal	r3, r2, r4, r0
   b49d2:	0b18      	lsrs	r0, r3, #12
   b49d4:	ea40 5002 	orr.w	r0, r0, r2, lsl #20
  return  2 * range_config_timeout_us + TimingGuard;
   b49d8:	f600 00d8 	addw	r0, r0, #2264	; 0x8d8
}
   b49dc:	0040      	lsls	r0, r0, #1
   b49de:	bd38      	pop	{r3, r4, r5, pc}

000b49e0 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>:
{
   b49e0:	b570      	push	{r4, r5, r6, lr}
   b49e2:	460d      	mov	r5, r1
   b49e4:	4604      	mov	r4, r0
  uint32_t budget_us = getMeasurementTimingBudget();
   b49e6:	f7ff ffdf 	bl	b49a8 <_ZN7VL53L1X26getMeasurementTimingBudgetEv>
  switch (mode)
   b49ea:	2d01      	cmp	r5, #1
  uint32_t budget_us = getMeasurementTimingBudget();
   b49ec:	4606      	mov	r6, r0
  switch (mode)
   b49ee:	d02e      	beq.n	b4a4e <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x6e>
   b49f0:	2d02      	cmp	r5, #2
   b49f2:	d04c      	beq.n	b4a8e <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0xae>
   b49f4:	2d00      	cmp	r5, #0
   b49f6:	d16a      	bne.n	b4ace <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0xee>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x07);
   b49f8:	2207      	movs	r2, #7
   b49fa:	2160      	movs	r1, #96	; 0x60
   b49fc:	4620      	mov	r0, r4
   b49fe:	f7ff fd4b 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x05);
   b4a02:	2205      	movs	r2, #5
   b4a04:	2163      	movs	r1, #99	; 0x63
   b4a06:	4620      	mov	r0, r4
   b4a08:	f7ff fd46 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0x38);
   b4a0c:	2238      	movs	r2, #56	; 0x38
   b4a0e:	2169      	movs	r1, #105	; 0x69
   b4a10:	4620      	mov	r0, r4
   b4a12:	f7ff fd41 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x07);
   b4a16:	2207      	movs	r2, #7
   b4a18:	2178      	movs	r1, #120	; 0x78
   b4a1a:	4620      	mov	r0, r4
   b4a1c:	f7ff fd3c 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x05);
   b4a20:	2205      	movs	r2, #5
   b4a22:	2179      	movs	r1, #121	; 0x79
   b4a24:	4620      	mov	r0, r4
   b4a26:	f7ff fd37 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 6); // tuning parm default
   b4a2a:	2206      	movs	r2, #6
   b4a2c:	217a      	movs	r1, #122	; 0x7a
   b4a2e:	4620      	mov	r0, r4
   b4a30:	f7ff fd32 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 6); // tuning parm default
   b4a34:	2206      	movs	r2, #6
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
   b4a36:	217b      	movs	r1, #123	; 0x7b
   b4a38:	4620      	mov	r0, r4
   b4a3a:	f7ff fd2d 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  setMeasurementTimingBudget(budget_us);
   b4a3e:	4631      	mov	r1, r6
   b4a40:	4620      	mov	r0, r4
   b4a42:	f7ff ff4f 	bl	b48e4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
  distance_mode = mode;
   b4a46:	f884 502b 	strb.w	r5, [r4, #43]	; 0x2b
  return true;
   b4a4a:	2001      	movs	r0, #1
}
   b4a4c:	bd70      	pop	{r4, r5, r6, pc}
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x0B);
   b4a4e:	220b      	movs	r2, #11
   b4a50:	2160      	movs	r1, #96	; 0x60
   b4a52:	4620      	mov	r0, r4
   b4a54:	f7ff fd20 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x09);
   b4a58:	2209      	movs	r2, #9
   b4a5a:	2163      	movs	r1, #99	; 0x63
   b4a5c:	4620      	mov	r0, r4
   b4a5e:	f7ff fd1b 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0x78);
   b4a62:	2278      	movs	r2, #120	; 0x78
   b4a64:	2169      	movs	r1, #105	; 0x69
   b4a66:	4620      	mov	r0, r4
   b4a68:	f7ff fd16 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x0B);
   b4a6c:	220b      	movs	r2, #11
   b4a6e:	2178      	movs	r1, #120	; 0x78
   b4a70:	4620      	mov	r0, r4
   b4a72:	f7ff fd11 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x09);
   b4a76:	2209      	movs	r2, #9
   b4a78:	2179      	movs	r1, #121	; 0x79
   b4a7a:	4620      	mov	r0, r4
   b4a7c:	f7ff fd0c 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 10); // tuning parm default
   b4a80:	220a      	movs	r2, #10
   b4a82:	217a      	movs	r1, #122	; 0x7a
   b4a84:	4620      	mov	r0, r4
   b4a86:	f7ff fd07 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 10); // tuning parm default
   b4a8a:	220a      	movs	r2, #10
   b4a8c:	e7d3      	b.n	b4a36 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x56>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_A, 0x0F);
   b4a8e:	220f      	movs	r2, #15
   b4a90:	2160      	movs	r1, #96	; 0x60
   b4a92:	4620      	mov	r0, r4
   b4a94:	f7ff fd00 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VCSEL_PERIOD_B, 0x0D);
   b4a98:	220d      	movs	r2, #13
   b4a9a:	2163      	movs	r1, #99	; 0x63
   b4a9c:	4620      	mov	r0, r4
   b4a9e:	f7ff fcfb 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(RANGE_CONFIG__VALID_PHASE_HIGH, 0xB8);
   b4aa2:	22b8      	movs	r2, #184	; 0xb8
   b4aa4:	2169      	movs	r1, #105	; 0x69
   b4aa6:	4620      	mov	r0, r4
   b4aa8:	f7ff fcf6 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD0, 0x0F);
   b4aac:	220f      	movs	r2, #15
   b4aae:	2178      	movs	r1, #120	; 0x78
   b4ab0:	4620      	mov	r0, r4
   b4ab2:	f7ff fcf1 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__WOI_SD1, 0x0D);
   b4ab6:	220d      	movs	r2, #13
   b4ab8:	2179      	movs	r1, #121	; 0x79
   b4aba:	4620      	mov	r0, r4
   b4abc:	f7ff fcec 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD0, 14); // tuning parm default
   b4ac0:	220e      	movs	r2, #14
   b4ac2:	217a      	movs	r1, #122	; 0x7a
   b4ac4:	4620      	mov	r0, r4
   b4ac6:	f7ff fce7 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
      writeReg(SD_CONFIG__INITIAL_PHASE_SD1, 14); // tuning parm default
   b4aca:	220e      	movs	r2, #14
   b4acc:	e7b3      	b.n	b4a36 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x56>
  switch (mode)
   b4ace:	2000      	movs	r0, #0
   b4ad0:	e7bc      	b.n	b4a4c <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE+0x6c>

000b4ad2 <_ZN7VL53L1X4initEb>:
{
   b4ad2:	b538      	push	{r3, r4, r5, lr}
   b4ad4:	460d      	mov	r5, r1
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
   b4ad6:	f240 110f 	movw	r1, #271	; 0x10f
{
   b4ada:	4604      	mov	r4, r0
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
   b4adc:	f7ff fd66 	bl	b45ac <_ZN7VL53L1X12readReg16BitEt>
   b4ae0:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   b4ae4:	4298      	cmp	r0, r3
   b4ae6:	f040 80be 	bne.w	b4c66 <_ZN7VL53L1X4initEb+0x194>
  writeReg(SOFT_RESET, 0x00);
   b4aea:	2200      	movs	r2, #0
   b4aec:	4611      	mov	r1, r2
   b4aee:	4620      	mov	r0, r4
   b4af0:	f7ff fcd2 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
   b4af4:	2064      	movs	r0, #100	; 0x64
   b4af6:	f000 f8c9 	bl	b4c8c <HAL_Delay_Microseconds>
  writeReg(SOFT_RESET, 0x01);
   b4afa:	2201      	movs	r2, #1
   b4afc:	2100      	movs	r1, #0
   b4afe:	4620      	mov	r0, r4
   b4b00:	f7ff fcca 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  delay(1);
   b4b04:	2001      	movs	r0, #1
   b4b06:	f000 faf7 	bl	b50f8 <delay>
inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   b4b0a:	f000 f8c7 	bl	b4c9c <HAL_Timer_Get_Milli_Seconds>
    void startTimeout() { timeout_start_ms = millis(); }
   b4b0e:	8460      	strh	r0, [r4, #34]	; 0x22
  while ((readReg(FIRMWARE__SYSTEM_STATUS) & 0x01) == 0 || last_status != 0)
   b4b10:	21e5      	movs	r1, #229	; 0xe5
   b4b12:	4620      	mov	r0, r4
   b4b14:	f7ff fd2a 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
   b4b18:	07c3      	lsls	r3, r0, #31
   b4b1a:	f140 809b 	bpl.w	b4c54 <_ZN7VL53L1X4initEb+0x182>
   b4b1e:	7b23      	ldrb	r3, [r4, #12]
   b4b20:	2b00      	cmp	r3, #0
   b4b22:	f040 8097 	bne.w	b4c54 <_ZN7VL53L1X4initEb+0x182>
  if (io_2v8)
   b4b26:	b155      	cbz	r5, b4b3e <_ZN7VL53L1X4initEb+0x6c>
      readReg(PAD_I2C_HV__EXTSUP_CONFIG) | 0x01);
   b4b28:	212e      	movs	r1, #46	; 0x2e
   b4b2a:	4620      	mov	r0, r4
   b4b2c:	f7ff fd1e 	bl	b456c <_ZN7VL53L1X7readRegENS_7regAddrE>
    writeReg(PAD_I2C_HV__EXTSUP_CONFIG,
   b4b30:	f040 0001 	orr.w	r0, r0, #1
   b4b34:	b2c2      	uxtb	r2, r0
   b4b36:	212e      	movs	r1, #46	; 0x2e
   b4b38:	4620      	mov	r0, r4
   b4b3a:	f7ff fcad 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  fast_osc_frequency = readReg16Bit(OSC_MEASURED__FAST_OSC__FREQUENCY);
   b4b3e:	2106      	movs	r1, #6
   b4b40:	4620      	mov	r0, r4
   b4b42:	f7ff fd33 	bl	b45ac <_ZN7VL53L1X12readReg16BitEt>
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
   b4b46:	21de      	movs	r1, #222	; 0xde
  fast_osc_frequency = readReg16Bit(OSC_MEASURED__FAST_OSC__FREQUENCY);
   b4b48:	84a0      	strh	r0, [r4, #36]	; 0x24
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
   b4b4a:	4620      	mov	r0, r4
   b4b4c:	f7ff fd2e 	bl	b45ac <_ZN7VL53L1X12readReg16BitEt>
  writeReg16Bit(DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, TargetRate); // should already be this value after reset
   b4b50:	f44f 6220 	mov.w	r2, #2560	; 0xa00
  osc_calibrate_val = readReg16Bit(RESULT__OSC_CALIBRATE_VAL);
   b4b54:	84e0      	strh	r0, [r4, #38]	; 0x26
  writeReg16Bit(DSS_CONFIG__TARGET_TOTAL_RATE_MCPS, TargetRate); // should already be this value after reset
   b4b56:	2124      	movs	r1, #36	; 0x24
   b4b58:	4620      	mov	r0, r4
   b4b5a:	f7ff fcb9 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(GPIO__TIO_HV_STATUS, 0x02);
   b4b5e:	2202      	movs	r2, #2
   b4b60:	2131      	movs	r1, #49	; 0x31
   b4b62:	4620      	mov	r0, r4
   b4b64:	f7ff fc98 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SIGMA_ESTIMATOR__EFFECTIVE_PULSE_WIDTH_NS, 8); // tuning parm default
   b4b68:	2208      	movs	r2, #8
   b4b6a:	2136      	movs	r1, #54	; 0x36
   b4b6c:	4620      	mov	r0, r4
   b4b6e:	f7ff fc93 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SIGMA_ESTIMATOR__EFFECTIVE_AMBIENT_WIDTH_NS, 16); // tuning parm default
   b4b72:	2210      	movs	r2, #16
   b4b74:	2137      	movs	r1, #55	; 0x37
   b4b76:	4620      	mov	r0, r4
   b4b78:	f7ff fc8e 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__CROSSTALK_COMPENSATION_VALID_HEIGHT_MM, 0x01);
   b4b7c:	2201      	movs	r2, #1
   b4b7e:	2139      	movs	r1, #57	; 0x39
   b4b80:	4620      	mov	r0, r4
   b4b82:	f7ff fc89 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__RANGE_IGNORE_VALID_HEIGHT_MM, 0xFF);
   b4b86:	22ff      	movs	r2, #255	; 0xff
   b4b88:	213e      	movs	r1, #62	; 0x3e
   b4b8a:	4620      	mov	r0, r4
   b4b8c:	f7ff fc84 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__RANGE_MIN_CLIP, 0); // tuning parm default
   b4b90:	2200      	movs	r2, #0
   b4b92:	213f      	movs	r1, #63	; 0x3f
   b4b94:	4620      	mov	r0, r4
   b4b96:	f7ff fc7f 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(ALGO__CONSISTENCY_CHECK__TOLERANCE, 2); // tuning parm default
   b4b9a:	2202      	movs	r2, #2
   b4b9c:	2140      	movs	r1, #64	; 0x40
   b4b9e:	4620      	mov	r0, r4
   b4ba0:	f7ff fc7a 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(SYSTEM__THRESH_RATE_HIGH, 0x0000);
   b4ba4:	2200      	movs	r2, #0
   b4ba6:	2150      	movs	r1, #80	; 0x50
   b4ba8:	4620      	mov	r0, r4
   b4baa:	f7ff fc91 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg16Bit(SYSTEM__THRESH_RATE_LOW, 0x0000);
   b4bae:	2200      	movs	r2, #0
   b4bb0:	2152      	movs	r1, #82	; 0x52
   b4bb2:	4620      	mov	r0, r4
   b4bb4:	f7ff fc8c 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(DSS_CONFIG__APERTURE_ATTENUATION, 0x38);
   b4bb8:	2238      	movs	r2, #56	; 0x38
   b4bba:	2157      	movs	r1, #87	; 0x57
   b4bbc:	4620      	mov	r0, r4
   b4bbe:	f7ff fc6b 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(RANGE_CONFIG__SIGMA_THRESH, 360); // tuning parm default
   b4bc2:	f44f 72b4 	mov.w	r2, #360	; 0x168
   b4bc6:	2164      	movs	r1, #100	; 0x64
   b4bc8:	4620      	mov	r0, r4
   b4bca:	f7ff fc81 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg16Bit(RANGE_CONFIG__MIN_COUNT_RATE_RTN_LIMIT_MCPS, 192); // tuning parm default
   b4bce:	22c0      	movs	r2, #192	; 0xc0
   b4bd0:	2166      	movs	r1, #102	; 0x66
   b4bd2:	4620      	mov	r0, r4
   b4bd4:	f7ff fc7c 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD_0, 0x01);
   b4bd8:	2201      	movs	r2, #1
   b4bda:	2171      	movs	r1, #113	; 0x71
   b4bdc:	4620      	mov	r0, r4
   b4bde:	f7ff fc5b 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD_1, 0x01);
   b4be2:	2201      	movs	r2, #1
   b4be4:	217c      	movs	r1, #124	; 0x7c
   b4be6:	4620      	mov	r0, r4
   b4be8:	f7ff fc56 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SD_CONFIG__QUANTIFIER, 2); // tuning parm default
   b4bec:	2202      	movs	r2, #2
   b4bee:	217e      	movs	r1, #126	; 0x7e
   b4bf0:	4620      	mov	r0, r4
   b4bf2:	f7ff fc51 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__GROUPED_PARAMETER_HOLD, 0x00);
   b4bf6:	2200      	movs	r2, #0
   b4bf8:	2182      	movs	r1, #130	; 0x82
   b4bfa:	4620      	mov	r0, r4
   b4bfc:	f7ff fc4c 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__SEED_CONFIG, 1); // tuning parm default
   b4c00:	2201      	movs	r2, #1
   b4c02:	2177      	movs	r1, #119	; 0x77
   b4c04:	4620      	mov	r0, r4
   b4c06:	f7ff fc47 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg(SYSTEM__SEQUENCE_CONFIG, 0x8B); // VHV, PHASECAL, DSS1, RANGE
   b4c0a:	228b      	movs	r2, #139	; 0x8b
   b4c0c:	2181      	movs	r1, #129	; 0x81
   b4c0e:	4620      	mov	r0, r4
   b4c10:	f7ff fc42 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  writeReg16Bit(DSS_CONFIG__MANUAL_EFFECTIVE_SPADS_SELECT, 200 << 8);
   b4c14:	f44f 4248 	mov.w	r2, #51200	; 0xc800
   b4c18:	2154      	movs	r1, #84	; 0x54
   b4c1a:	4620      	mov	r0, r4
   b4c1c:	f7ff fc58 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  writeReg(DSS_CONFIG__ROI_MODE_CONTROL, 2); // REQUESTED_EFFFECTIVE_SPADS
   b4c20:	2202      	movs	r2, #2
   b4c22:	214f      	movs	r1, #79	; 0x4f
   b4c24:	4620      	mov	r0, r4
   b4c26:	f7ff fc37 	bl	b4498 <_ZN7VL53L1X8writeRegEth>
  setDistanceMode(Long);
   b4c2a:	2102      	movs	r1, #2
   b4c2c:	4620      	mov	r0, r4
   b4c2e:	f7ff fed7 	bl	b49e0 <_ZN7VL53L1X15setDistanceModeENS_12DistanceModeE>
  setMeasurementTimingBudget(50000);
   b4c32:	f24c 3150 	movw	r1, #50000	; 0xc350
   b4c36:	4620      	mov	r0, r4
   b4c38:	f7ff fe54 	bl	b48e4 <_ZN7VL53L1X26setMeasurementTimingBudgetEm>
    readReg16Bit(MM_CONFIG__OUTER_OFFSET_MM) * 4);
   b4c3c:	2122      	movs	r1, #34	; 0x22
   b4c3e:	4620      	mov	r0, r4
   b4c40:	f7ff fcb4 	bl	b45ac <_ZN7VL53L1X12readReg16BitEt>
  writeReg16Bit(ALGO__PART_TO_PART_RANGE_OFFSET_MM,
   b4c44:	0080      	lsls	r0, r0, #2
   b4c46:	b282      	uxth	r2, r0
   b4c48:	211e      	movs	r1, #30
   b4c4a:	4620      	mov	r0, r4
   b4c4c:	f7ff fc40 	bl	b44d0 <_ZN7VL53L1X13writeReg16BitEtt>
  return true;
   b4c50:	2001      	movs	r0, #1
}
   b4c52:	bd38      	pop	{r3, r4, r5, pc}
    if (checkTimeoutExpired())
   b4c54:	4620      	mov	r0, r4
   b4c56:	f7ff fc00 	bl	b445a <_ZN7VL53L1X19checkTimeoutExpiredEv>
   b4c5a:	2800      	cmp	r0, #0
   b4c5c:	f43f af58 	beq.w	b4b10 <_ZN7VL53L1X4initEb+0x3e>
      did_timeout = true;
   b4c60:	2301      	movs	r3, #1
   b4c62:	f884 3020 	strb.w	r3, [r4, #32]
  if (readReg16Bit(IDENTIFICATION__MODEL_ID) != 0xEACC) { return false; }
   b4c66:	2000      	movs	r0, #0
   b4c68:	e7f3      	b.n	b4c52 <_ZN7VL53L1X4initEb+0x180>
	...

000b4c6c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   b4c6c:	b508      	push	{r3, lr}
   b4c6e:	4b02      	ldr	r3, [pc, #8]	; (b4c78 <os_mutex_recursive_create+0xc>)
   b4c70:	681b      	ldr	r3, [r3, #0]
   b4c72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4c74:	9301      	str	r3, [sp, #4]
   b4c76:	bd08      	pop	{r3, pc}
   b4c78:	00030248 	.word	0x00030248

000b4c7c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > PLATFORM_GCC
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   b4c7c:	b508      	push	{r3, lr}
   b4c7e:	4b02      	ldr	r3, [pc, #8]	; (b4c88 <HAL_RNG_GetRandomNumber+0xc>)
   b4c80:	681b      	ldr	r3, [r3, #0]
   b4c82:	685b      	ldr	r3, [r3, #4]
   b4c84:	9301      	str	r3, [sp, #4]
   b4c86:	bd08      	pop	{r3, pc}
   b4c88:	00030218 	.word	0x00030218

000b4c8c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif // PLATFORM_ID > PLATFORM_GCC

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   b4c8c:	b508      	push	{r3, lr}
   b4c8e:	4b02      	ldr	r3, [pc, #8]	; (b4c98 <HAL_Delay_Microseconds+0xc>)
   b4c90:	681b      	ldr	r3, [r3, #0]
   b4c92:	68db      	ldr	r3, [r3, #12]
   b4c94:	9301      	str	r3, [sp, #4]
   b4c96:	bd08      	pop	{r3, pc}
   b4c98:	00030218 	.word	0x00030218

000b4c9c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   b4c9c:	b508      	push	{r3, lr}
   b4c9e:	4b02      	ldr	r3, [pc, #8]	; (b4ca8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   b4ca0:	681b      	ldr	r3, [r3, #0]
   b4ca2:	695b      	ldr	r3, [r3, #20]
   b4ca4:	9301      	str	r3, [sp, #4]
   b4ca6:	bd08      	pop	{r3, pc}
   b4ca8:	00030218 	.word	0x00030218

000b4cac <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   b4cac:	b508      	push	{r3, lr}
   b4cae:	4b02      	ldr	r3, [pc, #8]	; (b4cb8 <HAL_Pin_Mode+0xc>)
   b4cb0:	681b      	ldr	r3, [r3, #0]
   b4cb2:	689b      	ldr	r3, [r3, #8]
   b4cb4:	9301      	str	r3, [sp, #4]
   b4cb6:	bd08      	pop	{r3, pc}
   b4cb8:	0003022c 	.word	0x0003022c

000b4cbc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   b4cbc:	b508      	push	{r3, lr}
   b4cbe:	4b02      	ldr	r3, [pc, #8]	; (b4cc8 <HAL_Get_Pin_Mode+0xc>)
   b4cc0:	681b      	ldr	r3, [r3, #0]
   b4cc2:	68db      	ldr	r3, [r3, #12]
   b4cc4:	9301      	str	r3, [sp, #4]
   b4cc6:	bd08      	pop	{r3, pc}
   b4cc8:	0003022c 	.word	0x0003022c

000b4ccc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   b4ccc:	b508      	push	{r3, lr}
   b4cce:	4b02      	ldr	r3, [pc, #8]	; (b4cd8 <HAL_GPIO_Write+0xc>)
   b4cd0:	681b      	ldr	r3, [r3, #0]
   b4cd2:	691b      	ldr	r3, [r3, #16]
   b4cd4:	9301      	str	r3, [sp, #4]
   b4cd6:	bd08      	pop	{r3, pc}
   b4cd8:	0003022c 	.word	0x0003022c

000b4cdc <hal_i2c_set_speed>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_i2c)

DYNALIB_FN(0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
   b4cdc:	b508      	push	{r3, lr}
   b4cde:	4b02      	ldr	r3, [pc, #8]	; (b4ce8 <hal_i2c_set_speed+0xc>)
   b4ce0:	681b      	ldr	r3, [r3, #0]
   b4ce2:	681b      	ldr	r3, [r3, #0]
   b4ce4:	9301      	str	r3, [sp, #4]
   b4ce6:	bd08      	pop	{r3, pc}
   b4ce8:	00030228 	.word	0x00030228

000b4cec <hal_i2c_begin>:
DYNALIB_FN(1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   b4cec:	b508      	push	{r3, lr}
   b4cee:	4b02      	ldr	r3, [pc, #8]	; (b4cf8 <hal_i2c_begin+0xc>)
   b4cf0:	681b      	ldr	r3, [r3, #0]
   b4cf2:	68db      	ldr	r3, [r3, #12]
   b4cf4:	9301      	str	r3, [sp, #4]
   b4cf6:	bd08      	pop	{r3, pc}
   b4cf8:	00030228 	.word	0x00030228

000b4cfc <hal_i2c_begin_transmission>:
DYNALIB_FN(4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   b4cfc:	b508      	push	{r3, lr}
   b4cfe:	4b02      	ldr	r3, [pc, #8]	; (b4d08 <hal_i2c_begin_transmission+0xc>)
   b4d00:	681b      	ldr	r3, [r3, #0]
   b4d02:	699b      	ldr	r3, [r3, #24]
   b4d04:	9301      	str	r3, [sp, #4]
   b4d06:	bd08      	pop	{r3, pc}
   b4d08:	00030228 	.word	0x00030228

000b4d0c <hal_i2c_end_transmission>:
DYNALIB_FN(7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   b4d0c:	b508      	push	{r3, lr}
   b4d0e:	4b02      	ldr	r3, [pc, #8]	; (b4d18 <hal_i2c_end_transmission+0xc>)
   b4d10:	681b      	ldr	r3, [r3, #0]
   b4d12:	69db      	ldr	r3, [r3, #28]
   b4d14:	9301      	str	r3, [sp, #4]
   b4d16:	bd08      	pop	{r3, pc}
   b4d18:	00030228 	.word	0x00030228

000b4d1c <hal_i2c_write>:
DYNALIB_FN(8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   b4d1c:	b508      	push	{r3, lr}
   b4d1e:	4b02      	ldr	r3, [pc, #8]	; (b4d28 <hal_i2c_write+0xc>)
   b4d20:	681b      	ldr	r3, [r3, #0]
   b4d22:	6a1b      	ldr	r3, [r3, #32]
   b4d24:	9301      	str	r3, [sp, #4]
   b4d26:	bd08      	pop	{r3, pc}
   b4d28:	00030228 	.word	0x00030228

000b4d2c <hal_i2c_available>:
DYNALIB_FN(9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   b4d2c:	b508      	push	{r3, lr}
   b4d2e:	4b02      	ldr	r3, [pc, #8]	; (b4d38 <hal_i2c_available+0xc>)
   b4d30:	681b      	ldr	r3, [r3, #0]
   b4d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   b4d34:	9301      	str	r3, [sp, #4]
   b4d36:	bd08      	pop	{r3, pc}
   b4d38:	00030228 	.word	0x00030228

000b4d3c <hal_i2c_read>:
DYNALIB_FN(10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   b4d3c:	b508      	push	{r3, lr}
   b4d3e:	4b02      	ldr	r3, [pc, #8]	; (b4d48 <hal_i2c_read+0xc>)
   b4d40:	681b      	ldr	r3, [r3, #0]
   b4d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4d44:	9301      	str	r3, [sp, #4]
   b4d46:	bd08      	pop	{r3, pc}
   b4d48:	00030228 	.word	0x00030228

000b4d4c <hal_i2c_peek>:
DYNALIB_FN(11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   b4d4c:	b508      	push	{r3, lr}
   b4d4e:	4b02      	ldr	r3, [pc, #8]	; (b4d58 <hal_i2c_peek+0xc>)
   b4d50:	681b      	ldr	r3, [r3, #0]
   b4d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4d54:	9301      	str	r3, [sp, #4]
   b4d56:	bd08      	pop	{r3, pc}
   b4d58:	00030228 	.word	0x00030228

000b4d5c <hal_i2c_flush>:
DYNALIB_FN(12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   b4d5c:	b508      	push	{r3, lr}
   b4d5e:	4b02      	ldr	r3, [pc, #8]	; (b4d68 <hal_i2c_flush+0xc>)
   b4d60:	681b      	ldr	r3, [r3, #0]
   b4d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b4d64:	9301      	str	r3, [sp, #4]
   b4d66:	bd08      	pop	{r3, pc}
   b4d68:	00030228 	.word	0x00030228

000b4d6c <hal_i2c_is_enabled>:
DYNALIB_FN(13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   b4d6c:	b508      	push	{r3, lr}
   b4d6e:	4b02      	ldr	r3, [pc, #8]	; (b4d78 <hal_i2c_is_enabled+0xc>)
   b4d70:	681b      	ldr	r3, [r3, #0]
   b4d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b4d74:	9301      	str	r3, [sp, #4]
   b4d76:	bd08      	pop	{r3, pc}
   b4d78:	00030228 	.word	0x00030228

000b4d7c <hal_i2c_init>:
DYNALIB_FN(14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   b4d7c:	b508      	push	{r3, lr}
   b4d7e:	4b02      	ldr	r3, [pc, #8]	; (b4d88 <hal_i2c_init+0xc>)
   b4d80:	681b      	ldr	r3, [r3, #0]
   b4d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4d84:	9301      	str	r3, [sp, #4]
   b4d86:	bd08      	pop	{r3, pc}
   b4d88:	00030228 	.word	0x00030228

000b4d8c <hal_i2c_request_ex>:
DYNALIB_FN(17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   b4d8c:	b508      	push	{r3, lr}
   b4d8e:	4b02      	ldr	r3, [pc, #8]	; (b4d98 <hal_i2c_request_ex+0xc>)
   b4d90:	681b      	ldr	r3, [r3, #0]
   b4d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4d94:	9301      	str	r3, [sp, #4]
   b4d96:	bd08      	pop	{r3, pc}
   b4d98:	00030228 	.word	0x00030228

000b4d9c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   b4d9c:	b508      	push	{r3, lr}
   b4d9e:	4b02      	ldr	r3, [pc, #8]	; (b4da8 <inet_inet_ntop+0xc>)
   b4da0:	681b      	ldr	r3, [r3, #0]
   b4da2:	695b      	ldr	r3, [r3, #20]
   b4da4:	9301      	str	r3, [sp, #4]
   b4da6:	bd08      	pop	{r3, pc}
   b4da8:	00030264 	.word	0x00030264

000b4dac <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   b4dac:	b508      	push	{r3, lr}
   b4dae:	4b02      	ldr	r3, [pc, #8]	; (b4db8 <netdb_freeaddrinfo+0xc>)
   b4db0:	681b      	ldr	r3, [r3, #0]
   b4db2:	689b      	ldr	r3, [r3, #8]
   b4db4:	9301      	str	r3, [sp, #4]
   b4db6:	bd08      	pop	{r3, pc}
   b4db8:	00030268 	.word	0x00030268

000b4dbc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   b4dbc:	b508      	push	{r3, lr}
   b4dbe:	4b02      	ldr	r3, [pc, #8]	; (b4dc8 <netdb_getaddrinfo+0xc>)
   b4dc0:	681b      	ldr	r3, [r3, #0]
   b4dc2:	68db      	ldr	r3, [r3, #12]
   b4dc4:	9301      	str	r3, [sp, #4]
   b4dc6:	bd08      	pop	{r3, pc}
   b4dc8:	00030268 	.word	0x00030268

000b4dcc <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   b4dcc:	b508      	push	{r3, lr}
   b4dce:	4b02      	ldr	r3, [pc, #8]	; (b4dd8 <hal_spi_init+0xc>)
   b4dd0:	681b      	ldr	r3, [r3, #0]
   b4dd2:	69db      	ldr	r3, [r3, #28]
   b4dd4:	9301      	str	r3, [sp, #4]
   b4dd6:	bd08      	pop	{r3, pc}
   b4dd8:	00030230 	.word	0x00030230

000b4ddc <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   b4ddc:	b508      	push	{r3, lr}
   b4dde:	4b02      	ldr	r3, [pc, #8]	; (b4de8 <hal_spi_is_enabled+0xc>)
   b4de0:	681b      	ldr	r3, [r3, #0]
   b4de2:	6a1b      	ldr	r3, [r3, #32]
   b4de4:	9301      	str	r3, [sp, #4]
   b4de6:	bd08      	pop	{r3, pc}
   b4de8:	00030230 	.word	0x00030230

000b4dec <hal_usart_write>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   b4dec:	b508      	push	{r3, lr}
   b4dee:	4b02      	ldr	r3, [pc, #8]	; (b4df8 <hal_usart_write+0xc>)
   b4df0:	681b      	ldr	r3, [r3, #0]
   b4df2:	68db      	ldr	r3, [r3, #12]
   b4df4:	9301      	str	r3, [sp, #4]
   b4df6:	bd08      	pop	{r3, pc}
   b4df8:	0003023c 	.word	0x0003023c

000b4dfc <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   b4dfc:	b508      	push	{r3, lr}
   b4dfe:	4b02      	ldr	r3, [pc, #8]	; (b4e08 <hal_usart_available+0xc>)
   b4e00:	681b      	ldr	r3, [r3, #0]
   b4e02:	691b      	ldr	r3, [r3, #16]
   b4e04:	9301      	str	r3, [sp, #4]
   b4e06:	bd08      	pop	{r3, pc}
   b4e08:	0003023c 	.word	0x0003023c

000b4e0c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   b4e0c:	b508      	push	{r3, lr}
   b4e0e:	4b02      	ldr	r3, [pc, #8]	; (b4e18 <hal_usart_read+0xc>)
   b4e10:	681b      	ldr	r3, [r3, #0]
   b4e12:	695b      	ldr	r3, [r3, #20]
   b4e14:	9301      	str	r3, [sp, #4]
   b4e16:	bd08      	pop	{r3, pc}
   b4e18:	0003023c 	.word	0x0003023c

000b4e1c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   b4e1c:	b508      	push	{r3, lr}
   b4e1e:	4b02      	ldr	r3, [pc, #8]	; (b4e28 <hal_usart_peek+0xc>)
   b4e20:	681b      	ldr	r3, [r3, #0]
   b4e22:	699b      	ldr	r3, [r3, #24]
   b4e24:	9301      	str	r3, [sp, #4]
   b4e26:	bd08      	pop	{r3, pc}
   b4e28:	0003023c 	.word	0x0003023c

000b4e2c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   b4e2c:	b508      	push	{r3, lr}
   b4e2e:	4b02      	ldr	r3, [pc, #8]	; (b4e38 <hal_usart_flush+0xc>)
   b4e30:	681b      	ldr	r3, [r3, #0]
   b4e32:	69db      	ldr	r3, [r3, #28]
   b4e34:	9301      	str	r3, [sp, #4]
   b4e36:	bd08      	pop	{r3, pc}
   b4e38:	0003023c 	.word	0x0003023c

000b4e3c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   b4e3c:	b508      	push	{r3, lr}
   b4e3e:	4b02      	ldr	r3, [pc, #8]	; (b4e48 <hal_usart_is_enabled+0xc>)
   b4e40:	681b      	ldr	r3, [r3, #0]
   b4e42:	6a1b      	ldr	r3, [r3, #32]
   b4e44:	9301      	str	r3, [sp, #4]
   b4e46:	bd08      	pop	{r3, pc}
   b4e48:	0003023c 	.word	0x0003023c

000b4e4c <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   b4e4c:	b508      	push	{r3, lr}
   b4e4e:	4b02      	ldr	r3, [pc, #8]	; (b4e58 <hal_usart_available_data_for_write+0xc>)
   b4e50:	681b      	ldr	r3, [r3, #0]
   b4e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   b4e54:	9301      	str	r3, [sp, #4]
   b4e56:	bd08      	pop	{r3, pc}
   b4e58:	0003023c 	.word	0x0003023c

000b4e5c <hal_usart_init_ex>:
DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
DYNALIB_FN(BASE_IDX2 + 1, hal_usart, hal_usart_write_nine_bits, uint32_t(hal_usart_interface_t serial, uint16_t data))
DYNALIB_FN(BASE_IDX2 + 2, hal_usart, hal_usart_send_break, void(hal_usart_interface_t, void*))
DYNALIB_FN(BASE_IDX2 + 3, hal_usart, hal_usart_break_detected, uint8_t(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX2 + 4, hal_usart, hal_usart_sleep, int(hal_usart_interface_t serial, bool, void*))
DYNALIB_FN(BASE_IDX2 + 5, hal_usart, hal_usart_init_ex, int(hal_usart_interface_t, const hal_usart_buffer_config_t*, void*))
   b4e5c:	b508      	push	{r3, lr}
   b4e5e:	4b02      	ldr	r3, [pc, #8]	; (b4e68 <hal_usart_init_ex+0xc>)
   b4e60:	681b      	ldr	r3, [r3, #0]
   b4e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b4e64:	9301      	str	r3, [sp, #4]
   b4e66:	bd08      	pop	{r3, pc}
   b4e68:	0003023c 	.word	0x0003023c

000b4e6c <HAL_USB_USART_Init>:
// GNINRAW

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   b4e6c:	b508      	push	{r3, lr}
   b4e6e:	4b02      	ldr	r3, [pc, #8]	; (b4e78 <HAL_USB_USART_Init+0xc>)
   b4e70:	681b      	ldr	r3, [r3, #0]
   b4e72:	681b      	ldr	r3, [r3, #0]
   b4e74:	9301      	str	r3, [sp, #4]
   b4e76:	bd08      	pop	{r3, pc}
   b4e78:	0003024c 	.word	0x0003024c

000b4e7c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   b4e7c:	b508      	push	{r3, lr}
   b4e7e:	4b02      	ldr	r3, [pc, #8]	; (b4e88 <HAL_USB_USART_Available_Data+0xc>)
   b4e80:	681b      	ldr	r3, [r3, #0]
   b4e82:	691b      	ldr	r3, [r3, #16]
   b4e84:	9301      	str	r3, [sp, #4]
   b4e86:	bd08      	pop	{r3, pc}
   b4e88:	0003024c 	.word	0x0003024c

000b4e8c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   b4e8c:	b508      	push	{r3, lr}
   b4e8e:	4b02      	ldr	r3, [pc, #8]	; (b4e98 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   b4e90:	681b      	ldr	r3, [r3, #0]
   b4e92:	695b      	ldr	r3, [r3, #20]
   b4e94:	9301      	str	r3, [sp, #4]
   b4e96:	bd08      	pop	{r3, pc}
   b4e98:	0003024c 	.word	0x0003024c

000b4e9c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4e9c:	b508      	push	{r3, lr}
   b4e9e:	4b02      	ldr	r3, [pc, #8]	; (b4ea8 <HAL_USB_USART_Receive_Data+0xc>)
   b4ea0:	681b      	ldr	r3, [r3, #0]
   b4ea2:	699b      	ldr	r3, [r3, #24]
   b4ea4:	9301      	str	r3, [sp, #4]
   b4ea6:	bd08      	pop	{r3, pc}
   b4ea8:	0003024c 	.word	0x0003024c

000b4eac <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   b4eac:	b508      	push	{r3, lr}
   b4eae:	4b02      	ldr	r3, [pc, #8]	; (b4eb8 <HAL_USB_USART_Send_Data+0xc>)
   b4eb0:	681b      	ldr	r3, [r3, #0]
   b4eb2:	69db      	ldr	r3, [r3, #28]
   b4eb4:	9301      	str	r3, [sp, #4]
   b4eb6:	bd08      	pop	{r3, pc}
   b4eb8:	0003024c 	.word	0x0003024c

000b4ebc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   b4ebc:	b508      	push	{r3, lr}
   b4ebe:	4b02      	ldr	r3, [pc, #8]	; (b4ec8 <HAL_USB_USART_Flush_Data+0xc>)
   b4ec0:	681b      	ldr	r3, [r3, #0]
   b4ec2:	6a1b      	ldr	r3, [r3, #32]
   b4ec4:	9301      	str	r3, [sp, #4]
   b4ec6:	bd08      	pop	{r3, pc}
   b4ec8:	0003024c 	.word	0x0003024c

000b4ecc <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   b4ecc:	b508      	push	{r3, lr}
   b4ece:	4b02      	ldr	r3, [pc, #8]	; (b4ed8 <log_message+0xc>)
   b4ed0:	681b      	ldr	r3, [r3, #0]
   b4ed2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   b4ed4:	9301      	str	r3, [sp, #4]
   b4ed6:	bd08      	pop	{r3, pc}
   b4ed8:	00030260 	.word	0x00030260

000b4edc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   b4edc:	b508      	push	{r3, lr}
   b4ede:	4b02      	ldr	r3, [pc, #8]	; (b4ee8 <set_system_mode+0xc>)
   b4ee0:	681b      	ldr	r3, [r3, #0]
   b4ee2:	685b      	ldr	r3, [r3, #4]
   b4ee4:	9301      	str	r3, [sp, #4]
   b4ee6:	bd08      	pop	{r3, pc}
   b4ee8:	00030220 	.word	0x00030220

000b4eec <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   b4eec:	b508      	push	{r3, lr}
   b4eee:	4b02      	ldr	r3, [pc, #8]	; (b4ef8 <system_delay_ms+0xc>)
   b4ef0:	681b      	ldr	r3, [r3, #0]
   b4ef2:	695b      	ldr	r3, [r3, #20]
   b4ef4:	9301      	str	r3, [sp, #4]
   b4ef6:	bd08      	pop	{r3, pc}
   b4ef8:	00030220 	.word	0x00030220

000b4efc <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, SystemEventContext*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, const SystemEventContext*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   b4efc:	b508      	push	{r3, lr}
   b4efe:	4b02      	ldr	r3, [pc, #8]	; (b4f08 <system_thread_set_state+0xc>)
   b4f00:	681b      	ldr	r3, [r3, #0]
   b4f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b4f04:	9301      	str	r3, [sp, #4]
   b4f06:	bd08      	pop	{r3, pc}
   b4f08:	00030220 	.word	0x00030220

000b4f0c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   b4f0c:	b508      	push	{r3, lr}
   b4f0e:	4b02      	ldr	r3, [pc, #8]	; (b4f18 <application_thread_current+0xc>)
   b4f10:	681b      	ldr	r3, [r3, #0]
   b4f12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   b4f14:	9301      	str	r3, [sp, #4]
   b4f16:	bd08      	pop	{r3, pc}
   b4f18:	00030220 	.word	0x00030220

000b4f1c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   b4f1c:	b508      	push	{r3, lr}
   b4f1e:	4b02      	ldr	r3, [pc, #8]	; (b4f28 <application_thread_invoke+0xc>)
   b4f20:	681b      	ldr	r3, [r3, #0]
   b4f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   b4f24:	9301      	str	r3, [sp, #4]
   b4f26:	bd08      	pop	{r3, pc}
   b4f28:	00030220 	.word	0x00030220

000b4f2c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   b4f2c:	b508      	push	{r3, lr}
   b4f2e:	4b03      	ldr	r3, [pc, #12]	; (b4f3c <system_ctrl_set_app_request_handler+0x10>)
   b4f30:	681b      	ldr	r3, [r3, #0]
   b4f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   b4f36:	9301      	str	r3, [sp, #4]
   b4f38:	bd08      	pop	{r3, pc}
   b4f3a:	0000      	.short	0x0000
   b4f3c:	00030220 	.word	0x00030220

000b4f40 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   b4f40:	b508      	push	{r3, lr}
   b4f42:	4b03      	ldr	r3, [pc, #12]	; (b4f50 <system_ctrl_set_result+0x10>)
   b4f44:	681b      	ldr	r3, [r3, #0]
   b4f46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   b4f4a:	9301      	str	r3, [sp, #4]
   b4f4c:	bd08      	pop	{r3, pc}
   b4f4e:	0000      	.short	0x0000
   b4f50:	00030220 	.word	0x00030220

000b4f54 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   b4f54:	b508      	push	{r3, lr}
   b4f56:	4b03      	ldr	r3, [pc, #12]	; (b4f64 <system_sleep_ext+0x10>)
   b4f58:	681b      	ldr	r3, [r3, #0]
   b4f5a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   b4f5e:	9301      	str	r3, [sp, #4]
   b4f60:	bd08      	pop	{r3, pc}
   b4f62:	0000      	.short	0x0000
   b4f64:	00030220 	.word	0x00030220

000b4f68 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, bool(void))
   b4f68:	b508      	push	{r3, lr}
   b4f6a:	4b02      	ldr	r3, [pc, #8]	; (b4f74 <spark_process+0xc>)
   b4f6c:	681b      	ldr	r3, [r3, #0]
   b4f6e:	689b      	ldr	r3, [r3, #8]
   b4f70:	9301      	str	r3, [sp, #4]
   b4f72:	bd08      	pop	{r3, pc}
   b4f74:	00030244 	.word	0x00030244

000b4f78 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   b4f78:	b508      	push	{r3, lr}
   b4f7a:	4b02      	ldr	r3, [pc, #8]	; (b4f84 <spark_cloud_flag_connect+0xc>)
   b4f7c:	681b      	ldr	r3, [r3, #0]
   b4f7e:	68db      	ldr	r3, [r3, #12]
   b4f80:	9301      	str	r3, [sp, #4]
   b4f82:	bd08      	pop	{r3, pc}
   b4f84:	00030244 	.word	0x00030244

000b4f88 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   b4f88:	b508      	push	{r3, lr}
   b4f8a:	4b02      	ldr	r3, [pc, #8]	; (b4f94 <spark_cloud_flag_connected+0xc>)
   b4f8c:	681b      	ldr	r3, [r3, #0]
   b4f8e:	695b      	ldr	r3, [r3, #20]
   b4f90:	9301      	str	r3, [sp, #4]
   b4f92:	bd08      	pop	{r3, pc}
   b4f94:	00030244 	.word	0x00030244

000b4f98 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   b4f98:	b508      	push	{r3, lr}
   b4f9a:	4b02      	ldr	r3, [pc, #8]	; (b4fa4 <spark_send_event+0xc>)
   b4f9c:	681b      	ldr	r3, [r3, #0]
   b4f9e:	6a1b      	ldr	r3, [r3, #32]
   b4fa0:	9301      	str	r3, [sp, #4]
   b4fa2:	bd08      	pop	{r3, pc}
   b4fa4:	00030244 	.word	0x00030244

000b4fa8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   b4fa8:	b508      	push	{r3, lr}
   b4faa:	4b02      	ldr	r3, [pc, #8]	; (b4fb4 <spark_set_random_seed_from_cloud_handler+0xc>)
   b4fac:	681b      	ldr	r3, [r3, #0]
   b4fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   b4fb0:	9301      	str	r3, [sp, #4]
   b4fb2:	bd08      	pop	{r3, pc}
   b4fb4:	00030244 	.word	0x00030244

000b4fb8 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   b4fb8:	b508      	push	{r3, lr}
   b4fba:	4b02      	ldr	r3, [pc, #8]	; (b4fc4 <spark_cloud_disconnect+0xc>)
   b4fbc:	681b      	ldr	r3, [r3, #0]
   b4fbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b4fc0:	9301      	str	r3, [sp, #4]
   b4fc2:	bd08      	pop	{r3, pc}
   b4fc4:	00030244 	.word	0x00030244

000b4fc8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   b4fc8:	b508      	push	{r3, lr}
   b4fca:	4b02      	ldr	r3, [pc, #8]	; (b4fd4 <network_connect+0xc>)
   b4fcc:	681b      	ldr	r3, [r3, #0]
   b4fce:	685b      	ldr	r3, [r3, #4]
   b4fd0:	9301      	str	r3, [sp, #4]
   b4fd2:	bd08      	pop	{r3, pc}
   b4fd4:	00030240 	.word	0x00030240

000b4fd8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   b4fd8:	b508      	push	{r3, lr}
   b4fda:	4b02      	ldr	r3, [pc, #8]	; (b4fe4 <network_connecting+0xc>)
   b4fdc:	681b      	ldr	r3, [r3, #0]
   b4fde:	689b      	ldr	r3, [r3, #8]
   b4fe0:	9301      	str	r3, [sp, #4]
   b4fe2:	bd08      	pop	{r3, pc}
   b4fe4:	00030240 	.word	0x00030240

000b4fe8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   b4fe8:	b508      	push	{r3, lr}
   b4fea:	4b02      	ldr	r3, [pc, #8]	; (b4ff4 <network_disconnect+0xc>)
   b4fec:	681b      	ldr	r3, [r3, #0]
   b4fee:	68db      	ldr	r3, [r3, #12]
   b4ff0:	9301      	str	r3, [sp, #4]
   b4ff2:	bd08      	pop	{r3, pc}
   b4ff4:	00030240 	.word	0x00030240

000b4ff8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   b4ff8:	b508      	push	{r3, lr}
   b4ffa:	4b02      	ldr	r3, [pc, #8]	; (b5004 <network_ready+0xc>)
   b4ffc:	681b      	ldr	r3, [r3, #0]
   b4ffe:	691b      	ldr	r3, [r3, #16]
   b5000:	9301      	str	r3, [sp, #4]
   b5002:	bd08      	pop	{r3, pc}
   b5004:	00030240 	.word	0x00030240

000b5008 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   b5008:	b508      	push	{r3, lr}
   b500a:	4b02      	ldr	r3, [pc, #8]	; (b5014 <network_on+0xc>)
   b500c:	681b      	ldr	r3, [r3, #0]
   b500e:	695b      	ldr	r3, [r3, #20]
   b5010:	9301      	str	r3, [sp, #4]
   b5012:	bd08      	pop	{r3, pc}
   b5014:	00030240 	.word	0x00030240

000b5018 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   b5018:	b508      	push	{r3, lr}
   b501a:	4b02      	ldr	r3, [pc, #8]	; (b5024 <network_off+0xc>)
   b501c:	681b      	ldr	r3, [r3, #0]
   b501e:	699b      	ldr	r3, [r3, #24]
   b5020:	9301      	str	r3, [sp, #4]
   b5022:	bd08      	pop	{r3, pc}
   b5024:	00030240 	.word	0x00030240

000b5028 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   b5028:	b508      	push	{r3, lr}
   b502a:	4b02      	ldr	r3, [pc, #8]	; (b5034 <network_listen+0xc>)
   b502c:	681b      	ldr	r3, [r3, #0]
   b502e:	69db      	ldr	r3, [r3, #28]
   b5030:	9301      	str	r3, [sp, #4]
   b5032:	bd08      	pop	{r3, pc}
   b5034:	00030240 	.word	0x00030240

000b5038 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   b5038:	b508      	push	{r3, lr}
   b503a:	4b02      	ldr	r3, [pc, #8]	; (b5044 <network_listening+0xc>)
   b503c:	681b      	ldr	r3, [r3, #0]
   b503e:	6a1b      	ldr	r3, [r3, #32]
   b5040:	9301      	str	r3, [sp, #4]
   b5042:	bd08      	pop	{r3, pc}
   b5044:	00030240 	.word	0x00030240

000b5048 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   b5048:	b508      	push	{r3, lr}
   b504a:	4b02      	ldr	r3, [pc, #8]	; (b5054 <network_set_listen_timeout+0xc>)
   b504c:	681b      	ldr	r3, [r3, #0]
   b504e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b5050:	9301      	str	r3, [sp, #4]
   b5052:	bd08      	pop	{r3, pc}
   b5054:	00030240 	.word	0x00030240

000b5058 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   b5058:	b508      	push	{r3, lr}
   b505a:	4b02      	ldr	r3, [pc, #8]	; (b5064 <network_get_listen_timeout+0xc>)
   b505c:	681b      	ldr	r3, [r3, #0]
   b505e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   b5060:	9301      	str	r3, [sp, #4]
   b5062:	bd08      	pop	{r3, pc}
   b5064:	00030240 	.word	0x00030240

000b5068 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   b5068:	b508      	push	{r3, lr}
   b506a:	4b02      	ldr	r3, [pc, #8]	; (b5074 <network_is_on+0xc>)
   b506c:	681b      	ldr	r3, [r3, #0]
   b506e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b5070:	9301      	str	r3, [sp, #4]
   b5072:	bd08      	pop	{r3, pc}
   b5074:	00030240 	.word	0x00030240

000b5078 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   b5078:	b508      	push	{r3, lr}
   b507a:	4b02      	ldr	r3, [pc, #8]	; (b5084 <network_is_off+0xc>)
   b507c:	681b      	ldr	r3, [r3, #0]
   b507e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b5080:	9301      	str	r3, [sp, #4]
   b5082:	bd08      	pop	{r3, pc}
   b5084:	00030240 	.word	0x00030240

000b5088 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   b5088:	b508      	push	{r3, lr}
   b508a:	4b02      	ldr	r3, [pc, #8]	; (b5094 <malloc+0xc>)
   b508c:	681b      	ldr	r3, [r3, #0]
   b508e:	681b      	ldr	r3, [r3, #0]
   b5090:	9301      	str	r3, [sp, #4]
   b5092:	bd08      	pop	{r3, pc}
   b5094:	0003021c 	.word	0x0003021c

000b5098 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   b5098:	b508      	push	{r3, lr}
   b509a:	4b02      	ldr	r3, [pc, #8]	; (b50a4 <free+0xc>)
   b509c:	681b      	ldr	r3, [r3, #0]
   b509e:	685b      	ldr	r3, [r3, #4]
   b50a0:	9301      	str	r3, [sp, #4]
   b50a2:	bd08      	pop	{r3, pc}
   b50a4:	0003021c 	.word	0x0003021c

000b50a8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   b50a8:	b508      	push	{r3, lr}
   b50aa:	4b02      	ldr	r3, [pc, #8]	; (b50b4 <realloc+0xc>)
   b50ac:	681b      	ldr	r3, [r3, #0]
   b50ae:	689b      	ldr	r3, [r3, #8]
   b50b0:	9301      	str	r3, [sp, #4]
   b50b2:	bd08      	pop	{r3, pc}
   b50b4:	0003021c 	.word	0x0003021c

000b50b8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   b50b8:	b508      	push	{r3, lr}
   b50ba:	4b02      	ldr	r3, [pc, #8]	; (b50c4 <abort+0xc>)
   b50bc:	681b      	ldr	r3, [r3, #0]
   b50be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   b50c0:	9301      	str	r3, [sp, #4]
   b50c2:	bd08      	pop	{r3, pc}
   b50c4:	0003021c 	.word	0x0003021c

000b50c8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   b50c8:	b508      	push	{r3, lr}
   b50ca:	4b02      	ldr	r3, [pc, #8]	; (b50d4 <_malloc_r+0xc>)
   b50cc:	681b      	ldr	r3, [r3, #0]
   b50ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   b50d0:	9301      	str	r3, [sp, #4]
   b50d2:	bd08      	pop	{r3, pc}
   b50d4:	0003021c 	.word	0x0003021c

000b50d8 <__assert_func>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
   b50d8:	b508      	push	{r3, lr}
   b50da:	4b02      	ldr	r3, [pc, #8]	; (b50e4 <__assert_func+0xc>)
   b50dc:	681b      	ldr	r3, [r3, #0]
   b50de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   b50e0:	9301      	str	r3, [sp, #4]
   b50e2:	bd08      	pop	{r3, pc}
   b50e4:	0003021c 	.word	0x0003021c

000b50e8 <newlib_impure_ptr_callback>:
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   b50e8:	b508      	push	{r3, lr}
   b50ea:	4b02      	ldr	r3, [pc, #8]	; (b50f4 <newlib_impure_ptr_callback+0xc>)
   b50ec:	681b      	ldr	r3, [r3, #0]
   b50ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   b50f0:	9301      	str	r3, [sp, #4]
   b50f2:	bd08      	pop	{r3, pc}
   b50f4:	0003021c 	.word	0x0003021c

000b50f8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   b50f8:	2100      	movs	r1, #0
   b50fa:	f7ff bef7 	b.w	b4eec <system_delay_ms>

000b50fe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   b50fe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   b5100:	6883      	ldr	r3, [r0, #8]
   b5102:	4604      	mov	r4, r0
   b5104:	b90b      	cbnz	r3, b510a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   b5106:	f001 f9e9 	bl	b64dc <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b510a:	68c3      	ldr	r3, [r0, #12]
   b510c:	4798      	blx	r3
      if (_M_manager)
   b510e:	68a3      	ldr	r3, [r4, #8]
   b5110:	b11b      	cbz	r3, b511a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b5112:	2203      	movs	r2, #3
   b5114:	4621      	mov	r1, r4
   b5116:	4620      	mov	r0, r4
   b5118:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   b511a:	4620      	mov	r0, r4
   b511c:	2110      	movs	r1, #16
}
   b511e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delete callbackPtr;
   b5122:	f7fe bfba 	b.w	b409a <_ZdlPvj>

000b5126 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   b5126:	b510      	push	{r4, lr}
      if (_M_manager)
   b5128:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   b512a:	4604      	mov	r4, r0
      if (_M_manager)
   b512c:	b113      	cbz	r3, b5134 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   b512e:	2203      	movs	r2, #3
   b5130:	4601      	mov	r1, r0
   b5132:	4798      	blx	r3
    }
   b5134:	4620      	mov	r0, r4
   b5136:	bd10      	pop	{r4, pc}

000b5138 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
#else
    void
#endif
    swap(_Tp& __a, _Tp& __b)
   b5138:	b513      	push	{r0, r1, r4, lr}
   b513a:	460b      	mov	r3, r1
   b513c:	4602      	mov	r2, r0
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b513e:	e9d0 0100 	ldrd	r0, r1, [r0]
   b5142:	466c      	mov	r4, sp
   b5144:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   b5148:	e893 0003 	ldmia.w	r3, {r0, r1}
   b514c:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   b5150:	e894 0003 	ldmia.w	r4, {r0, r1}
   b5154:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   b5158:	b002      	add	sp, #8
   b515a:	bd10      	pop	{r4, pc}

000b515c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   b515c:	4802      	ldr	r0, [pc, #8]	; (b5168 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   b515e:	2300      	movs	r3, #0
   b5160:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   b5162:	f7ff bd83 	b.w	b4c6c <os_mutex_recursive_create>
   b5166:	bf00      	nop
   b5168:	2003e6b8 	.word	0x2003e6b8

000b516c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b516c:	4770      	bx	lr

000b516e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      { return nullptr; }
   b516e:	2000      	movs	r0, #0
   b5170:	4770      	bx	lr

000b5172 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   b5172:	b510      	push	{r4, lr}
   b5174:	2110      	movs	r1, #16
   b5176:	4604      	mov	r4, r0
   b5178:	f7fe ff8f 	bl	b409a <_ZdlPvj>
   b517c:	4620      	mov	r0, r4
   b517e:	bd10      	pop	{r4, pc}

000b5180 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      _M_destroy() noexcept
   b5180:	b508      	push	{r3, lr}
      { delete this; }
   b5182:	f7ff fff6 	bl	b5172 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   b5186:	bd08      	pop	{r3, pc}

000b5188 <_ZN8particle5ErrorC1EOS0_>:

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   b5188:	b530      	push	{r4, r5, lr}
        type_(type) {
   b518a:	2200      	movs	r2, #0
   b518c:	f64f 749c 	movw	r4, #65436	; 0xff9c
   b5190:	6002      	str	r2, [r0, #0]
   b5192:	8084      	strh	r4, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5194:	888d      	ldrh	r5, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   b5196:	808c      	strh	r4, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   b5198:	680c      	ldr	r4, [r1, #0]
   b519a:	8085      	strh	r5, [r0, #4]
   b519c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   b519e:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
   b51a0:	bd30      	pop	{r4, r5, pc}

000b51a2 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   b51a2:	b510      	push	{r4, lr}
   b51a4:	4604      	mov	r4, r0
    free((void*)msg_);
   b51a6:	6800      	ldr	r0, [r0, #0]
   b51a8:	f7ff ff76 	bl	b5098 <free>
}
   b51ac:	4620      	mov	r0, r4
   b51ae:	bd10      	pop	{r4, pc}

000b51b0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   b51b0:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   b51b2:	68c4      	ldr	r4, [r0, #12]
   b51b4:	b1f4      	cbz	r4, b51f4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>
      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      {
	alignas(_Tp) unsigned char __buf[sizeof(_Tp)];
	_Tp* __ptr = reinterpret_cast<_Tp*>(__buf);
	__atomic_load(std::__addressof(_M_i), __ptr, int(__m));
   b51b6:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   b51b8:	2b02      	cmp	r3, #2
   b51ba:	d103      	bne.n	b51c4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   b51bc:	f104 000c 	add.w	r0, r4, #12
   b51c0:	f7ff ffef 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
      {
	memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, int(__m));
   b51c4:	6865      	ldr	r5, [r4, #4]
        delete onSuccess_.load(std::memory_order_relaxed);
   b51c6:	b135      	cbz	r5, b51d6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
    class function<_Res(_ArgTypes...)>
   b51c8:	4628      	mov	r0, r5
   b51ca:	f7ff ffac 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
   b51ce:	2110      	movs	r1, #16
   b51d0:	4628      	mov	r0, r5
   b51d2:	f7fe ff62 	bl	b409a <_ZdlPvj>
   b51d6:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   b51d8:	b135      	cbz	r5, b51e8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   b51da:	4628      	mov	r0, r5
   b51dc:	f7ff ffa3 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
   b51e0:	2110      	movs	r1, #16
   b51e2:	4628      	mov	r0, r5
   b51e4:	f7fe ff59 	bl	b409a <_ZdlPvj>
   b51e8:	4620      	mov	r0, r4
   b51ea:	2114      	movs	r1, #20
   b51ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   b51f0:	f7fe bf53 	b.w	b409a <_ZdlPvj>
   b51f4:	bd38      	pop	{r3, r4, r5, pc}

000b51f6 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   b51f6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    opts.size = sizeof(opts);
   b51f8:	230c      	movs	r3, #12
   b51fa:	f8ad 3004 	strh.w	r3, [sp, #4]
    opts.flags = flags_;
   b51fe:	6803      	ldr	r3, [r0, #0]
   b5200:	f88d 3006 	strb.w	r3, [sp, #6]
    opts.graceful = graceful_;
   b5204:	7a03      	ldrb	r3, [r0, #8]
   b5206:	f88d 3007 	strb.w	r3, [sp, #7]
    opts.timeout = timeout_;
   b520a:	6843      	ldr	r3, [r0, #4]
   b520c:	9302      	str	r3, [sp, #8]
    spark_cloud_disconnect_options opts = {};
   b520e:	2100      	movs	r1, #0
    opts.clear_session = clearSession_;
   b5210:	7a43      	ldrb	r3, [r0, #9]
    spark_cloud_disconnect_options opts = {};
   b5212:	f8ad 100d 	strh.w	r1, [sp, #13]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b5216:	a801      	add	r0, sp, #4
    spark_cloud_disconnect_options opts = {};
   b5218:	f88d 100f 	strb.w	r1, [sp, #15]
    opts.clear_session = clearSession_;
   b521c:	f88d 300c 	strb.w	r3, [sp, #12]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   b5220:	f7ff feca 	bl	b4fb8 <spark_cloud_disconnect>
}
   b5224:	b005      	add	sp, #20
   b5226:	f85d fb04 	ldr.w	pc, [sp], #4

000b522a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>:
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b522a:	680b      	ldr	r3, [r1, #0]
   b522c:	6003      	str	r3, [r0, #0]
      : _M_pi(__r._M_pi)
   b522e:	684b      	ldr	r3, [r1, #4]
   b5230:	6043      	str	r3, [r0, #4]
	if (_M_pi != 0)
   b5232:	b113      	cbz	r3, b523a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_+0x10>
    { ++_M_use_count; }
   b5234:	685a      	ldr	r2, [r3, #4]
   b5236:	3201      	adds	r2, #1
   b5238:	605a      	str	r2, [r3, #4]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   b523a:	4770      	bx	lr

000b523c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   b523c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b523e:	4604      	mov	r4, r0
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default; ///< Copy constructor
   b5240:	4668      	mov	r0, sp
   b5242:	460d      	mov	r5, r1
   b5244:	f7ff fff1 	bl	b522a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   b5248:	9b00      	ldr	r3, [sp, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b524a:	9a01      	ldr	r2, [sp, #4]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b524c:	6023      	str	r3, [r4, #0]
	_M_pi = __tmp;
   b524e:	6062      	str	r2, [r4, #4]
	__r._M_pi = _M_pi;
   b5250:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b5252:	a801      	add	r0, sp, #4
	__r._M_pi = _M_pi;
   b5254:	9301      	str	r3, [sp, #4]
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   b5256:	9300      	str	r3, [sp, #0]
      ~__shared_ptr() = default;
   b5258:	f7fe ff3c 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
        delete d;
   b525c:	b135      	cbz	r5, b526c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv+0x30>
   b525e:	1d28      	adds	r0, r5, #4
   b5260:	f7fe ff38 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b5264:	2108      	movs	r1, #8
   b5266:	4628      	mov	r0, r5
   b5268:	f7fe ff17 	bl	b409a <_ZdlPvj>
        return p;
    }
   b526c:	4620      	mov	r0, r4
   b526e:	b003      	add	sp, #12
   b5270:	bd30      	pop	{r4, r5, pc}

000b5272 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
      if (_M_empty())
   b5272:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5274:	b510      	push	{r4, lr}
      if (_M_empty())
   b5276:	b90a      	cbnz	r2, b527c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   b5278:	f001 f930 	bl	b64dc <_ZSt25__throw_bad_function_callv>
    }
   b527c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b5280:	68c3      	ldr	r3, [r0, #12]
   b5282:	4718      	bx	r3

000b5284 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b5284:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b5286:	6800      	ldr	r0, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   b5288:	f100 0110 	add.w	r1, r0, #16
   b528c:	f7ff fff1 	bl	b5272 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
      }
   b5290:	bd08      	pop	{r3, pc}

000b5292 <_ZNKSt8functionIFvRKbEEclES1_>:
      if (_M_empty())
   b5292:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   b5294:	b510      	push	{r4, lr}
      if (_M_empty())
   b5296:	b90a      	cbnz	r2, b529c <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   b5298:	f001 f920 	bl	b64dc <_ZSt25__throw_bad_function_callv>
    }
   b529c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   b52a0:	68c3      	ldr	r3, [r0, #12]
   b52a2:	4718      	bx	r3

000b52a4 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   b52a4:	b508      	push	{r3, lr}
	    return __source._M_access<_Functor*>();
   b52a6:	6800      	ldr	r0, [r0, #0]
   b52a8:	f100 0110 	add.w	r1, r0, #16
   b52ac:	f7ff fff1 	bl	b5292 <_ZNKSt8functionIFvRKbEEclES1_>
      }
   b52b0:	bd08      	pop	{r3, pc}
	...

000b52b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
	__shared_count(_Ptr __p) : _M_pi(0)
   b52b4:	b538      	push	{r3, r4, r5, lr}
   b52b6:	2300      	movs	r3, #0
   b52b8:	4604      	mov	r4, r0
   b52ba:	6003      	str	r3, [r0, #0]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52bc:	2010      	movs	r0, #16
	__shared_count(_Ptr __p) : _M_pi(0)
   b52be:	460d      	mov	r5, r1
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52c0:	f7fe fee7 	bl	b4092 <_Znwj>
   b52c4:	b128      	cbz	r0, b52d2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
      : _M_use_count(1), _M_weak_count(1) { }
   b52c6:	2301      	movs	r3, #1
   b52c8:	e9c0 3301 	strd	r3, r3, [r0, #4]
      : _M_ptr(__p) { }
   b52cc:	4b02      	ldr	r3, [pc, #8]	; (b52d8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   b52ce:	6003      	str	r3, [r0, #0]
   b52d0:	60c5      	str	r5, [r0, #12]
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   b52d2:	6020      	str	r0, [r4, #0]
	}
   b52d4:	4620      	mov	r0, r4
   b52d6:	bd38      	pop	{r3, r4, r5, pc}
   b52d8:	000b7308 	.word	0x000b7308

000b52dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
    function<_Res(_ArgTypes...)>::
   b52dc:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b52de:	2300      	movs	r3, #0
   b52e0:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b52e2:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b52e4:	4604      	mov	r4, r0
   b52e6:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b52e8:	b12b      	cbz	r3, b52f6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b52ea:	2202      	movs	r2, #2
   b52ec:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b52ee:	68eb      	ldr	r3, [r5, #12]
   b52f0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b52f2:	68ab      	ldr	r3, [r5, #8]
   b52f4:	60a3      	str	r3, [r4, #8]
    }
   b52f6:	4620      	mov	r0, r4
   b52f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000b52fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:
    void setError(Error error) {
   b52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   b52fe:	b089      	sub	sp, #36	; 0x24
        { __shared_ptr(__p, std::move(__d), std::move(__a)).swap(*this); }

      /// Return the stored pointer.
      element_type*
      get() const noexcept
      { return _M_ptr; }
   b5300:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   b5302:	4668      	mov	r0, sp
   b5304:	f7ff ff40 	bl	b5188 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s,
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b5308:	f04f 0302 	mov.w	r3, #2
   b530c:	e8d4 2f4f 	ldrexb	r2, [r4]
   b5310:	2a00      	cmp	r2, #0
   b5312:	d103      	bne.n	b531c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   b5314:	e8c4 3f41 	strexb	r1, r3, [r4]
   b5318:	2900      	cmp	r1, #0
   b531a:	d1f7      	bne.n	b530c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10>
        if (this->changeState(State::FAILED)) {
   b531c:	d125      	bne.n	b536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
            new(&error_) Error(std::move(error));
   b531e:	f104 050c 	add.w	r5, r4, #12
   b5322:	4669      	mov	r1, sp
   b5324:	4628      	mov	r0, r5
   b5326:	f7ff ff2f 	bl	b5188 <_ZN8particle5ErrorC1EOS0_>
	__atomic_store_n(&_M_i, __i, int(__m));
   b532a:	f3bf 8f5b 	dmb	ish
   b532e:	2301      	movs	r3, #1
   b5330:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b5332:	2000      	movs	r0, #0
   b5334:	f104 0308 	add.w	r3, r4, #8
   b5338:	f3bf 8f5b 	dmb	ish
   b533c:	e853 6f00 	ldrex	r6, [r3]
   b5340:	e843 0200 	strex	r2, r0, [r3]
   b5344:	2a00      	cmp	r2, #0
   b5346:	d1f9      	bne.n	b533c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x40>
   b5348:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b534c:	b16e      	cbz	r6, b536a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x6e>
        return (application_thread_current(nullptr) != 0);
   b534e:	f7ff fddd 	bl	b4f0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b5352:	b178      	cbz	r0, b5374 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x78>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5354:	4629      	mov	r1, r5
   b5356:	4630      	mov	r0, r6
   b5358:	f7ff ff8b 	bl	b5272 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
    class function<_Res(_ArgTypes...)>
   b535c:	4630      	mov	r0, r6
   b535e:	f7ff fee2 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5362:	2110      	movs	r1, #16
   b5364:	4630      	mov	r0, r6
   b5366:	f7fe fe98 	bl	b409a <_ZdlPvj>
        p_->setError(std::move(error));
   b536a:	4668      	mov	r0, sp
   b536c:	f7ff ff19 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
    }
   b5370:	b009      	add	sp, #36	; 0x24
   b5372:	bdf0      	pop	{r4, r5, r6, r7, pc}

     public:
      template<typename... _Args>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b5374:	4631      	mov	r1, r6
   b5376:	a802      	add	r0, sp, #8
   b5378:	f7ff ffb0 	bl	b52dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b537c:	68e0      	ldr	r0, [r4, #12]
   b537e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5382:	b108      	cbz	r0, b5388 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8c>
   b5384:	f001 ff16 	bl	b71b4 <strdup>
        type_(type) {
   b5388:	9006      	str	r0, [sp, #24]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b538a:	2010      	movs	r0, #16
   b538c:	f8ad 501c 	strh.w	r5, [sp, #28]
   b5390:	f7fe fe7f 	bl	b4092 <_Znwj>
   b5394:	4605      	mov	r5, r0
   b5396:	b1e8      	cbz	r0, b53d4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd8>
    _Function_base() : _M_manager(nullptr) { }
   b5398:	2700      	movs	r7, #0
   b539a:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b539c:	2018      	movs	r0, #24
   b539e:	f7fe fe78 	bl	b4092 <_Znwj>
   b53a2:	4604      	mov	r4, r0
   b53a4:	b188      	cbz	r0, b53ca <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xce>
	std::swap(_M_functor, __x._M_functor);
   b53a6:	4601      	mov	r1, r0
    _Function_base() : _M_manager(nullptr) { }
   b53a8:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b53aa:	a802      	add	r0, sp, #8
   b53ac:	f7ff fec4 	bl	b5138 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53b0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   b53b2:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b53b4:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b53b6:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b53b8:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b53ba:	a906      	add	r1, sp, #24
   b53bc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b53be:	60e3      	str	r3, [r4, #12]
   b53c0:	f104 0010 	add.w	r0, r4, #16
      __a = _GLIBCXX_MOVE(__b);
   b53c4:	9205      	str	r2, [sp, #20]
   b53c6:	f7ff fedf 	bl	b5188 <_ZN8particle5ErrorC1EOS0_>
	    _M_invoker = &_My_handler::_M_invoke;
   b53ca:	4b08      	ldr	r3, [pc, #32]	; (b53ec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf0>)
   b53cc:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b53ce:	4b08      	ldr	r3, [pc, #32]	; (b53f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf4>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b53d0:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b53d2:	60ab      	str	r3, [r5, #8]
    struct _Head_base<_Idx, _Head, false>
   b53d4:	a806      	add	r0, sp, #24
   b53d6:	f7ff fee4 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b53da:	a802      	add	r0, sp, #8
   b53dc:	f7ff fea3 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b53e0:	2200      	movs	r2, #0
   b53e2:	4629      	mov	r1, r5
   b53e4:	4803      	ldr	r0, [pc, #12]	; (b53f4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf8>)
   b53e6:	f7ff fd99 	bl	b4f1c <application_thread_invoke>
   b53ea:	e7b7      	b.n	b535c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x60>
   b53ec:	000b5285 	.word	0x000b5285
   b53f0:	000b5509 	.word	0x000b5509
   b53f4:	000b50ff 	.word	0x000b50ff

000b53f8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   b53f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b53fc:	b08b      	sub	sp, #44	; 0x2c
   b53fe:	4605      	mov	r5, r0
   b5400:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
   b5404:	460f      	mov	r7, r1
   b5406:	4690      	mov	r8, r2
   b5408:	4699      	mov	r9, r3
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   b540a:	f7ff fdbd 	bl	b4f88 <spark_cloud_flag_connected>
   b540e:	ae07      	add	r6, sp, #28
    if (!connected()) {
   b5410:	4683      	mov	fp, r0
   b5412:	bb38      	cbnz	r0, b5464 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6c>
        type_(type) {
   b5414:	f64f 732e 	movw	r3, #65326	; 0xff2e
   b5418:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b541a:	a905      	add	r1, sp, #20
   b541c:	4630      	mov	r0, r6
   b541e:	f8ad 3018 	strh.w	r3, [sp, #24]
   b5422:	f7ff feb1 	bl	b5188 <_ZN8particle5ErrorC1EOS0_>
   b5426:	2014      	movs	r0, #20
   b5428:	f7fe fe33 	bl	b4092 <_Znwj>
   b542c:	4604      	mov	r4, r0
   b542e:	b148      	cbz	r0, b5444 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x4c>
      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   b5430:	2302      	movs	r3, #2
   b5432:	7003      	strb	r3, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b5434:	2301      	movs	r3, #1
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5436:	e9c0 bb01 	strd	fp, fp, [r0, #4]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b543a:	7043      	strb	r3, [r0, #1]
            error_(std::move(error)) {
   b543c:	4631      	mov	r1, r6
   b543e:	300c      	adds	r0, #12
   b5440:	f7ff fea2 	bl	b5188 <_ZN8particle5ErrorC1EOS0_>
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5444:	4628      	mov	r0, r5
	: __shared_count(__p)
   b5446:	4621      	mov	r1, r4
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5448:	f840 4b04 	str.w	r4, [r0], #4
	: __shared_count(__p)
   b544c:	f7ff ff32 	bl	b52b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   b5450:	4630      	mov	r0, r6
   b5452:	f7ff fea6 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   b5456:	a805      	add	r0, sp, #20
   b5458:	f7ff fea3 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
}
   b545c:	4628      	mov	r0, r5
   b545e:	b00b      	add	sp, #44	; 0x2c
   b5460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d.size = sizeof(spark_send_event_data);
   b5464:	230c      	movs	r3, #12
    spark_send_event_data d = {};
   b5466:	2400      	movs	r4, #0
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   b5468:	2014      	movs	r0, #20
   b546a:	e9cd 4408 	strd	r4, r4, [sp, #32]
    d.size = sizeof(spark_send_event_data);
   b546e:	9307      	str	r3, [sp, #28]
   b5470:	f7fe fe0f 	bl	b4092 <_Znwj>
   b5474:	4601      	mov	r1, r0
   b5476:	b118      	cbz	r0, b5480 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x88>
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   b5478:	e9c0 4401 	strd	r4, r4, [r0, #4]
   b547c:	7004      	strb	r4, [r0, #0]
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   b547e:	7044      	strb	r4, [r0, #1]
   b5480:	a804      	add	r0, sp, #16
	: _M_ptr(__p), _M_refcount(__p, typename is_array<_Tp>::type())
   b5482:	9103      	str	r1, [sp, #12]
	: __shared_count(__p)
   b5484:	f7ff ff16 	bl	b52b4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    d.handler_callback = publishCompletionCallback;
   b5488:	4b1e      	ldr	r3, [pc, #120]	; (b5504 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x10c>)
   b548a:	9308      	str	r3, [sp, #32]
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   b548c:	2008      	movs	r0, #8
   b548e:	f7fe fe00 	bl	b4092 <_Znwj>
   b5492:	4604      	mov	r4, r0
   b5494:	b110      	cbz	r0, b549c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa4>
   b5496:	a903      	add	r1, sp, #12
   b5498:	f7ff fec7 	bl	b522a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b549c:	9600      	str	r6, [sp, #0]
   b549e:	fa5f f38a 	uxtb.w	r3, sl
   b54a2:	464a      	mov	r2, r9
   b54a4:	4641      	mov	r1, r8
   b54a6:	4638      	mov	r0, r7
    d.handler_data = p.dataPtr();
   b54a8:	9409      	str	r4, [sp, #36]	; 0x24
    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   b54aa:	f7ff fd75 	bl	b4f98 <spark_send_event>
   b54ae:	b9b8      	cbnz	r0, b54e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
	return __atomic_load_n(&_M_i, int(__m));
   b54b0:	9b03      	ldr	r3, [sp, #12]
   b54b2:	785b      	ldrb	r3, [r3, #1]
   b54b4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   b54b8:	b993      	cbnz	r3, b54e0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   b54ba:	f64f 739c 	movw	r3, #65436	; 0xff9c
        p.setError(Error::UNKNOWN);
   b54be:	a905      	add	r1, sp, #20
   b54c0:	a803      	add	r0, sp, #12
   b54c2:	9205      	str	r2, [sp, #20]
   b54c4:	f8ad 3018 	strh.w	r3, [sp, #24]
   b54c8:	f7ff ff18 	bl	b52fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b54cc:	a805      	add	r0, sp, #20
   b54ce:	f7ff fe68 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   b54d2:	a805      	add	r0, sp, #20
   b54d4:	9909      	ldr	r1, [sp, #36]	; 0x24
   b54d6:	f7ff feb1 	bl	b523c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      ~__shared_ptr() = default;
   b54da:	a806      	add	r0, sp, #24
   b54dc:	f7fe fdfa 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54e0:	a903      	add	r1, sp, #12
   b54e2:	a805      	add	r0, sp, #20
   b54e4:	f7ff fea1 	bl	b522a <_ZNSt12__shared_ptrIN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EEC1ERKS7_>
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54e8:	9b05      	ldr	r3, [sp, #20]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   b54ea:	9a06      	ldr	r2, [sp, #24]
      : _M_ptr(__r._M_ptr), _M_refcount()
   b54ec:	602b      	str	r3, [r5, #0]
	_M_pi = __tmp;
   b54ee:	606a      	str	r2, [r5, #4]
	__r._M_pi = _M_pi;
   b54f0:	2300      	movs	r3, #0
      ~__shared_ptr() = default;
   b54f2:	a806      	add	r0, sp, #24
	__r._M_pi = _M_pi;
   b54f4:	9306      	str	r3, [sp, #24]
	__r._M_ptr = 0;
   b54f6:	9305      	str	r3, [sp, #20]
      ~__shared_ptr() = default;
   b54f8:	f7fe fdec 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   b54fc:	a804      	add	r0, sp, #16
   b54fe:	f7fe fde9 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
class Promise: public PromiseBase<ResultT, ContextT> {
   b5502:	e7ab      	b.n	b545c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x64>
   b5504:	000b5585 	.word	0x000b5585

000b5508 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
	switch (__op)
   b5508:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b550a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b550c:	4605      	mov	r5, r0
	switch (__op)
   b550e:	d103      	bne.n	b5518 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5510:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5512:	6003      	str	r3, [r0, #0]
      }
   b5514:	2000      	movs	r0, #0
   b5516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	  switch (__op)
   b5518:	2a02      	cmp	r2, #2
   b551a:	d010      	beq.n	b553e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x36>
   b551c:	2a03      	cmp	r2, #3
   b551e:	d1f9      	bne.n	b5514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b5520:	6804      	ldr	r4, [r0, #0]
   b5522:	2c00      	cmp	r4, #0
   b5524:	d0f6      	beq.n	b5514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
   b5526:	f104 0010 	add.w	r0, r4, #16
   b552a:	f7ff fe3a 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
    class function<_Res(_ArgTypes...)>
   b552e:	4620      	mov	r0, r4
   b5530:	f7ff fdf9 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b5534:	2118      	movs	r1, #24
   b5536:	4620      	mov	r0, r4
   b5538:	f7fe fdaf 	bl	b409a <_ZdlPvj>
   b553c:	e7ea      	b.n	b5514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b553e:	2018      	movs	r0, #24
	  __dest._M_access<_Functor*>() =
   b5540:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b5542:	f7fe fda6 	bl	b4092 <_Znwj>
   b5546:	4604      	mov	r4, r0
   b5548:	b150      	cbz	r0, b5560 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x58>
	explicit _GLIBCXX20_CONSTEXPR
	_Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   b554a:	4631      	mov	r1, r6
   b554c:	f7ff fec6 	bl	b52dc <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
        Error(error.type_, error.msg_) {
   b5550:	6930      	ldr	r0, [r6, #16]
   b5552:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5556:	b108      	cbz	r0, b555c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x54>
   b5558:	f001 fe2c 	bl	b71b4 <strdup>
        type_(type) {
   b555c:	6120      	str	r0, [r4, #16]
   b555e:	82a7      	strh	r7, [r4, #20]
	  __dest._M_access<_Functor*>() =
   b5560:	602c      	str	r4, [r5, #0]
	}
   b5562:	e7d7      	b.n	b5514 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0xc>

000b5564 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
    function<_Res(_ArgTypes...)>::
   b5564:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   b5566:	2300      	movs	r3, #0
   b5568:	6083      	str	r3, [r0, #8]
    bool _M_empty() const { return !_M_manager; }
   b556a:	688b      	ldr	r3, [r1, #8]
    function<_Res(_ArgTypes...)>::
   b556c:	4604      	mov	r4, r0
   b556e:	460d      	mov	r5, r1
      if (static_cast<bool>(__x))
   b5570:	b12b      	cbz	r3, b557e <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   b5572:	2202      	movs	r2, #2
   b5574:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   b5576:	68eb      	ldr	r3, [r5, #12]
   b5578:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   b557a:	68ab      	ldr	r3, [r5, #8]
   b557c:	60a3      	str	r3, [r4, #8]
    }
   b557e:	4620      	mov	r0, r4
   b5580:	bd38      	pop	{r3, r4, r5, pc}
	...

000b5584 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   b5584:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5586:	b089      	sub	sp, #36	; 0x24
   b5588:	4604      	mov	r4, r0
   b558a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   b558c:	a801      	add	r0, sp, #4
   b558e:	4611      	mov	r1, r2
   b5590:	f7ff fe54 	bl	b523c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   b5594:	b1a4      	cbz	r4, b55c0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
        p.setError(Error((Error::Type)error, (const char*)data));
   b5596:	b224      	sxth	r4, r4
        msg_(msg ? (const char*)strdup(msg) : nullptr),
   b5598:	b11d      	cbz	r5, b55a2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1e>
   b559a:	4628      	mov	r0, r5
   b559c:	f001 fe0a 	bl	b71b4 <strdup>
   b55a0:	4605      	mov	r5, r0
   b55a2:	a801      	add	r0, sp, #4
   b55a4:	a903      	add	r1, sp, #12
        type_(type) {
   b55a6:	9503      	str	r5, [sp, #12]
   b55a8:	f8ad 4010 	strh.w	r4, [sp, #16]
   b55ac:	f7ff fea6 	bl	b52fc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   b55b0:	a803      	add	r0, sp, #12
   b55b2:	f7ff fdf6 	bl	b51a2 <_ZN8particle5ErrorD1Ev>
   b55b6:	a802      	add	r0, sp, #8
   b55b8:	f7fe fd8c 	bl	b40d4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   b55bc:	b009      	add	sp, #36	; 0x24
   b55be:	bdf0      	pop	{r4, r5, r6, r7, pc}
      { return _M_ptr; }
   b55c0:	9d01      	ldr	r5, [sp, #4]
	return __atomic_compare_exchange(std::__addressof(_M_i),
   b55c2:	2301      	movs	r3, #1
   b55c4:	e8d5 2f4f 	ldrexb	r2, [r5]
   b55c8:	2a00      	cmp	r2, #0
   b55ca:	d103      	bne.n	b55d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x50>
   b55cc:	e8c5 3f41 	strexb	r1, r3, [r5]
   b55d0:	2900      	cmp	r1, #0
   b55d2:	d1f7      	bne.n	b55c4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x40>
        if (this->changeState(State::SUCCEEDED)) {
   b55d4:	d1ef      	bne.n	b55b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
            new(&result_) ResultT(std::move(result));
   b55d6:	732b      	strb	r3, [r5, #12]
	__atomic_store_n(&_M_i, __i, int(__m));
   b55d8:	f3bf 8f5b 	dmb	ish
   b55dc:	706b      	strb	r3, [r5, #1]
	return __atomic_exchange_n(&_M_p, __p, int(__m));
   b55de:	1d2b      	adds	r3, r5, #4
   b55e0:	f3bf 8f5b 	dmb	ish
   b55e4:	e853 6f00 	ldrex	r6, [r3]
   b55e8:	e843 4200 	strex	r2, r4, [r3]
   b55ec:	2a00      	cmp	r2, #0
   b55ee:	d1f9      	bne.n	b55e4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x60>
   b55f0:	f3bf 8f5b 	dmb	ish
        if (callbackPtr) {
   b55f4:	2e00      	cmp	r6, #0
   b55f6:	d0de      	beq.n	b55b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        return (application_thread_current(nullptr) != 0);
   b55f8:	4620      	mov	r0, r4
   b55fa:	f7ff fc87 	bl	b4f0c <application_thread_current>
        if (ContextT::isApplicationThreadCurrent()) {
   b55fe:	4607      	mov	r7, r0
   b5600:	b160      	cbz	r0, b561c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x98>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   b5602:	f105 010c 	add.w	r1, r5, #12
   b5606:	4630      	mov	r0, r6
   b5608:	f7ff fe43 	bl	b5292 <_ZNKSt8functionIFvRKbEEclES1_>
    class function<_Res(_ArgTypes...)>
   b560c:	4630      	mov	r0, r6
   b560e:	f7ff fd8a 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
            delete callbackPtr;
   b5612:	2110      	movs	r1, #16
   b5614:	4630      	mov	r0, r6
   b5616:	f7fe fd40 	bl	b409a <_ZdlPvj>
   b561a:	e7cc      	b.n	b55b6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   b561c:	4631      	mov	r1, r6
   b561e:	a803      	add	r0, sp, #12
   b5620:	f7ff ffa0 	bl	b5564 <_ZNSt8functionIFvRKbEEC1ERKS3_>
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   b5624:	7b2b      	ldrb	r3, [r5, #12]
   b5626:	f88d 301c 	strb.w	r3, [sp, #28]
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   b562a:	2010      	movs	r0, #16
   b562c:	f7fe fd31 	bl	b4092 <_Znwj>
   b5630:	4605      	mov	r5, r0
   b5632:	b1d0      	cbz	r0, b566a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xe6>
    _Function_base() : _M_manager(nullptr) { }
   b5634:	6087      	str	r7, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5636:	2014      	movs	r0, #20
   b5638:	f7fe fd2b 	bl	b4092 <_Znwj>
   b563c:	4604      	mov	r4, r0
   b563e:	b178      	cbz	r0, b5660 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xdc>
    _Function_base() : _M_manager(nullptr) { }
   b5640:	6087      	str	r7, [r0, #8]
	std::swap(_M_functor, __x._M_functor);
   b5642:	4601      	mov	r1, r0
   b5644:	a803      	add	r0, sp, #12
   b5646:	f7ff fd77 	bl	b5138 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b564a:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   b564c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   b564e:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   b5650:	9b06      	ldr	r3, [sp, #24]
      __a = _GLIBCXX_MOVE(__b);
   b5652:	9205      	str	r2, [sp, #20]
   b5654:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   b5656:	60e3      	str	r3, [r4, #12]
   b5658:	f89d 301c 	ldrb.w	r3, [sp, #28]
      __a = _GLIBCXX_MOVE(__b);
   b565c:	9206      	str	r2, [sp, #24]
   b565e:	7423      	strb	r3, [r4, #16]
	    _M_invoker = &_My_handler::_M_invoke;
   b5660:	4b06      	ldr	r3, [pc, #24]	; (b567c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xf8>)
   b5662:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   b5664:	4b06      	ldr	r3, [pc, #24]	; (b5680 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0xfc>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   b5666:	602c      	str	r4, [r5, #0]
	    _M_manager = &_My_handler::_M_manager;
   b5668:	60ab      	str	r3, [r5, #8]
    class function<_Res(_ArgTypes...)>
   b566a:	a803      	add	r0, sp, #12
   b566c:	f7ff fd5b 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
        return (application_thread_invoke(callback, data, nullptr) == 0);
   b5670:	2200      	movs	r2, #0
   b5672:	4629      	mov	r1, r5
   b5674:	4803      	ldr	r0, [pc, #12]	; (b5684 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x100>)
   b5676:	f7ff fc51 	bl	b4f1c <application_thread_invoke>
   b567a:	e7c7      	b.n	b560c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x88>
   b567c:	000b52a5 	.word	0x000b52a5
   b5680:	000b5689 	.word	0x000b5689
   b5684:	000b50ff 	.word	0x000b50ff

000b5688 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
	switch (__op)
   b5688:	2a01      	cmp	r2, #1
      _M_manager(_Any_data& __dest, const _Any_data& __source,
   b568a:	b570      	push	{r4, r5, r6, lr}
   b568c:	4604      	mov	r4, r0
	switch (__op)
   b568e:	d103      	bne.n	b5698 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x10>
	    return __source._M_access<_Functor*>();
   b5690:	680b      	ldr	r3, [r1, #0]
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
   b5692:	6003      	str	r3, [r0, #0]
      }
   b5694:	2000      	movs	r0, #0
   b5696:	bd70      	pop	{r4, r5, r6, pc}
	  switch (__op)
   b5698:	2a02      	cmp	r2, #2
   b569a:	d00c      	beq.n	b56b6 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2e>
   b569c:	2a03      	cmp	r2, #3
   b569e:	d1f9      	bne.n	b5694 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	  delete __victim._M_access<_Functor*>();
   b56a0:	6804      	ldr	r4, [r0, #0]
   b56a2:	2c00      	cmp	r4, #0
   b56a4:	d0f6      	beq.n	b5694 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
    class function<_Res(_ArgTypes...)>
   b56a6:	4620      	mov	r0, r4
   b56a8:	f7ff fd3d 	bl	b5126 <_ZNSt14_Function_baseD1Ev>
	  delete __victim._M_access<_Functor*>();
   b56ac:	2114      	movs	r1, #20
   b56ae:	4620      	mov	r0, r4
   b56b0:	f7fe fcf3 	bl	b409a <_ZdlPvj>
   b56b4:	e7ee      	b.n	b5694 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>
	    new _Functor(*__source._M_access<const _Functor*>());
   b56b6:	2014      	movs	r0, #20
	  __dest._M_access<_Functor*>() =
   b56b8:	680e      	ldr	r6, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   b56ba:	f7fe fcea 	bl	b4092 <_Znwj>
   b56be:	4605      	mov	r5, r0
   b56c0:	b120      	cbz	r0, b56cc <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x44>
      _Bind(const _Bind&) = default;
   b56c2:	4631      	mov	r1, r6
   b56c4:	f7ff ff4e 	bl	b5564 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   b56c8:	7c33      	ldrb	r3, [r6, #16]
   b56ca:	742b      	strb	r3, [r5, #16]
	  __dest._M_access<_Functor*>() =
   b56cc:	6025      	str	r5, [r4, #0]
	}
   b56ce:	e7e1      	b.n	b5694 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0xc>

000b56d0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b56d0:	2200      	movs	r2, #0
   b56d2:	6840      	ldr	r0, [r0, #4]
   b56d4:	4611      	mov	r1, r2
   b56d6:	f7ff bcaf 	b.w	b5038 <network_listening>

000b56da <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b56da:	2200      	movs	r2, #0
   b56dc:	6840      	ldr	r0, [r0, #4]
   b56de:	4611      	mov	r1, r2
   b56e0:	f7ff bcba 	b.w	b5058 <network_get_listen_timeout>

000b56e4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b56e4:	6840      	ldr	r0, [r0, #4]
   b56e6:	2200      	movs	r2, #0
   b56e8:	f7ff bcae 	b.w	b5048 <network_set_listen_timeout>

000b56ec <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b56ec:	6840      	ldr	r0, [r0, #4]
   b56ee:	2200      	movs	r2, #0
   b56f0:	f081 0101 	eor.w	r1, r1, #1
   b56f4:	f7ff bc98 	b.w	b5028 <network_listen>

000b56f8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b56f8:	2300      	movs	r3, #0
   b56fa:	6840      	ldr	r0, [r0, #4]
   b56fc:	461a      	mov	r2, r3
   b56fe:	4619      	mov	r1, r3
   b5700:	f7ff bc8a 	b.w	b5018 <network_off>

000b5704 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b5704:	2300      	movs	r3, #0
   b5706:	6840      	ldr	r0, [r0, #4]
   b5708:	461a      	mov	r2, r3
   b570a:	4619      	mov	r1, r3
   b570c:	f7ff bc7c 	b.w	b5008 <network_on>

000b5710 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   b5710:	2200      	movs	r2, #0
   b5712:	6840      	ldr	r0, [r0, #4]
   b5714:	4611      	mov	r1, r2
   b5716:	f7ff bc6f 	b.w	b4ff8 <network_ready>

000b571a <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b571a:	2200      	movs	r2, #0
   b571c:	6840      	ldr	r0, [r0, #4]
   b571e:	4611      	mov	r1, r2
   b5720:	f7ff bc5a 	b.w	b4fd8 <network_connecting>

000b5724 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b5724:	6840      	ldr	r0, [r0, #4]
   b5726:	2200      	movs	r2, #0
   b5728:	2102      	movs	r1, #2
   b572a:	f7ff bc5d 	b.w	b4fe8 <network_disconnect>

000b572e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b572e:	2300      	movs	r3, #0
   b5730:	6840      	ldr	r0, [r0, #4]
   b5732:	461a      	mov	r2, r3
   b5734:	f7ff bc48 	b.w	b4fc8 <network_connect>

000b5738 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   b5738:	4b02      	ldr	r3, [pc, #8]	; (b5744 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   b573a:	2203      	movs	r2, #3
   b573c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   b573e:	4a02      	ldr	r2, [pc, #8]	; (b5748 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   b5740:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   b5742:	4770      	bx	lr
   b5744:	2003e6bc 	.word	0x2003e6bc
   b5748:	000b7324 	.word	0x000b7324

000b574c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   b574c:	4770      	bx	lr

000b574e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   b574e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5750:	4606      	mov	r6, r0
   b5752:	4615      	mov	r5, r2
   b5754:	460c      	mov	r4, r1
   b5756:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   b5758:	42bc      	cmp	r4, r7
   b575a:	d006      	beq.n	b576a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   b575c:	6833      	ldr	r3, [r6, #0]
   b575e:	f814 1b01 	ldrb.w	r1, [r4], #1
   b5762:	689b      	ldr	r3, [r3, #8]
   b5764:	4630      	mov	r0, r6
   b5766:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   b5768:	e7f6      	b.n	b5758 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   b576a:	4628      	mov	r0, r5
   b576c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b576e <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   b576e:	7c00      	ldrb	r0, [r0, #16]
   b5770:	2200      	movs	r2, #0
   b5772:	f7ff bad3 	b.w	b4d1c <hal_i2c_write>

000b5776 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   b5776:	7c00      	ldrb	r0, [r0, #16]
   b5778:	2100      	movs	r1, #0
   b577a:	f7ff bad7 	b.w	b4d2c <hal_i2c_available>

000b577e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   b577e:	7c00      	ldrb	r0, [r0, #16]
   b5780:	2100      	movs	r1, #0
   b5782:	f7ff badb 	b.w	b4d3c <hal_i2c_read>

000b5786 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   b5786:	7c00      	ldrb	r0, [r0, #16]
   b5788:	2100      	movs	r1, #0
   b578a:	f7ff badf 	b.w	b4d4c <hal_i2c_peek>

000b578e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   b578e:	7c00      	ldrb	r0, [r0, #16]
   b5790:	2100      	movs	r1, #0
   b5792:	f7ff bae3 	b.w	b4d5c <hal_i2c_flush>

000b5796 <_ZN7TwoWireD0Ev>:
   b5796:	b510      	push	{r4, lr}
   b5798:	2114      	movs	r1, #20
   b579a:	4604      	mov	r4, r0
   b579c:	f7fe fc7d 	bl	b409a <_ZdlPvj>
   b57a0:	4620      	mov	r0, r4
   b57a2:	bd10      	pop	{r4, pc}

000b57a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57a4:	b538      	push	{r3, r4, r5, lr}
   b57a6:	4604      	mov	r4, r0
   b57a8:	4615      	mov	r5, r2
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   b57aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b57ae:	2200      	movs	r2, #0
   b57b0:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b57b4:	4b09      	ldr	r3, [pc, #36]	; (b57dc <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x38>)
  _i2c = i2c;
   b57b6:	7421      	strb	r1, [r4, #16]
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   b57b8:	4608      	mov	r0, r1
   b57ba:	6023      	str	r3, [r4, #0]
  int result = hal_i2c_init(_i2c, &conf);
   b57bc:	4629      	mov	r1, r5
   b57be:	f7ff fadd 	bl	b4d7c <hal_i2c_init>
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57c2:	30bf      	adds	r0, #191	; 0xbf
   b57c4:	d108      	bne.n	b57d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
      (conf.flags & HAL_I2C_CONFIG_FLAG_FREEABLE)) {
   b57c6:	696b      	ldr	r3, [r5, #20]
  if (result == SYSTEM_ERROR_NOT_ENOUGH_DATA && 
   b57c8:	07db      	lsls	r3, r3, #31
   b57ca:	d505      	bpl.n	b57d8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x34>
    free(conf.rx_buffer);
   b57cc:	6868      	ldr	r0, [r5, #4]
   b57ce:	f7ff fc63 	bl	b5098 <free>
    free(conf.tx_buffer);
   b57d2:	68e8      	ldr	r0, [r5, #12]
   b57d4:	f7ff fc60 	bl	b5098 <free>
}
   b57d8:	4620      	mov	r0, r4
   b57da:	bd38      	pop	{r3, r4, r5, pc}
   b57dc:	000b7360 	.word	0x000b7360

000b57e0 <_ZN7TwoWire8setSpeedEm>:
  hal_i2c_set_speed(_i2c, clockSpeed, NULL);
   b57e0:	7c00      	ldrb	r0, [r0, #16]
   b57e2:	2200      	movs	r2, #0
   b57e4:	f7ff ba7a 	b.w	b4cdc <hal_i2c_set_speed>

000b57e8 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   b57e8:	2300      	movs	r3, #0
   b57ea:	7c00      	ldrb	r0, [r0, #16]
   b57ec:	461a      	mov	r2, r3
   b57ee:	4619      	mov	r1, r3
   b57f0:	f7ff ba7c 	b.w	b4cec <hal_i2c_begin>

000b57f4 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   b57f4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   b57f6:	2200      	movs	r2, #0
   b57f8:	2314      	movs	r3, #20
   b57fa:	e9cd 2201 	strd	r2, r2, [sp, #4]
   b57fe:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   b5802:	780b      	ldrb	r3, [r1, #0]
   b5804:	f88d 3008 	strb.w	r3, [sp, #8]
   b5808:	684b      	ldr	r3, [r1, #4]
   b580a:	9303      	str	r3, [sp, #12]
   b580c:	68cb      	ldr	r3, [r1, #12]
   b580e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   b5810:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   b5812:	7a0b      	ldrb	r3, [r1, #8]
   b5814:	9305      	str	r3, [sp, #20]
   b5816:	a901      	add	r1, sp, #4
   b5818:	f7ff fab8 	bl	b4d8c <hal_i2c_request_ex>
}
   b581c:	b007      	add	sp, #28
   b581e:	f85d fb04 	ldr.w	pc, [sp], #4

000b5822 <_ZN7TwoWire11requestFromEhjh>:
{
   b5822:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   b5824:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   b5826:	f88d 1000 	strb.w	r1, [sp]
   b582a:	f04f 0164 	mov.w	r1, #100	; 0x64
   b582e:	9103      	str	r1, [sp, #12]
   b5830:	bf18      	it	ne
   b5832:	2301      	movne	r3, #1
   b5834:	4669      	mov	r1, sp
    size_ = size;
   b5836:	9201      	str	r2, [sp, #4]
   b5838:	f88d 3008 	strb.w	r3, [sp, #8]
   b583c:	f7ff ffda 	bl	b57f4 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   b5840:	b005      	add	sp, #20
   b5842:	f85d fb04 	ldr.w	pc, [sp], #4

000b5846 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   b5846:	2301      	movs	r3, #1
   b5848:	f7ff bfeb 	b.w	b5822 <_ZN7TwoWire11requestFromEhjh>

000b584c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   b584c:	7c00      	ldrb	r0, [r0, #16]
   b584e:	2200      	movs	r2, #0
   b5850:	f7ff ba54 	b.w	b4cfc <hal_i2c_begin_transmission>

000b5854 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   b5854:	7c00      	ldrb	r0, [r0, #16]
   b5856:	2200      	movs	r2, #0
   b5858:	f7ff ba58 	b.w	b4d0c <hal_i2c_end_transmission>

000b585c <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   b585c:	2101      	movs	r1, #1
   b585e:	f7ff bff9 	b.w	b5854 <_ZN7TwoWire15endTransmissionEh>

000b5862 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   b5862:	4770      	bx	lr

000b5864 <_ZN9IPAddressD0Ev>:
   b5864:	b510      	push	{r4, lr}
   b5866:	2118      	movs	r1, #24
   b5868:	4604      	mov	r4, r0
   b586a:	f7fe fc16 	bl	b409a <_ZdlPvj>
   b586e:	4620      	mov	r0, r4
   b5870:	bd10      	pop	{r4, pc}

000b5872 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   b5872:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   b5874:	7d03      	ldrb	r3, [r0, #20]
   b5876:	2b06      	cmp	r3, #6
{
   b5878:	b08d      	sub	sp, #52	; 0x34
   b587a:	460e      	mov	r6, r1
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b587c:	f100 0704 	add.w	r7, r0, #4
   b5880:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   b5884:	d012      	beq.n	b58ac <_ZNK9IPAddress7printToER5Print+0x3a>
   b5886:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   b588a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   b588e:	220a      	movs	r2, #10
   b5890:	4630      	mov	r0, r6
   b5892:	f000 f944 	bl	b5b1e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   b5896:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   b5898:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   b589a:	d019      	beq.n	b58d0 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   b589c:	2c00      	cmp	r4, #0
   b589e:	d0f4      	beq.n	b588a <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   b58a0:	212e      	movs	r1, #46	; 0x2e
   b58a2:	4630      	mov	r0, r6
   b58a4:	f000 f938 	bl	b5b18 <_ZN5Print5printEc>
   b58a8:	4404      	add	r4, r0
   b58aa:	e7ee      	b.n	b588a <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58ac:	232f      	movs	r3, #47	; 0x2f
   b58ae:	466a      	mov	r2, sp
   b58b0:	4639      	mov	r1, r7
   b58b2:	200a      	movs	r0, #10
		buf[0] = 0;
   b58b4:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   b58b8:	f7ff fa70 	bl	b4d9c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   b58bc:	4668      	mov	r0, sp
   b58be:	f001 fc96 	bl	b71ee <strlen>
   b58c2:	6833      	ldr	r3, [r6, #0]
   b58c4:	4602      	mov	r2, r0
   b58c6:	68db      	ldr	r3, [r3, #12]
   b58c8:	4669      	mov	r1, sp
   b58ca:	4630      	mov	r0, r6
   b58cc:	4798      	blx	r3
   b58ce:	4604      	mov	r4, r0
    }
    return n;
}
   b58d0:	4620      	mov	r0, r4
   b58d2:	b00d      	add	sp, #52	; 0x34
   b58d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000b58d8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   b58d8:	b510      	push	{r4, lr}
   b58da:	4b05      	ldr	r3, [pc, #20]	; (b58f0 <_ZN9IPAddressC1Ev+0x18>)
   b58dc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   b58de:	2211      	movs	r2, #17
   b58e0:	f840 3b04 	str.w	r3, [r0], #4
   b58e4:	2100      	movs	r1, #0
   b58e6:	f001 fc27 	bl	b7138 <memset>
}
   b58ea:	4620      	mov	r0, r4
   b58ec:	bd10      	pop	{r4, pc}
   b58ee:	bf00      	nop
   b58f0:	000b7388 	.word	0x000b7388

000b58f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   b58f4:	4603      	mov	r3, r0
   b58f6:	4a07      	ldr	r2, [pc, #28]	; (b5914 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   b58f8:	b510      	push	{r4, lr}
   b58fa:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   b58fe:	f101 0210 	add.w	r2, r1, #16
   b5902:	f851 4b04 	ldr.w	r4, [r1], #4
   b5906:	f843 4b04 	str.w	r4, [r3], #4
   b590a:	4291      	cmp	r1, r2
   b590c:	d1f9      	bne.n	b5902 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   b590e:	780a      	ldrb	r2, [r1, #0]
   b5910:	701a      	strb	r2, [r3, #0]
}
   b5912:	bd10      	pop	{r4, pc}
   b5914:	000b7388 	.word	0x000b7388

000b5918 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   b5918:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   b591a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   b591e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   b5922:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   b5926:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   b592a:	2304      	movs	r3, #4
   b592c:	6041      	str	r1, [r0, #4]
   b592e:	7503      	strb	r3, [r0, #20]
}
   b5930:	bd10      	pop	{r4, pc}
	...

000b5934 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   b5934:	b507      	push	{r0, r1, r2, lr}
   b5936:	4b06      	ldr	r3, [pc, #24]	; (b5950 <_ZN9IPAddressC1EPKh+0x1c>)
   b5938:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   b593a:	78cb      	ldrb	r3, [r1, #3]
   b593c:	9300      	str	r3, [sp, #0]
   b593e:	788b      	ldrb	r3, [r1, #2]
   b5940:	784a      	ldrb	r2, [r1, #1]
   b5942:	7809      	ldrb	r1, [r1, #0]
   b5944:	f7ff ffe8 	bl	b5918 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   b5948:	b003      	add	sp, #12
   b594a:	f85d fb04 	ldr.w	pc, [sp], #4
   b594e:	bf00      	nop
   b5950:	000b7388 	.word	0x000b7388

000b5954 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   b5954:	4b01      	ldr	r3, [pc, #4]	; (b595c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   b5956:	4a02      	ldr	r2, [pc, #8]	; (b5960 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   b5958:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   b595a:	4770      	bx	lr
   b595c:	2003e6c4 	.word	0x2003e6c4
   b5960:	000b7394 	.word	0x000b7394

000b5964 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   b5964:	2300      	movs	r3, #0
   b5966:	6840      	ldr	r0, [r0, #4]
   b5968:	461a      	mov	r2, r3
   b596a:	f7ff bb2d 	b.w	b4fc8 <network_connect>

000b596e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   b596e:	6840      	ldr	r0, [r0, #4]
   b5970:	2200      	movs	r2, #0
   b5972:	2102      	movs	r1, #2
   b5974:	f7ff bb38 	b.w	b4fe8 <network_disconnect>

000b5978 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   b5978:	2200      	movs	r2, #0
   b597a:	6840      	ldr	r0, [r0, #4]
   b597c:	4611      	mov	r1, r2
   b597e:	f7ff bb2b 	b.w	b4fd8 <network_connecting>

000b5982 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   b5982:	2200      	movs	r2, #0
   b5984:	6840      	ldr	r0, [r0, #4]
   b5986:	4611      	mov	r1, r2
   b5988:	f7ff bb36 	b.w	b4ff8 <network_ready>

000b598c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   b598c:	2300      	movs	r3, #0
   b598e:	6840      	ldr	r0, [r0, #4]
   b5990:	461a      	mov	r2, r3
   b5992:	4619      	mov	r1, r3
   b5994:	f7ff bb38 	b.w	b5008 <network_on>

000b5998 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   b5998:	2300      	movs	r3, #0
   b599a:	6840      	ldr	r0, [r0, #4]
   b599c:	461a      	mov	r2, r3
   b599e:	4619      	mov	r1, r3
   b59a0:	f7ff bb3a 	b.w	b5018 <network_off>

000b59a4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   b59a4:	6840      	ldr	r0, [r0, #4]
   b59a6:	2100      	movs	r1, #0
   b59a8:	f7ff bb5e 	b.w	b5068 <network_is_on>

000b59ac <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   b59ac:	6840      	ldr	r0, [r0, #4]
   b59ae:	2100      	movs	r1, #0
   b59b0:	f7ff bb62 	b.w	b5078 <network_is_off>

000b59b4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   b59b4:	6840      	ldr	r0, [r0, #4]
   b59b6:	2200      	movs	r2, #0
   b59b8:	f081 0101 	eor.w	r1, r1, #1
   b59bc:	f7ff bb34 	b.w	b5028 <network_listen>

000b59c0 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   b59c0:	6840      	ldr	r0, [r0, #4]
   b59c2:	2200      	movs	r2, #0
   b59c4:	f7ff bb40 	b.w	b5048 <network_set_listen_timeout>

000b59c8 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   b59c8:	2200      	movs	r2, #0
   b59ca:	6840      	ldr	r0, [r0, #4]
   b59cc:	4611      	mov	r1, r2
   b59ce:	f7ff bb43 	b.w	b5058 <network_get_listen_timeout>

000b59d2 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   b59d2:	2200      	movs	r2, #0
   b59d4:	6840      	ldr	r0, [r0, #4]
   b59d6:	4611      	mov	r1, r2
   b59d8:	f7ff bb2e 	b.w	b5038 <network_listening>

000b59dc <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   b59dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   b59e0:	b095      	sub	sp, #84	; 0x54
   b59e2:	4614      	mov	r4, r2
   b59e4:	460d      	mov	r5, r1
   b59e6:	4607      	mov	r7, r0
    IPAddress addr;
   b59e8:	f7ff ff76 	bl	b58d8 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   b59ec:	2100      	movs	r1, #0
    struct addrinfo hints = {};
   b59ee:	221c      	movs	r2, #28
   b59f0:	a80d      	add	r0, sp, #52	; 0x34
    struct addrinfo *ai = nullptr;
   b59f2:	9100      	str	r1, [sp, #0]
    struct addrinfo hints = {};
   b59f4:	f001 fba0 	bl	b7138 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   b59f8:	2340      	movs	r3, #64	; 0x40
   b59fa:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   b59fc:	4620      	mov	r0, r4
   b59fe:	466b      	mov	r3, sp
   b5a00:	aa0c      	add	r2, sp, #48	; 0x30
   b5a02:	2100      	movs	r1, #0
   b5a04:	f7ff f9da 	bl	b4dbc <netdb_getaddrinfo>
    if (!r) {
   b5a08:	4604      	mov	r4, r0
   b5a0a:	2800      	cmp	r0, #0
   b5a0c:	d14b      	bne.n	b5aa6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a0e:	4602      	mov	r2, r0
   b5a10:	2101      	movs	r1, #1
   b5a12:	6868      	ldr	r0, [r5, #4]
   b5a14:	f7ff faf0 	bl	b4ff8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a18:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   b5a1a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a1c:	4622      	mov	r2, r4
   b5a1e:	6868      	ldr	r0, [r5, #4]
   b5a20:	f7ff faea 	bl	b4ff8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a24:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   b5a26:	4681      	mov	r9, r0
        bool ok = false;
   b5a28:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a2a:	2e00      	cmp	r6, #0
   b5a2c:	d03b      	beq.n	b5aa6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
   b5a2e:	2900      	cmp	r1, #0
   b5a30:	d139      	bne.n	b5aa6 <_ZN5spark12NetworkClass7resolveEPKc+0xca>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   b5a32:	6873      	ldr	r3, [r6, #4]
   b5a34:	2b02      	cmp	r3, #2
   b5a36:	d003      	beq.n	b5a40 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   b5a38:	2b0a      	cmp	r3, #10
   b5a3a:	d011      	beq.n	b5a60 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   b5a3c:	69f6      	ldr	r6, [r6, #28]
   b5a3e:	e7f4      	b.n	b5a2a <_ZN5spark12NetworkClass7resolveEPKc+0x4e>
                case AF_INET: {
                    if (!ipv4) {
   b5a40:	f1b8 0f00 	cmp.w	r8, #0
   b5a44:	d0fa      	beq.n	b5a3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   b5a46:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   b5a48:	a806      	add	r0, sp, #24
   b5a4a:	3104      	adds	r1, #4
class IPAddress : public Printable {
   b5a4c:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   b5a4e:	f7ff ff71 	bl	b5934 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   b5a52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a54:	1d3c      	adds	r4, r7, #4
   b5a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a58:	682b      	ldr	r3, [r5, #0]
   b5a5a:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5a5c:	4641      	mov	r1, r8
        return *this = IPAddress(address);
   b5a5e:	e7ed      	b.n	b5a3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   b5a60:	f1b9 0f00 	cmp.w	r9, #0
   b5a64:	d0ea      	beq.n	b5a3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   b5a66:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   b5a68:	2210      	movs	r2, #16
   b5a6a:	a801      	add	r0, sp, #4
   b5a6c:	f001 fb64 	bl	b7138 <memset>
                    a.v = 6;
   b5a70:	2306      	movs	r3, #6
   b5a72:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   b5a76:	ad01      	add	r5, sp, #4
   b5a78:	f104 0308 	add.w	r3, r4, #8
   b5a7c:	3418      	adds	r4, #24
   b5a7e:	6818      	ldr	r0, [r3, #0]
   b5a80:	6859      	ldr	r1, [r3, #4]
   b5a82:	462a      	mov	r2, r5
   b5a84:	c203      	stmia	r2!, {r0, r1}
   b5a86:	3308      	adds	r3, #8
   b5a88:	42a3      	cmp	r3, r4
   b5a8a:	4615      	mov	r5, r2
   b5a8c:	d1f7      	bne.n	b5a7e <_ZN5spark12NetworkClass7resolveEPKc+0xa2>
                    addr = IPAddress(a);
   b5a8e:	a901      	add	r1, sp, #4
   b5a90:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   b5a92:	ad07      	add	r5, sp, #28
   b5a94:	f7ff ff2e 	bl	b58f4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   b5a98:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   b5a9a:	1d3c      	adds	r4, r7, #4
   b5a9c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   b5a9e:	682b      	ldr	r3, [r5, #0]
   b5aa0:	7023      	strb	r3, [r4, #0]
                    ok = true;
   b5aa2:	4649      	mov	r1, r9
   b5aa4:	e7ca      	b.n	b5a3c <_ZN5spark12NetworkClass7resolveEPKc+0x60>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   b5aa6:	9800      	ldr	r0, [sp, #0]
   b5aa8:	f7ff f980 	bl	b4dac <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   b5aac:	4638      	mov	r0, r7
   b5aae:	b015      	add	sp, #84	; 0x54
   b5ab0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000b5ab4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   b5ab4:	4b02      	ldr	r3, [pc, #8]	; (b5ac0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   b5ab6:	4a03      	ldr	r2, [pc, #12]	; (b5ac4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   b5ab8:	601a      	str	r2, [r3, #0]
   b5aba:	2200      	movs	r2, #0
   b5abc:	605a      	str	r2, [r3, #4]

} // spark
   b5abe:	4770      	bx	lr
   b5ac0:	2003e6c8 	.word	0x2003e6c8
   b5ac4:	000b73a0 	.word	0x000b73a0

000b5ac8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   b5ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   b5aca:	4606      	mov	r6, r0
   b5acc:	460d      	mov	r5, r1
  size_t n = 0;
   b5ace:	188f      	adds	r7, r1, r2
   b5ad0:	2400      	movs	r4, #0
  while (size--) {
   b5ad2:	42bd      	cmp	r5, r7
   b5ad4:	d00c      	beq.n	b5af0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   b5ad6:	6833      	ldr	r3, [r6, #0]
   b5ad8:	f815 1b01 	ldrb.w	r1, [r5], #1
   b5adc:	689b      	ldr	r3, [r3, #8]
   b5ade:	4630      	mov	r0, r6
   b5ae0:	4798      	blx	r3
     if (chunk>=0)
   b5ae2:	1e03      	subs	r3, r0, #0
   b5ae4:	db01      	blt.n	b5aea <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   b5ae6:	441c      	add	r4, r3
  while (size--) {
   b5ae8:	e7f3      	b.n	b5ad2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   b5aea:	2c00      	cmp	r4, #0
   b5aec:	bf08      	it	eq
   b5aee:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   b5af0:	4620      	mov	r0, r4
   b5af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000b5af4 <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   b5af4:	b513      	push	{r0, r1, r4, lr}
   b5af6:	4604      	mov	r4, r0
    }
   b5af8:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   b5afa:	b159      	cbz	r1, b5b14 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   b5afc:	9101      	str	r1, [sp, #4]
   b5afe:	f001 fb76 	bl	b71ee <strlen>
   b5b02:	6823      	ldr	r3, [r4, #0]
   b5b04:	9901      	ldr	r1, [sp, #4]
   b5b06:	68db      	ldr	r3, [r3, #12]
   b5b08:	4602      	mov	r2, r0
   b5b0a:	4620      	mov	r0, r4
    }
   b5b0c:	b002      	add	sp, #8
   b5b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   b5b12:	4718      	bx	r3
    }
   b5b14:	b002      	add	sp, #8
   b5b16:	bd10      	pop	{r4, pc}

000b5b18 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   b5b18:	6803      	ldr	r3, [r0, #0]
   b5b1a:	689b      	ldr	r3, [r3, #8]
   b5b1c:	4718      	bx	r3

000b5b1e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   b5b1e:	b530      	push	{r4, r5, lr}
   b5b20:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   b5b22:	2300      	movs	r3, #0

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   b5b24:	2a01      	cmp	r2, #1
  *str = '\0';
   b5b26:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  if (base < 2) base = 10;
   b5b2a:	bf98      	it	ls
   b5b2c:	220a      	movls	r2, #10
   b5b2e:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   b5b30:	460d      	mov	r5, r1
   b5b32:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   b5b36:	fb01 5312 	mls	r3, r1, r2, r5
   b5b3a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5b3e:	2b09      	cmp	r3, #9
   b5b40:	bf94      	ite	ls
   b5b42:	3330      	addls	r3, #48	; 0x30
   b5b44:	3337      	addhi	r3, #55	; 0x37
   b5b46:	b2db      	uxtb	r3, r3
  } while(n);
   b5b48:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   b5b4a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   b5b4e:	d9ef      	bls.n	b5b30 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   b5b50:	4621      	mov	r1, r4
   b5b52:	f7ff ffcf 	bl	b5af4 <_ZN5Print5writeEPKc>
}
   b5b56:	b00b      	add	sp, #44	; 0x2c
   b5b58:	bd30      	pop	{r4, r5, pc}
	...

000b5b5c <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   b5b5c:	4b01      	ldr	r3, [pc, #4]	; (b5b64 <_GLOBAL__sub_I_RGB+0x8>)
   b5b5e:	2200      	movs	r2, #0
   b5b60:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   b5b62:	4770      	bx	lr
   b5b64:	2003e6d0 	.word	0x2003e6d0

000b5b68 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   b5b68:	b510      	push	{r4, lr}
   b5b6a:	4604      	mov	r4, r0
   b5b6c:	4608      	mov	r0, r1
{
    _spi = spi;
   b5b6e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   b5b70:	f7ff f92c 	bl	b4dcc <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   b5b74:	2300      	movs	r3, #0
   b5b76:	6063      	str	r3, [r4, #4]
}
   b5b78:	4620      	mov	r0, r4
   b5b7a:	bd10      	pop	{r4, pc}

000b5b7c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   b5b7c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   b5b80:	ec57 6b10 	vmov	r6, r7, d0
   b5b84:	4680      	mov	r8, r0
   b5b86:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   b5b88:	ee10 0a10 	vmov	r0, s0
   b5b8c:	2200      	movs	r2, #0
   b5b8e:	2300      	movs	r3, #0
   b5b90:	4639      	mov	r1, r7
   b5b92:	f001 f8d5 	bl	b6d40 <__aeabi_dcmplt>
   b5b96:	b128      	cbz	r0, b5ba4 <_Z4dtoadhPc+0x28>
        val = -val;
   b5b98:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   b5b9c:	461f      	mov	r7, r3
        *sout++ = '-';
   b5b9e:	232d      	movs	r3, #45	; 0x2d
   b5ba0:	f804 3b01 	strb.w	r3, [r4], #1
   b5ba4:	2300      	movs	r3, #0
    }
    long scale = 1;
   b5ba6:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   b5baa:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   b5bac:	b2d9      	uxtb	r1, r3
   b5bae:	4588      	cmp	r8, r1
   b5bb0:	d903      	bls.n	b5bba <_Z4dtoadhPc+0x3e>
        scale *= 10;
   b5bb2:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   b5bb6:	3301      	adds	r3, #1
   b5bb8:	e7f8      	b.n	b5bac <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   b5bba:	4648      	mov	r0, r9
   b5bbc:	f000 fde4 	bl	b6788 <__aeabi_i2d>
   b5bc0:	4632      	mov	r2, r6
   b5bc2:	463b      	mov	r3, r7
   b5bc4:	f000 fe4a 	bl	b685c <__aeabi_dmul>
   b5bc8:	4606      	mov	r6, r0
   b5bca:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   b5bcc:	f001 f918 	bl	b6e00 <__aeabi_d2ulz>
   b5bd0:	468a      	mov	sl, r1
   b5bd2:	4605      	mov	r5, r0
   b5bd4:	468b      	mov	fp, r1
    if ((val-fixed)>=0.5)    // round last digit
   b5bd6:	f000 fe0b 	bl	b67f0 <__aeabi_ul2d>
   b5bda:	4602      	mov	r2, r0
   b5bdc:	460b      	mov	r3, r1
   b5bde:	4630      	mov	r0, r6
   b5be0:	4639      	mov	r1, r7
   b5be2:	f000 fc83 	bl	b64ec <__aeabi_dsub>
   b5be6:	4b14      	ldr	r3, [pc, #80]	; (b5c38 <_Z4dtoadhPc+0xbc>)
   b5be8:	2200      	movs	r2, #0
   b5bea:	f001 f8bd 	bl	b6d68 <__aeabi_dcmpge>
   b5bee:	b110      	cbz	r0, b5bf6 <_Z4dtoadhPc+0x7a>
        fixed++;
   b5bf0:	3501      	adds	r5, #1
   b5bf2:	f14a 0b00 	adc.w	fp, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   b5bf6:	464a      	mov	r2, r9
   b5bf8:	4628      	mov	r0, r5
   b5bfa:	17d3      	asrs	r3, r2, #31
   b5bfc:	4659      	mov	r1, fp
   b5bfe:	f001 f8e7 	bl	b6dd0 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   b5c02:	2301      	movs	r3, #1
   b5c04:	4615      	mov	r5, r2
   b5c06:	4621      	mov	r1, r4
   b5c08:	220a      	movs	r2, #10
   b5c0a:	f000 faa4 	bl	b6156 <ultoa>
    if (prec) {
   b5c0e:	f1b8 0f00 	cmp.w	r8, #0
   b5c12:	d00e      	beq.n	b5c32 <_Z4dtoadhPc+0xb6>
        sout += strlen(sout);
   b5c14:	4620      	mov	r0, r4
   b5c16:	f001 faea 	bl	b71ee <strlen>
        *sout++ = '.';
   b5c1a:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   b5c1c:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   b5c1e:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   b5c20:	220a      	movs	r2, #10
   b5c22:	4643      	mov	r3, r8
   b5c24:	3101      	adds	r1, #1
   b5c26:	4628      	mov	r0, r5
    }
}
   b5c28:	b001      	add	sp, #4
   b5c2a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        ultoa(second, sout, 10, prec);
   b5c2e:	f000 ba92 	b.w	b6156 <ultoa>
}
   b5c32:	b001      	add	sp, #4
   b5c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   b5c38:	3fe00000 	.word	0x3fe00000

000b5c3c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   b5c3c:	b510      	push	{r4, lr}
   b5c3e:	4604      	mov	r4, r0
{
	free(buffer);
   b5c40:	6800      	ldr	r0, [r0, #0]
   b5c42:	f7ff fa29 	bl	b5098 <free>
}
   b5c46:	4620      	mov	r0, r4
   b5c48:	bd10      	pop	{r4, pc}

000b5c4a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   b5c4a:	b510      	push	{r4, lr}
   b5c4c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   b5c4e:	6800      	ldr	r0, [r0, #0]
   b5c50:	b108      	cbz	r0, b5c56 <_ZN6String10invalidateEv+0xc>
   b5c52:	f7ff fa21 	bl	b5098 <free>
	buffer = NULL;
   b5c56:	2300      	movs	r3, #0
	capacity = len = 0;
   b5c58:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   b5c5c:	6023      	str	r3, [r4, #0]
}
   b5c5e:	bd10      	pop	{r4, pc}

000b5c60 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   b5c60:	b538      	push	{r3, r4, r5, lr}
   b5c62:	4604      	mov	r4, r0
   b5c64:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   b5c66:	6800      	ldr	r0, [r0, #0]
   b5c68:	3101      	adds	r1, #1
   b5c6a:	f7ff fa1d 	bl	b50a8 <realloc>
	if (newbuffer) {
   b5c6e:	b110      	cbz	r0, b5c76 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   b5c70:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   b5c74:	2001      	movs	r0, #1
	}
	return 0;
}
   b5c76:	bd38      	pop	{r3, r4, r5, pc}

000b5c78 <_ZN6String7reserveEj>:
{
   b5c78:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   b5c7a:	6803      	ldr	r3, [r0, #0]
{
   b5c7c:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   b5c7e:	b123      	cbz	r3, b5c8a <_ZN6String7reserveEj+0x12>
   b5c80:	6843      	ldr	r3, [r0, #4]
   b5c82:	428b      	cmp	r3, r1
   b5c84:	d301      	bcc.n	b5c8a <_ZN6String7reserveEj+0x12>
   b5c86:	2001      	movs	r0, #1
}
   b5c88:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   b5c8a:	4620      	mov	r0, r4
   b5c8c:	f7ff ffe8 	bl	b5c60 <_ZN6String12changeBufferEj>
   b5c90:	2800      	cmp	r0, #0
   b5c92:	d0f9      	beq.n	b5c88 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   b5c94:	68a3      	ldr	r3, [r4, #8]
   b5c96:	2b00      	cmp	r3, #0
   b5c98:	d1f5      	bne.n	b5c86 <_ZN6String7reserveEj+0xe>
   b5c9a:	6822      	ldr	r2, [r4, #0]
   b5c9c:	7013      	strb	r3, [r2, #0]
   b5c9e:	e7f2      	b.n	b5c86 <_ZN6String7reserveEj+0xe>

000b5ca0 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   b5ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b5ca2:	460d      	mov	r5, r1
	if (!reserve(length)) {
   b5ca4:	4611      	mov	r1, r2
   b5ca6:	9201      	str	r2, [sp, #4]
{
   b5ca8:	4604      	mov	r4, r0
	if (!reserve(length)) {
   b5caa:	f7ff ffe5 	bl	b5c78 <_ZN6String7reserveEj>
   b5cae:	9a01      	ldr	r2, [sp, #4]
   b5cb0:	b928      	cbnz	r0, b5cbe <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   b5cb2:	4620      	mov	r0, r4
   b5cb4:	f7ff ffc9 	bl	b5c4a <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   b5cb8:	4620      	mov	r0, r4
   b5cba:	b003      	add	sp, #12
   b5cbc:	bd30      	pop	{r4, r5, pc}
	len = length;
   b5cbe:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   b5cc0:	4629      	mov	r1, r5
   b5cc2:	6820      	ldr	r0, [r4, #0]
   b5cc4:	f001 fa2a 	bl	b711c <memcpy>
	buffer[len] = 0;
   b5cc8:	6822      	ldr	r2, [r4, #0]
   b5cca:	68a3      	ldr	r3, [r4, #8]
   b5ccc:	2100      	movs	r1, #0
   b5cce:	54d1      	strb	r1, [r2, r3]
	return *this;
   b5cd0:	e7f2      	b.n	b5cb8 <_ZN6String4copyEPKcj+0x18>

000b5cd2 <_ZN6StringC1EPK19__FlashStringHelper>:
	buffer = NULL;
   b5cd2:	2300      	movs	r3, #0
String::String(const __FlashStringHelper *pstr)
   b5cd4:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   b5cd6:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const __FlashStringHelper *pstr)
   b5cda:	4604      	mov	r4, r0
	len = 0;
   b5cdc:	6083      	str	r3, [r0, #8]
	flags = 0;
   b5cde:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   b5ce0:	b141      	cbz	r1, b5cf4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
	if (cstr) copy(cstr, strlen(cstr));
   b5ce2:	4608      	mov	r0, r1
   b5ce4:	9101      	str	r1, [sp, #4]
   b5ce6:	f001 fa82 	bl	b71ee <strlen>
   b5cea:	9901      	ldr	r1, [sp, #4]
   b5cec:	4602      	mov	r2, r0
   b5cee:	4620      	mov	r0, r4
   b5cf0:	f7ff ffd6 	bl	b5ca0 <_ZN6String4copyEPKcj>
}
   b5cf4:	4620      	mov	r0, r4
   b5cf6:	b002      	add	sp, #8
   b5cf8:	bd10      	pop	{r4, pc}

000b5cfa <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   b5cfa:	b513      	push	{r0, r1, r4, lr}
   b5cfc:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   b5cfe:	b159      	cbz	r1, b5d18 <_ZN6StringaSEPKc+0x1e>
   b5d00:	4608      	mov	r0, r1
   b5d02:	9101      	str	r1, [sp, #4]
   b5d04:	f001 fa73 	bl	b71ee <strlen>
   b5d08:	9901      	ldr	r1, [sp, #4]
   b5d0a:	4602      	mov	r2, r0
   b5d0c:	4620      	mov	r0, r4
   b5d0e:	f7ff ffc7 	bl	b5ca0 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   b5d12:	4620      	mov	r0, r4
   b5d14:	b002      	add	sp, #8
   b5d16:	bd10      	pop	{r4, pc}
	else invalidate();
   b5d18:	f7ff ff97 	bl	b5c4a <_ZN6String10invalidateEv>
   b5d1c:	e7f9      	b.n	b5d12 <_ZN6StringaSEPKc+0x18>

000b5d1e <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   b5d1e:	b510      	push	{r4, lr}
   b5d20:	4604      	mov	r4, r0
   b5d22:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   b5d24:	2300      	movs	r3, #0
	capacity = 0;
   b5d26:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5d2a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5d2c:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   b5d2e:	4608      	mov	r0, r1
	itoa(value, buf, base);
   b5d30:	a901      	add	r1, sp, #4
   b5d32:	f000 fa35 	bl	b61a0 <itoa>
	*this = buf;
   b5d36:	a901      	add	r1, sp, #4
   b5d38:	4620      	mov	r0, r4
   b5d3a:	f7ff ffde 	bl	b5cfa <_ZN6StringaSEPKc>
}
   b5d3e:	4620      	mov	r0, r4
   b5d40:	b00a      	add	sp, #40	; 0x28
   b5d42:	bd10      	pop	{r4, pc}

000b5d44 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   b5d44:	b530      	push	{r4, r5, lr}
   b5d46:	4604      	mov	r4, r0
	buffer = NULL;
   b5d48:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   b5d4a:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   b5d4c:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   b5d50:	60a3      	str	r3, [r4, #8]
	flags = 0;
   b5d52:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   b5d54:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   b5d58:	b2cd      	uxtb	r5, r1
   b5d5a:	f000 fd27 	bl	b67ac <__aeabi_f2d>
   b5d5e:	ec41 0b10 	vmov	d0, r0, r1
   b5d62:	a901      	add	r1, sp, #4
   b5d64:	4628      	mov	r0, r5
   b5d66:	f7ff ff09 	bl	b5b7c <_Z4dtoadhPc>
        *this = buf;
   b5d6a:	a901      	add	r1, sp, #4
   b5d6c:	4620      	mov	r0, r4
   b5d6e:	f7ff ffc4 	bl	b5cfa <_ZN6StringaSEPKc>
}
   b5d72:	4620      	mov	r0, r4
   b5d74:	b00b      	add	sp, #44	; 0x2c
   b5d76:	bd30      	pop	{r4, r5, pc}

000b5d78 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   b5d78:	b570      	push	{r4, r5, r6, lr}
   b5d7a:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   b5d7c:	460e      	mov	r6, r1
   b5d7e:	b909      	cbnz	r1, b5d84 <_ZN6String6concatEPKcj+0xc>
   b5d80:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   b5d82:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   b5d84:	b16a      	cbz	r2, b5da2 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   b5d86:	6884      	ldr	r4, [r0, #8]
   b5d88:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   b5d8a:	4621      	mov	r1, r4
   b5d8c:	f7ff ff74 	bl	b5c78 <_ZN6String7reserveEj>
   b5d90:	2800      	cmp	r0, #0
   b5d92:	d0f5      	beq.n	b5d80 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   b5d94:	6828      	ldr	r0, [r5, #0]
   b5d96:	68ab      	ldr	r3, [r5, #8]
   b5d98:	4631      	mov	r1, r6
   b5d9a:	4418      	add	r0, r3
   b5d9c:	f001 fa02 	bl	b71a4 <strcpy>
	len = newlen;
   b5da0:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   b5da2:	2001      	movs	r0, #1
   b5da4:	e7ed      	b.n	b5d82 <_ZN6String6concatEPKcj+0xa>

000b5da6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   b5da6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5da8:	688a      	ldr	r2, [r1, #8]
   b5daa:	6809      	ldr	r1, [r1, #0]
{
   b5dac:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   b5dae:	f7ff ffe3 	bl	b5d78 <_ZN6String6concatEPKcj>
   b5db2:	b910      	cbnz	r0, b5dba <_ZplRK15StringSumHelperRK6String+0x14>
   b5db4:	4620      	mov	r0, r4
   b5db6:	f7ff ff48 	bl	b5c4a <_ZN6String10invalidateEv>
	return a;
}
   b5dba:	4620      	mov	r0, r4
   b5dbc:	bd10      	pop	{r4, pc}

000b5dbe <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   b5dbe:	b510      	push	{r4, lr}
   b5dc0:	4604      	mov	r4, r0
        if (wakeupSource_) {
   b5dc2:	6800      	ldr	r0, [r0, #0]
   b5dc4:	b118      	cbz	r0, b5dce <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv+0x10>
            free(wakeupSource_);
   b5dc6:	f7ff f967 	bl	b5098 <free>
            wakeupSource_ = nullptr;
   b5dca:	2300      	movs	r3, #0
   b5dcc:	6023      	str	r3, [r4, #0]
        }
    }
   b5dce:	bd10      	pop	{r4, pc}

000b5dd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   b5dd0:	b538      	push	{r3, r4, r5, lr}
   b5dd2:	460c      	mov	r4, r1
   b5dd4:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5dd6:	f7ff fff2 	bl	b5dbe <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (source) {
   b5dda:	b154      	cbz	r4, b5df2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   b5ddc:	8820      	ldrh	r0, [r4, #0]
   b5dde:	f7ff f953 	bl	b5088 <malloc>
   b5de2:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   b5de4:	b128      	cbz	r0, b5df2 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0+0x22>
                memcpy(wakeupSource_, source, source->size);
   b5de6:	8822      	ldrh	r2, [r4, #0]
   b5de8:	4621      	mov	r1, r4
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
    }
   b5dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
                memcpy(wakeupSource_, source, source->size);
   b5dee:	f001 b995 	b.w	b711c <memcpy>
    }
   b5df2:	bd38      	pop	{r3, r4, r5, pc}

000b5df4 <_ZN17SystemSleepResultaSEOS_.isra.0>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5df4:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   b5df6:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   b5dfa:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   b5dfc:	f8d1 3006 	ldr.w	r3, [r1, #6]
   b5e00:	f8c0 3006 	str.w	r3, [r0, #6]
   b5e04:	894b      	ldrh	r3, [r1, #10]
   b5e06:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   b5e08:	460c      	mov	r4, r1
   b5e0a:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   b5e0c:	f7ff ffd7 	bl	b5dbe <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
        if (result.wakeupSource_) {
   b5e10:	6823      	ldr	r3, [r4, #0]
   b5e12:	b113      	cbz	r3, b5e1a <_ZN17SystemSleepResultaSEOS_.isra.0+0x26>
            wakeupSource_ = result.wakeupSource_;
   b5e14:	602b      	str	r3, [r5, #0]
            result.wakeupSource_ = nullptr;
   b5e16:	2300      	movs	r3, #0
   b5e18:	6023      	str	r3, [r4, #0]
    }
   b5e1a:	bd38      	pop	{r3, r4, r5, pc}

000b5e1c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   b5e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   b5e1e:	4d2b      	ldr	r5, [pc, #172]	; (b5ecc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   b5e20:	7d0b      	ldrb	r3, [r1, #20]
   b5e22:	4604      	mov	r4, r0
   b5e24:	b08b      	sub	sp, #44	; 0x2c
   b5e26:	4608      	mov	r0, r1
   b5e28:	1daf      	adds	r7, r5, #6
   b5e2a:	2b00      	cmp	r3, #0
   b5e2c:	d036      	beq.n	b5e9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
        return static_cast<SystemSleepMode>(config_->mode);
   b5e2e:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   b5e30:	791b      	ldrb	r3, [r3, #4]
   b5e32:	2b00      	cmp	r3, #0
   b5e34:	d032      	beq.n	b5e9c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x80>
    SleepResult() {}
   b5e36:	4b26      	ldr	r3, [pc, #152]	; (b5ed0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
   b5e38:	9304      	str	r3, [sp, #16]
              error_(SYSTEM_ERROR_NONE) {
   b5e3a:	2200      	movs	r2, #0
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   b5e3c:	a902      	add	r1, sp, #8
   b5e3e:	3004      	adds	r0, #4
   b5e40:	e9cd 2202 	strd	r2, r2, [sp, #8]
   b5e44:	f7ff f886 	bl	b4f54 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   b5e48:	f8dd 300e 	ldr.w	r3, [sp, #14]
   b5e4c:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   b5e50:	b200      	sxth	r0, r0
   b5e52:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   b5e56:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   b5e5a:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   b5e5c:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   b5e5e:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5e60:	4628      	mov	r0, r5
   b5e62:	f7ff ffb5 	bl	b5dd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        freeWakeupSourceMemory();
   b5e66:	a802      	add	r0, sp, #8
   b5e68:	f7ff ffa9 	bl	b5dbe <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv>
              error_(SYSTEM_ERROR_NONE) {
   b5e6c:	2300      	movs	r3, #0
   b5e6e:	6023      	str	r3, [r4, #0]
   b5e70:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   b5e72:	71a3      	strb	r3, [r4, #6]
   b5e74:	8123      	strh	r3, [r4, #8]
   b5e76:	f64f 73ff 	movw	r3, #65535	; 0xffff
   b5e7a:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   b5e7c:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   b5e80:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   b5e82:	f8d5 3006 	ldr.w	r3, [r5, #6]
   b5e86:	f8c4 3006 	str.w	r3, [r4, #6]
   b5e8a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   b5e8c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   b5e8e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   b5e90:	4620      	mov	r0, r4
   b5e92:	f7ff ff9d 	bl	b5dd0 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t.isra.0>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   b5e96:	4620      	mov	r0, r4
   b5e98:	b00b      	add	sp, #44	; 0x2c
   b5e9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   b5e9c:	2600      	movs	r6, #0
   b5e9e:	2320      	movs	r3, #32
   b5ea0:	e9cd 3602 	strd	r3, r6, [sp, #8]
   b5ea4:	4b0b      	ldr	r3, [pc, #44]	; (b5ed4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
   b5ea6:	9300      	str	r3, [sp, #0]
   b5ea8:	aa02      	add	r2, sp, #8
   b5eaa:	4633      	mov	r3, r6
   b5eac:	490a      	ldr	r1, [pc, #40]	; (b5ed8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   b5eae:	2032      	movs	r0, #50	; 0x32
   b5eb0:	f7ff f80c 	bl	b4ecc <log_message>
            : wakeupSource_(nullptr),
   b5eb4:	4b06      	ldr	r3, [pc, #24]	; (b5ed0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb4>)
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   b5eb6:	4805      	ldr	r0, [pc, #20]	; (b5ecc <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb0>)
              error_(SYSTEM_ERROR_NONE) {
   b5eb8:	9602      	str	r6, [sp, #8]
            : wakeupSource_(nullptr),
   b5eba:	f64f 62f2 	movw	r2, #65266	; 0xfef2
   b5ebe:	a902      	add	r1, sp, #8
   b5ec0:	e9cd 2303 	strd	r2, r3, [sp, #12]
   b5ec4:	f7ff ff96 	bl	b5df4 <_ZN17SystemSleepResultaSEOS_.isra.0>
   b5ec8:	e7cd      	b.n	b5e66 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x4a>
   b5eca:	bf00      	nop
   b5ecc:	2003e6e0 	.word	0x2003e6e0
   b5ed0:	ffff0000 	.word	0xffff0000
   b5ed4:	000b73db 	.word	0x000b73db
   b5ed8:	000b73d4 	.word	0x000b73d4

000b5edc <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   b5edc:	4b05      	ldr	r3, [pc, #20]	; (b5ef4 <_GLOBAL__sub_I_System+0x18>)
   b5ede:	2202      	movs	r2, #2
   b5ee0:	601a      	str	r2, [r3, #0]
              error_(SYSTEM_ERROR_NONE) {
   b5ee2:	4b05      	ldr	r3, [pc, #20]	; (b5ef8 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   b5ee4:	4a05      	ldr	r2, [pc, #20]	; (b5efc <_GLOBAL__sub_I_System+0x20>)
   b5ee6:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   b5ee8:	2000      	movs	r0, #0
   b5eea:	e9c3 0000 	strd	r0, r0, [r3]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   b5eee:	f7fe bff5 	b.w	b4edc <set_system_mode>
   b5ef2:	bf00      	nop
   b5ef4:	2003e6ec 	.word	0x2003e6ec
   b5ef8:	2003e6e0 	.word	0x2003e6e0
   b5efc:	ffff0000 	.word	0xffff0000

000b5f00 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   b5f00:	4b02      	ldr	r3, [pc, #8]	; (b5f0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   b5f02:	681a      	ldr	r2, [r3, #0]
   b5f04:	4b02      	ldr	r3, [pc, #8]	; (b5f10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   b5f06:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   b5f08:	4770      	bx	lr
   b5f0a:	bf00      	nop
   b5f0c:	2003e608 	.word	0x2003e608
   b5f10:	2003e6f0 	.word	0x2003e6f0

000b5f14 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config);
  virtual ~USARTSerial() {};
   b5f14:	4770      	bx	lr

000b5f16 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5f16:	7441      	strb	r1, [r0, #17]
}
   b5f18:	4770      	bx	lr

000b5f1a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   b5f1a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   b5f1c:	7c00      	ldrb	r0, [r0, #16]
   b5f1e:	f7fe ff95 	bl	b4e4c <hal_usart_available_data_for_write>
}
   b5f22:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f26:	bd08      	pop	{r3, pc}

000b5f28 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   b5f28:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   b5f2a:	7c00      	ldrb	r0, [r0, #16]
   b5f2c:	f7fe ff66 	bl	b4dfc <hal_usart_available>
}
   b5f30:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5f34:	bd08      	pop	{r3, pc}

000b5f36 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   b5f36:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   b5f38:	7c00      	ldrb	r0, [r0, #16]
   b5f3a:	f7fe ff6f 	bl	b4e1c <hal_usart_peek>
}
   b5f3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f42:	bd08      	pop	{r3, pc}

000b5f44 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   b5f44:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   b5f46:	7c00      	ldrb	r0, [r0, #16]
   b5f48:	f7fe ff60 	bl	b4e0c <hal_usart_read>
}
   b5f4c:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5f50:	bd08      	pop	{r3, pc}

000b5f52 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   b5f52:	7c00      	ldrb	r0, [r0, #16]
   b5f54:	f7fe bf6a 	b.w	b4e2c <hal_usart_flush>

000b5f58 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   b5f58:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f5a:	7c45      	ldrb	r5, [r0, #17]
{
   b5f5c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f5e:	b12d      	cbz	r5, b5f6c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   b5f60:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   b5f62:	b003      	add	sp, #12
   b5f64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   b5f68:	f7fe bf40 	b.w	b4dec <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   b5f6c:	7c00      	ldrb	r0, [r0, #16]
   b5f6e:	9101      	str	r1, [sp, #4]
   b5f70:	f7fe ff6c 	bl	b4e4c <hal_usart_available_data_for_write>
   b5f74:	2800      	cmp	r0, #0
   b5f76:	9901      	ldr	r1, [sp, #4]
   b5f78:	dcf2      	bgt.n	b5f60 <_ZN11USARTSerial5writeEh+0x8>
}
   b5f7a:	4628      	mov	r0, r5
   b5f7c:	b003      	add	sp, #12
   b5f7e:	bd30      	pop	{r4, r5, pc}

000b5f80 <_ZN11USARTSerialD0Ev>:
   b5f80:	b510      	push	{r4, lr}
   b5f82:	2114      	movs	r1, #20
   b5f84:	4604      	mov	r4, r0
   b5f86:	f7fe f888 	bl	b409a <_ZdlPvj>
   b5f8a:	4620      	mov	r0, r4
   b5f8c:	bd10      	pop	{r4, pc}
	...

000b5f90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, const hal_usart_buffer_config_t& config)
   b5f90:	b510      	push	{r4, lr}
   b5f92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b5f96:	4604      	mov	r4, r0
   b5f98:	4608      	mov	r0, r1
   b5f9a:	4611      	mov	r1, r2
   b5f9c:	2200      	movs	r2, #0
   b5f9e:	e9c4 2301 	strd	r2, r3, [r4, #4]
   b5fa2:	4b04      	ldr	r3, [pc, #16]	; (b5fb4 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t+0x24>)
   b5fa4:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b5fa6:	2301      	movs	r3, #1
  _serial = serial;
   b5fa8:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b5faa:	7463      	strb	r3, [r4, #17]
  hal_usart_init_ex(serial, &config, nullptr);
   b5fac:	f7fe ff56 	bl	b4e5c <hal_usart_init_ex>
}
   b5fb0:	4620      	mov	r0, r4
   b5fb2:	bd10      	pop	{r4, pc}
   b5fb4:	000b7428 	.word	0x000b7428

000b5fb8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   b5fb8:	7441      	strb	r1, [r0, #17]
}
   b5fba:	4770      	bx	lr

000b5fbc <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b5fbc:	4770      	bx	lr

000b5fbe <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   b5fbe:	4770      	bx	lr

000b5fc0 <_ZN9USBSerial4readEv>:
{
   b5fc0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   b5fc2:	2100      	movs	r1, #0
   b5fc4:	7c00      	ldrb	r0, [r0, #16]
   b5fc6:	f7fe ff69 	bl	b4e9c <HAL_USB_USART_Receive_Data>
}
   b5fca:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5fce:	bd08      	pop	{r3, pc}

000b5fd0 <_ZN9USBSerial4peekEv>:
{
   b5fd0:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   b5fd2:	2101      	movs	r1, #1
   b5fd4:	7c00      	ldrb	r0, [r0, #16]
   b5fd6:	f7fe ff61 	bl	b4e9c <HAL_USB_USART_Receive_Data>
}
   b5fda:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   b5fde:	bd08      	pop	{r3, pc}

000b5fe0 <_ZN9USBSerial17availableForWriteEv>:
{
   b5fe0:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   b5fe2:	7c00      	ldrb	r0, [r0, #16]
   b5fe4:	f7fe ff52 	bl	b4e8c <HAL_USB_USART_Available_Data_For_Write>
}
   b5fe8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5fec:	bd08      	pop	{r3, pc}

000b5fee <_ZN9USBSerial9availableEv>:
{
   b5fee:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   b5ff0:	7c00      	ldrb	r0, [r0, #16]
   b5ff2:	f7fe ff43 	bl	b4e7c <HAL_USB_USART_Available_Data>
}
   b5ff6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   b5ffa:	bd08      	pop	{r3, pc}

000b5ffc <_ZN9USBSerial5writeEh>:
{
   b5ffc:	b513      	push	{r0, r1, r4, lr}
   b5ffe:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6000:	7c00      	ldrb	r0, [r0, #16]
{
   b6002:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   b6004:	f7fe ff42 	bl	b4e8c <HAL_USB_USART_Available_Data_For_Write>
   b6008:	2800      	cmp	r0, #0
   b600a:	9901      	ldr	r1, [sp, #4]
   b600c:	dc01      	bgt.n	b6012 <_ZN9USBSerial5writeEh+0x16>
   b600e:	7c60      	ldrb	r0, [r4, #17]
   b6010:	b120      	cbz	r0, b601c <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   b6012:	7c20      	ldrb	r0, [r4, #16]
   b6014:	f7fe ff4a 	bl	b4eac <HAL_USB_USART_Send_Data>
   b6018:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   b601c:	b002      	add	sp, #8
   b601e:	bd10      	pop	{r4, pc}

000b6020 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   b6020:	7c00      	ldrb	r0, [r0, #16]
   b6022:	f7fe bf4b 	b.w	b4ebc <HAL_USB_USART_Flush_Data>

000b6026 <_ZN9USBSerialD0Ev>:
   b6026:	b510      	push	{r4, lr}
   b6028:	2114      	movs	r1, #20
   b602a:	4604      	mov	r4, r0
   b602c:	f7fe f835 	bl	b409a <_ZdlPvj>
   b6030:	4620      	mov	r0, r4
   b6032:	bd10      	pop	{r4, pc}

000b6034 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   b6034:	b510      	push	{r4, lr}
   b6036:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   b603a:	4604      	mov	r4, r0
   b603c:	4608      	mov	r0, r1
   b603e:	2100      	movs	r1, #0
   b6040:	e9c4 1301 	strd	r1, r3, [r4, #4]
   b6044:	4b04      	ldr	r3, [pc, #16]	; (b6058 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   b6046:	6023      	str	r3, [r4, #0]
  _blocking = true;
   b6048:	2301      	movs	r3, #1
  _serial = serial;
   b604a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   b604c:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   b604e:	4611      	mov	r1, r2
   b6050:	f7fe ff0c 	bl	b4e6c <HAL_USB_USART_Init>
}
   b6054:	4620      	mov	r0, r4
   b6056:	bd10      	pop	{r4, pc}
   b6058:	000b7458 	.word	0x000b7458

000b605c <_Z19acquireSerialBufferv>:
{
   b605c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {};
   b605e:	2214      	movs	r2, #20
{
   b6060:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {};
   b6062:	2100      	movs	r1, #0
   b6064:	f001 f868 	bl	b7138 <memset>
}
   b6068:	4620      	mov	r0, r4
   b606a:	bd10      	pop	{r4, pc}

000b606c <_Z16_fetch_usbserialv>:
{
   b606c:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b606e:	4c0f      	ldr	r4, [pc, #60]	; (b60ac <_Z16_fetch_usbserialv+0x40>)
{
   b6070:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   b6072:	a803      	add	r0, sp, #12
   b6074:	f7ff fff2 	bl	b605c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   b6078:	7821      	ldrb	r1, [r4, #0]
   b607a:	f3bf 8f5b 	dmb	ish
   b607e:	f011 0101 	ands.w	r1, r1, #1
   b6082:	d10f      	bne.n	b60a4 <_Z16_fetch_usbserialv+0x38>
   b6084:	4620      	mov	r0, r4
   b6086:	9101      	str	r1, [sp, #4]
   b6088:	f7fe f809 	bl	b409e <__cxa_guard_acquire>
   b608c:	9901      	ldr	r1, [sp, #4]
   b608e:	b148      	cbz	r0, b60a4 <_Z16_fetch_usbserialv+0x38>
   b6090:	aa03      	add	r2, sp, #12
   b6092:	4807      	ldr	r0, [pc, #28]	; (b60b0 <_Z16_fetch_usbserialv+0x44>)
   b6094:	f7ff ffce 	bl	b6034 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   b6098:	4620      	mov	r0, r4
   b609a:	f7fe f805 	bl	b40a8 <__cxa_guard_release>
   b609e:	4805      	ldr	r0, [pc, #20]	; (b60b4 <_Z16_fetch_usbserialv+0x48>)
   b60a0:	f001 f836 	bl	b7110 <atexit>
	return _usbserial;
}
   b60a4:	4802      	ldr	r0, [pc, #8]	; (b60b0 <_Z16_fetch_usbserialv+0x44>)
   b60a6:	b008      	add	sp, #32
   b60a8:	bd10      	pop	{r4, pc}
   b60aa:	bf00      	nop
   b60ac:	2003e6f4 	.word	0x2003e6f4
   b60b0:	2003e6f8 	.word	0x2003e6f8
   b60b4:	000b5fbd 	.word	0x000b5fbd

000b60b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   b60b8:	2200      	movs	r2, #0
   b60ba:	6840      	ldr	r0, [r0, #4]
   b60bc:	4611      	mov	r1, r2
   b60be:	f7fe bf9b 	b.w	b4ff8 <network_ready>

000b60c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   b60c2:	2200      	movs	r2, #0
   b60c4:	6840      	ldr	r0, [r0, #4]
   b60c6:	4611      	mov	r1, r2
   b60c8:	f7fe bfb6 	b.w	b5038 <network_listening>

000b60cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   b60cc:	2200      	movs	r2, #0
   b60ce:	6840      	ldr	r0, [r0, #4]
   b60d0:	4611      	mov	r1, r2
   b60d2:	f7fe bfc1 	b.w	b5058 <network_get_listen_timeout>

000b60d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   b60d6:	6840      	ldr	r0, [r0, #4]
   b60d8:	2200      	movs	r2, #0
   b60da:	f7fe bfb5 	b.w	b5048 <network_set_listen_timeout>

000b60de <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   b60de:	6840      	ldr	r0, [r0, #4]
   b60e0:	2200      	movs	r2, #0
   b60e2:	f081 0101 	eor.w	r1, r1, #1
   b60e6:	f7fe bf9f 	b.w	b5028 <network_listen>

000b60ea <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   b60ea:	2300      	movs	r3, #0
   b60ec:	6840      	ldr	r0, [r0, #4]
   b60ee:	461a      	mov	r2, r3
   b60f0:	4619      	mov	r1, r3
   b60f2:	f7fe bf91 	b.w	b5018 <network_off>

000b60f6 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   b60f6:	2300      	movs	r3, #0
   b60f8:	6840      	ldr	r0, [r0, #4]
   b60fa:	461a      	mov	r2, r3
   b60fc:	4619      	mov	r1, r3
   b60fe:	f7fe bf83 	b.w	b5008 <network_on>

000b6102 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   b6102:	2200      	movs	r2, #0
   b6104:	6840      	ldr	r0, [r0, #4]
   b6106:	4611      	mov	r1, r2
   b6108:	f7fe bf66 	b.w	b4fd8 <network_connecting>

000b610c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   b610c:	6840      	ldr	r0, [r0, #4]
   b610e:	2200      	movs	r2, #0
   b6110:	2102      	movs	r1, #2
   b6112:	f7fe bf69 	b.w	b4fe8 <network_disconnect>

000b6116 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   b6116:	2300      	movs	r3, #0
   b6118:	6840      	ldr	r0, [r0, #4]
   b611a:	461a      	mov	r2, r3
   b611c:	f7fe bf54 	b.w	b4fc8 <network_connect>

000b6120 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   b6120:	4b02      	ldr	r3, [pc, #8]	; (b612c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   b6122:	2204      	movs	r2, #4
   b6124:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   b6126:	4a02      	ldr	r2, [pc, #8]	; (b6130 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   b6128:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   b612a:	4770      	bx	lr
   b612c:	2003e70c 	.word	0x2003e70c
   b6130:	000b7488 	.word	0x000b7488

000b6134 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   b6134:	b510      	push	{r4, lr}
   b6136:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   b6138:	f001 f859 	bl	b71ee <strlen>
   b613c:	3801      	subs	r0, #1
   b613e:	1823      	adds	r3, r4, r0
   b6140:	4620      	mov	r0, r4
	while(i<j){
   b6142:	4283      	cmp	r3, r0
   b6144:	d906      	bls.n	b6154 <_Z11str_reversePc+0x20>
		c = *i;
   b6146:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   b6148:	7819      	ldrb	r1, [r3, #0]
   b614a:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   b614e:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   b6152:	e7f6      	b.n	b6142 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   b6154:	bd10      	pop	{r4, pc}

000b6156 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   b6156:	b570      	push	{r4, r5, r6, lr}
   b6158:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   b615a:	1e91      	subs	r1, r2, #2
   b615c:	2922      	cmp	r1, #34	; 0x22
   b615e:	d81d      	bhi.n	b619c <ultoa+0x46>
		return NULL;
	}
	char* ptr=buffer;
   b6160:	4625      	mov	r5, r4

	div_t result;
	while(a){
   b6162:	b930      	cbnz	r0, b6172 <ultoa+0x1c>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
   b6164:	4423      	add	r3, r4
            *ptr++ = '0';
   b6166:	2230      	movs	r2, #48	; 0x30
        while (ptr < buffer+pad)
   b6168:	429d      	cmp	r5, r3
   b616a:	d210      	bcs.n	b618e <ultoa+0x38>
            *ptr++ = '0';
   b616c:	f805 2b01 	strb.w	r2, [r5], #1
        while (ptr < buffer+pad)
   b6170:	e7fa      	b.n	b6168 <ultoa+0x12>
            result.quot = a/radix;
   b6172:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
   b6176:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
   b617a:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
   b617c:	2809      	cmp	r0, #9
                *ptr += '0';
   b617e:	bf94      	ite	ls
   b6180:	3130      	addls	r1, #48	; 0x30
                *ptr += 'a'-10;
   b6182:	3157      	addhi	r1, #87	; 0x57
   b6184:	b2c9      	uxtb	r1, r1
   b6186:	f805 1b01 	strb.w	r1, [r5], #1
            a = result.quot;
   b618a:	4630      	mov	r0, r6
	while(a){
   b618c:	e7e9      	b.n	b6162 <ultoa+0xc>

	*ptr = '\0';
   b618e:	2300      	movs	r3, #0
	str_reverse(buffer);
   b6190:	4620      	mov	r0, r4
	*ptr = '\0';
   b6192:	702b      	strb	r3, [r5, #0]
	str_reverse(buffer);
   b6194:	f7ff ffce 	bl	b6134 <_Z11str_reversePc>
	return buffer;
   b6198:	4620      	mov	r0, r4
}
   b619a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   b619c:	2000      	movs	r0, #0
   b619e:	e7fc      	b.n	b619a <ultoa+0x44>

000b61a0 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b61a0:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   b61a2:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   b61a4:	460c      	mov	r4, r1
   b61a6:	4615      	mov	r5, r2
	if(a<0){
   b61a8:	da0e      	bge.n	b61c8 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b61aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   b61ae:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   b61b2:	bf14      	ite	ne
   b61b4:	4258      	negne	r0, r3
   b61b6:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   b61b8:	2301      	movs	r3, #1
		*buffer = '-';
   b61ba:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   b61bc:	462a      	mov	r2, r5
   b61be:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   b61c0:	f7ff ffc9 	bl	b6156 <ultoa>
	}
	return buffer;
}
   b61c4:	4620      	mov	r0, r4
   b61c6:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   b61c8:	2301      	movs	r3, #1
   b61ca:	e7f9      	b.n	b61c0 <itoa+0x20>

000b61cc <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   b61cc:	4b01      	ldr	r3, [pc, #4]	; (b61d4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   b61ce:	6018      	str	r0, [r3, #0]
    }, nullptr);
   b61d0:	4770      	bx	lr
   b61d2:	bf00      	nop
   b61d4:	2003e60c 	.word	0x2003e60c

000b61d8 <serialEventRun>:
{
   b61d8:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   b61da:	4b0b      	ldr	r3, [pc, #44]	; (b6208 <serialEventRun+0x30>)
   b61dc:	b143      	cbz	r3, b61f0 <serialEventRun+0x18>
   b61de:	f7ff ff45 	bl	b606c <_Z16_fetch_usbserialv>
   b61e2:	6803      	ldr	r3, [r0, #0]
   b61e4:	691b      	ldr	r3, [r3, #16]
   b61e6:	4798      	blx	r3
   b61e8:	2800      	cmp	r0, #0
   b61ea:	dd01      	ble.n	b61f0 <serialEventRun+0x18>
        serialEvent();
   b61ec:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   b61f0:	4b06      	ldr	r3, [pc, #24]	; (b620c <serialEventRun+0x34>)
   b61f2:	b143      	cbz	r3, b6206 <serialEventRun+0x2e>
   b61f4:	f000 f94a 	bl	b648c <_Z22__fetch_global_Serial1v>
   b61f8:	6803      	ldr	r3, [r0, #0]
   b61fa:	691b      	ldr	r3, [r3, #16]
   b61fc:	4798      	blx	r3
   b61fe:	2800      	cmp	r0, #0
   b6200:	dd01      	ble.n	b6206 <serialEventRun+0x2e>
        serialEvent1();
   b6202:	f3af 8000 	nop.w
}
   b6206:	bd08      	pop	{r3, pc}
	...

000b6210 <_post_loop>:
{
   b6210:	b508      	push	{r3, lr}
	serialEventRun();
   b6212:	f7ff ffe1 	bl	b61d8 <serialEventRun>
		return !thread || !thread->isRunning();
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   b6216:	f7fe fd41 	bl	b4c9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   b621a:	4b01      	ldr	r3, [pc, #4]	; (b6220 <_post_loop+0x10>)
   b621c:	6018      	str	r0, [r3, #0]
}
   b621e:	bd08      	pop	{r3, pc}
   b6220:	2003e728 	.word	0x2003e728

000b6224 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b6224:	4805      	ldr	r0, [pc, #20]	; (b623c <_Z33system_initialize_user_backup_ramv+0x18>)
   b6226:	4a06      	ldr	r2, [pc, #24]	; (b6240 <_Z33system_initialize_user_backup_ramv+0x1c>)
   b6228:	4906      	ldr	r1, [pc, #24]	; (b6244 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   b622a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   b622c:	1a12      	subs	r2, r2, r0
   b622e:	f000 ff75 	bl	b711c <memcpy>
    __backup_sram_signature = signature;
   b6232:	4b05      	ldr	r3, [pc, #20]	; (b6248 <_Z33system_initialize_user_backup_ramv+0x24>)
   b6234:	4a05      	ldr	r2, [pc, #20]	; (b624c <_Z33system_initialize_user_backup_ramv+0x28>)
   b6236:	601a      	str	r2, [r3, #0]
}
   b6238:	bd08      	pop	{r3, pc}
   b623a:	bf00      	nop
   b623c:	2003f400 	.word	0x2003f400
   b6240:	2003f404 	.word	0x2003f404
   b6244:	000b758c 	.word	0x000b758c
   b6248:	2003f400 	.word	0x2003f400
   b624c:	9a271c1e 	.word	0x9a271c1e

000b6250 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   b6250:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b6252:	2300      	movs	r3, #0
   b6254:	9300      	str	r3, [sp, #0]
   b6256:	461a      	mov	r2, r3
   b6258:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b625c:	f7fe fe70 	bl	b4f40 <system_ctrl_set_result>
}
   b6260:	b003      	add	sp, #12
   b6262:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000b6268 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   b6268:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   b626a:	8843      	ldrh	r3, [r0, #2]
   b626c:	2b0a      	cmp	r3, #10
   b626e:	d008      	beq.n	b6282 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   b6270:	2b50      	cmp	r3, #80	; 0x50
   b6272:	d10b      	bne.n	b628c <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   b6274:	4b09      	ldr	r3, [pc, #36]	; (b629c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   b6276:	681b      	ldr	r3, [r3, #0]
   b6278:	b14b      	cbz	r3, b628e <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   b627a:	b003      	add	sp, #12
   b627c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   b6280:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   b6282:	f7ff ffe5 	bl	b6250 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   b6286:	b003      	add	sp, #12
   b6288:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   b628c:	2300      	movs	r3, #0
   b628e:	9300      	str	r3, [sp, #0]
   b6290:	461a      	mov	r2, r3
   b6292:	f06f 0177 	mvn.w	r1, #119	; 0x77
   b6296:	f7fe fe53 	bl	b4f40 <system_ctrl_set_result>
}
   b629a:	e7f4      	b.n	b6286 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   b629c:	2003e718 	.word	0x2003e718

000b62a0 <module_user_init_hook>:
{
   b62a0:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   b62a2:	4812      	ldr	r0, [pc, #72]	; (b62ec <module_user_init_hook+0x4c>)
   b62a4:	2100      	movs	r1, #0
   b62a6:	f7fe ff1f 	bl	b50e8 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   b62aa:	4b11      	ldr	r3, [pc, #68]	; (b62f0 <module_user_init_hook+0x50>)
   b62ac:	681a      	ldr	r2, [r3, #0]
   b62ae:	4b11      	ldr	r3, [pc, #68]	; (b62f4 <module_user_init_hook+0x54>)
   b62b0:	429a      	cmp	r2, r3
   b62b2:	4b11      	ldr	r3, [pc, #68]	; (b62f8 <module_user_init_hook+0x58>)
   b62b4:	bf0c      	ite	eq
   b62b6:	2201      	moveq	r2, #1
   b62b8:	2200      	movne	r2, #0
   b62ba:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   b62bc:	d001      	beq.n	b62c2 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   b62be:	f7ff ffb1 	bl	b6224 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   b62c2:	f7fe fcdb 	bl	b4c7c <HAL_RNG_GetRandomNumber>
   b62c6:	4604      	mov	r4, r0
    srand(seed);
   b62c8:	f000 ff3e 	bl	b7148 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   b62cc:	4b0b      	ldr	r3, [pc, #44]	; (b62fc <module_user_init_hook+0x5c>)
   b62ce:	b113      	cbz	r3, b62d6 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   b62d0:	4620      	mov	r0, r4
   b62d2:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   b62d6:	2100      	movs	r1, #0
   b62d8:	4808      	ldr	r0, [pc, #32]	; (b62fc <module_user_init_hook+0x5c>)
   b62da:	f7fe fe65 	bl	b4fa8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   b62de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   b62e2:	4807      	ldr	r0, [pc, #28]	; (b6300 <module_user_init_hook+0x60>)
   b62e4:	2100      	movs	r1, #0
   b62e6:	f7fe be21 	b.w	b4f2c <system_ctrl_set_app_request_handler>
   b62ea:	bf00      	nop
   b62ec:	000b61cd 	.word	0x000b61cd
   b62f0:	2003f400 	.word	0x2003f400
   b62f4:	9a271c1e 	.word	0x9a271c1e
   b62f8:	2003e714 	.word	0x2003e714
   b62fc:	00000000 	.word	0x00000000
   b6300:	000b6269 	.word	0x000b6269

000b6304 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   b6304:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   b6306:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   b6308:	d902      	bls.n	b6310 <pinAvailable+0xc>
    return false;
   b630a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   b630c:	b002      	add	sp, #8
   b630e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   b6310:	f1a0 030b 	sub.w	r3, r0, #11
   b6314:	2b02      	cmp	r3, #2
   b6316:	d81a      	bhi.n	b634e <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   b6318:	4c17      	ldr	r4, [pc, #92]	; (b6378 <pinAvailable+0x74>)
   b631a:	7821      	ldrb	r1, [r4, #0]
   b631c:	f3bf 8f5b 	dmb	ish
   b6320:	f011 0101 	ands.w	r1, r1, #1
   b6324:	d10b      	bne.n	b633e <pinAvailable+0x3a>
   b6326:	4620      	mov	r0, r4
   b6328:	9101      	str	r1, [sp, #4]
   b632a:	f7fd feb8 	bl	b409e <__cxa_guard_acquire>
   b632e:	9901      	ldr	r1, [sp, #4]
   b6330:	b128      	cbz	r0, b633e <pinAvailable+0x3a>
   b6332:	4812      	ldr	r0, [pc, #72]	; (b637c <pinAvailable+0x78>)
   b6334:	f7ff fc18 	bl	b5b68 <_ZN8SPIClassC1E19hal_spi_interface_t>
   b6338:	4620      	mov	r0, r4
   b633a:	f7fd feb5 	bl	b40a8 <__cxa_guard_release>
   b633e:	4b0f      	ldr	r3, [pc, #60]	; (b637c <pinAvailable+0x78>)
   b6340:	7818      	ldrb	r0, [r3, #0]
   b6342:	f7fe fd4b 	bl	b4ddc <hal_spi_is_enabled>
   b6346:	2800      	cmp	r0, #0
   b6348:	d1df      	bne.n	b630a <pinAvailable+0x6>
  return true; // 'pin' is available
   b634a:	2001      	movs	r0, #1
   b634c:	e7de      	b.n	b630c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   b634e:	2801      	cmp	r0, #1
   b6350:	d809      	bhi.n	b6366 <pinAvailable+0x62>
   b6352:	f000 f85b 	bl	b640c <_Z19__fetch_global_Wirev>
   b6356:	2100      	movs	r1, #0
   b6358:	7c00      	ldrb	r0, [r0, #16]
   b635a:	f7fe fd07 	bl	b4d6c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   b635e:	f080 0001 	eor.w	r0, r0, #1
   b6362:	b2c0      	uxtb	r0, r0
   b6364:	e7d2      	b.n	b630c <pinAvailable+0x8>
   b6366:	3809      	subs	r0, #9
   b6368:	2801      	cmp	r0, #1
   b636a:	d8ee      	bhi.n	b634a <pinAvailable+0x46>
   b636c:	f000 f88e 	bl	b648c <_Z22__fetch_global_Serial1v>
   b6370:	7c00      	ldrb	r0, [r0, #16]
   b6372:	f7fe fd63 	bl	b4e3c <hal_usart_is_enabled>
   b6376:	e7f2      	b.n	b635e <pinAvailable+0x5a>
   b6378:	2003e71c 	.word	0x2003e71c
   b637c:	2003e720 	.word	0x2003e720

000b6380 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6380:	2823      	cmp	r0, #35	; 0x23
{
   b6382:	b538      	push	{r3, r4, r5, lr}
   b6384:	4604      	mov	r4, r0
   b6386:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   b6388:	d80a      	bhi.n	b63a0 <pinMode+0x20>
   b638a:	29ff      	cmp	r1, #255	; 0xff
   b638c:	d008      	beq.n	b63a0 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   b638e:	f7ff ffb9 	bl	b6304 <pinAvailable>
   b6392:	b128      	cbz	r0, b63a0 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   b6394:	4629      	mov	r1, r5
   b6396:	4620      	mov	r0, r4
}
   b6398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   b639c:	f7fe bc86 	b.w	b4cac <HAL_Pin_Mode>
}
   b63a0:	bd38      	pop	{r3, r4, r5, pc}

000b63a2 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   b63a2:	b538      	push	{r3, r4, r5, lr}
   b63a4:	4604      	mov	r4, r0
   b63a6:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   b63a8:	f7fe fc88 	bl	b4cbc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   b63ac:	28ff      	cmp	r0, #255	; 0xff
   b63ae:	d010      	beq.n	b63d2 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   b63b0:	2806      	cmp	r0, #6
   b63b2:	d804      	bhi.n	b63be <digitalWrite+0x1c>
   b63b4:	234d      	movs	r3, #77	; 0x4d
   b63b6:	fa23 f000 	lsr.w	r0, r3, r0
   b63ba:	07c3      	lsls	r3, r0, #31
   b63bc:	d409      	bmi.n	b63d2 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   b63be:	4620      	mov	r0, r4
   b63c0:	f7ff ffa0 	bl	b6304 <pinAvailable>
   b63c4:	b128      	cbz	r0, b63d2 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   b63c6:	4629      	mov	r1, r5
   b63c8:	4620      	mov	r0, r4
}
   b63ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   b63ce:	f7fe bc7d 	b.w	b4ccc <HAL_GPIO_Write>
}
   b63d2:	bd38      	pop	{r3, r4, r5, pc}

000b63d4 <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b63d4:	4770      	bx	lr
	...

000b63d8 <_Z17acquireWireBufferv>:
{
   b63d8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   b63da:	4b0a      	ldr	r3, [pc, #40]	; (b6404 <_Z17acquireWireBufferv+0x2c>)
   b63dc:	6003      	str	r3, [r0, #0]
   b63de:	2301      	movs	r3, #1
{
   b63e0:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   b63e2:	6143      	str	r3, [r0, #20]
		.rx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63e4:	4908      	ldr	r1, [pc, #32]	; (b6408 <_Z17acquireWireBufferv+0x30>)
   b63e6:	2020      	movs	r0, #32
   b63e8:	f000 f876 	bl	b64d8 <_ZnajRKSt9nothrow_t>
	};
   b63ec:	2520      	movs	r5, #32
   b63ee:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63f0:	4905      	ldr	r1, [pc, #20]	; (b6408 <_Z17acquireWireBufferv+0x30>)
	};
   b63f2:	60a5      	str	r5, [r4, #8]
		.tx_buffer = new (std::nothrow) uint8_t[i2c_buffer_size],
   b63f4:	4628      	mov	r0, r5
   b63f6:	f000 f86f 	bl	b64d8 <_ZnajRKSt9nothrow_t>
	};
   b63fa:	e9c4 0503 	strd	r0, r5, [r4, #12]
}
   b63fe:	4620      	mov	r0, r4
   b6400:	bd38      	pop	{r3, r4, r5, pc}
   b6402:	bf00      	nop
   b6404:	00010018 	.word	0x00010018
   b6408:	000b74bc 	.word	0x000b74bc

000b640c <_Z19__fetch_global_Wirev>:
{
   b640c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b640e:	4d0e      	ldr	r5, [pc, #56]	; (b6448 <_Z19__fetch_global_Wirev+0x3c>)
   b6410:	7829      	ldrb	r1, [r5, #0]
   b6412:	f3bf 8f5b 	dmb	ish
   b6416:	f011 0401 	ands.w	r4, r1, #1
{
   b641a:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   b641c:	d111      	bne.n	b6442 <_Z19__fetch_global_Wirev+0x36>
   b641e:	4628      	mov	r0, r5
   b6420:	f7fd fe3d 	bl	b409e <__cxa_guard_acquire>
   b6424:	b168      	cbz	r0, b6442 <_Z19__fetch_global_Wirev+0x36>
   b6426:	4668      	mov	r0, sp
   b6428:	f7ff ffd6 	bl	b63d8 <_Z17acquireWireBufferv>
   b642c:	466a      	mov	r2, sp
   b642e:	4621      	mov	r1, r4
   b6430:	4806      	ldr	r0, [pc, #24]	; (b644c <_Z19__fetch_global_Wirev+0x40>)
   b6432:	f7ff f9b7 	bl	b57a4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   b6436:	4628      	mov	r0, r5
   b6438:	f7fd fe36 	bl	b40a8 <__cxa_guard_release>
   b643c:	4804      	ldr	r0, [pc, #16]	; (b6450 <_Z19__fetch_global_Wirev+0x44>)
   b643e:	f000 fe67 	bl	b7110 <atexit>
	return wire;
}
   b6442:	4802      	ldr	r0, [pc, #8]	; (b644c <_Z19__fetch_global_Wirev+0x40>)
   b6444:	b007      	add	sp, #28
   b6446:	bd30      	pop	{r4, r5, pc}
   b6448:	2003e72c 	.word	0x2003e72c
   b644c:	2003e730 	.word	0x2003e730
   b6450:	000b63d5 	.word	0x000b63d5

000b6454 <__tcf_0>:
}
#endif

USARTSerial& __fetch_global_Serial1()
{
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b6454:	4770      	bx	lr
	...

000b6458 <_Z20acquireSerial1Bufferv>:
{
   b6458:	b538      	push	{r3, r4, r5, lr}
   b645a:	4604      	mov	r4, r0
    hal_usart_buffer_config_t config = {
   b645c:	2514      	movs	r5, #20
   b645e:	462a      	mov	r2, r5
   b6460:	2100      	movs	r1, #0
   b6462:	f000 fe69 	bl	b7138 <memset>
   b6466:	8025      	strh	r5, [r4, #0]
   b6468:	2540      	movs	r5, #64	; 0x40
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b646a:	4907      	ldr	r1, [pc, #28]	; (b6488 <_Z20acquireSerial1Bufferv+0x30>)
    hal_usart_buffer_config_t config = {
   b646c:	8125      	strh	r5, [r4, #8]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b646e:	4628      	mov	r0, r5
    hal_usart_buffer_config_t config = {
   b6470:	8225      	strh	r5, [r4, #16]
        .rx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6472:	f000 f831 	bl	b64d8 <_ZnajRKSt9nothrow_t>
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b6476:	4904      	ldr	r1, [pc, #16]	; (b6488 <_Z20acquireSerial1Bufferv+0x30>)
    };
   b6478:	6060      	str	r0, [r4, #4]
        .tx_buffer = new (std::nothrow) uint8_t[bufferSize],
   b647a:	4628      	mov	r0, r5
   b647c:	f000 f82c 	bl	b64d8 <_ZnajRKSt9nothrow_t>
    };
   b6480:	60e0      	str	r0, [r4, #12]
}
   b6482:	4620      	mov	r0, r4
   b6484:	bd38      	pop	{r3, r4, r5, pc}
   b6486:	bf00      	nop
   b6488:	000b74bc 	.word	0x000b74bc

000b648c <_Z22__fetch_global_Serial1v>:
{
   b648c:	b530      	push	{r4, r5, lr}
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b648e:	4d0e      	ldr	r5, [pc, #56]	; (b64c8 <_Z22__fetch_global_Serial1v+0x3c>)
   b6490:	7829      	ldrb	r1, [r5, #0]
   b6492:	f3bf 8f5b 	dmb	ish
   b6496:	f011 0401 	ands.w	r4, r1, #1
{
   b649a:	b087      	sub	sp, #28
    static USARTSerial serial1(HAL_USART_SERIAL1, acquireSerial1Buffer());
   b649c:	d111      	bne.n	b64c2 <_Z22__fetch_global_Serial1v+0x36>
   b649e:	4628      	mov	r0, r5
   b64a0:	f7fd fdfd 	bl	b409e <__cxa_guard_acquire>
   b64a4:	b168      	cbz	r0, b64c2 <_Z22__fetch_global_Serial1v+0x36>
   b64a6:	a801      	add	r0, sp, #4
   b64a8:	f7ff ffd6 	bl	b6458 <_Z20acquireSerial1Bufferv>
   b64ac:	aa01      	add	r2, sp, #4
   b64ae:	4621      	mov	r1, r4
   b64b0:	4806      	ldr	r0, [pc, #24]	; (b64cc <_Z22__fetch_global_Serial1v+0x40>)
   b64b2:	f7ff fd6d 	bl	b5f90 <_ZN11USARTSerialC1E21hal_usart_interface_tRK25hal_usart_buffer_config_t>
   b64b6:	4628      	mov	r0, r5
   b64b8:	f7fd fdf6 	bl	b40a8 <__cxa_guard_release>
   b64bc:	4804      	ldr	r0, [pc, #16]	; (b64d0 <_Z22__fetch_global_Serial1v+0x44>)
   b64be:	f000 fe27 	bl	b7110 <atexit>
    return serial1;
}
   b64c2:	4802      	ldr	r0, [pc, #8]	; (b64cc <_Z22__fetch_global_Serial1v+0x40>)
   b64c4:	b007      	add	sp, #28
   b64c6:	bd30      	pop	{r4, r5, pc}
   b64c8:	2003e744 	.word	0x2003e744
   b64cc:	2003e748 	.word	0x2003e748
   b64d0:	000b6455 	.word	0x000b6455

000b64d4 <_ZnwjRKSt9nothrow_t>:
   b64d4:	f7fd bddd 	b.w	b4092 <_Znwj>

000b64d8 <_ZnajRKSt9nothrow_t>:
   b64d8:	f7fd bddd 	b.w	b4096 <_Znaj>

000b64dc <_ZSt25__throw_bad_function_callv>:
   b64dc:	b508      	push	{r3, lr}
   b64de:	f7fe fdeb 	bl	b50b8 <abort>
	...

000b64e4 <__aeabi_drsub>:
   b64e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   b64e8:	e002      	b.n	b64f0 <__adddf3>
   b64ea:	bf00      	nop

000b64ec <__aeabi_dsub>:
   b64ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000b64f0 <__adddf3>:
   b64f0:	b530      	push	{r4, r5, lr}
   b64f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   b64f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   b64fa:	ea94 0f05 	teq	r4, r5
   b64fe:	bf08      	it	eq
   b6500:	ea90 0f02 	teqeq	r0, r2
   b6504:	bf1f      	itttt	ne
   b6506:	ea54 0c00 	orrsne.w	ip, r4, r0
   b650a:	ea55 0c02 	orrsne.w	ip, r5, r2
   b650e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   b6512:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b6516:	f000 80e2 	beq.w	b66de <__adddf3+0x1ee>
   b651a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   b651e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   b6522:	bfb8      	it	lt
   b6524:	426d      	neglt	r5, r5
   b6526:	dd0c      	ble.n	b6542 <__adddf3+0x52>
   b6528:	442c      	add	r4, r5
   b652a:	ea80 0202 	eor.w	r2, r0, r2
   b652e:	ea81 0303 	eor.w	r3, r1, r3
   b6532:	ea82 0000 	eor.w	r0, r2, r0
   b6536:	ea83 0101 	eor.w	r1, r3, r1
   b653a:	ea80 0202 	eor.w	r2, r0, r2
   b653e:	ea81 0303 	eor.w	r3, r1, r3
   b6542:	2d36      	cmp	r5, #54	; 0x36
   b6544:	bf88      	it	hi
   b6546:	bd30      	pophi	{r4, r5, pc}
   b6548:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   b654c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6550:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   b6554:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   b6558:	d002      	beq.n	b6560 <__adddf3+0x70>
   b655a:	4240      	negs	r0, r0
   b655c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6560:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   b6564:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6568:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   b656c:	d002      	beq.n	b6574 <__adddf3+0x84>
   b656e:	4252      	negs	r2, r2
   b6570:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   b6574:	ea94 0f05 	teq	r4, r5
   b6578:	f000 80a7 	beq.w	b66ca <__adddf3+0x1da>
   b657c:	f1a4 0401 	sub.w	r4, r4, #1
   b6580:	f1d5 0e20 	rsbs	lr, r5, #32
   b6584:	db0d      	blt.n	b65a2 <__adddf3+0xb2>
   b6586:	fa02 fc0e 	lsl.w	ip, r2, lr
   b658a:	fa22 f205 	lsr.w	r2, r2, r5
   b658e:	1880      	adds	r0, r0, r2
   b6590:	f141 0100 	adc.w	r1, r1, #0
   b6594:	fa03 f20e 	lsl.w	r2, r3, lr
   b6598:	1880      	adds	r0, r0, r2
   b659a:	fa43 f305 	asr.w	r3, r3, r5
   b659e:	4159      	adcs	r1, r3
   b65a0:	e00e      	b.n	b65c0 <__adddf3+0xd0>
   b65a2:	f1a5 0520 	sub.w	r5, r5, #32
   b65a6:	f10e 0e20 	add.w	lr, lr, #32
   b65aa:	2a01      	cmp	r2, #1
   b65ac:	fa03 fc0e 	lsl.w	ip, r3, lr
   b65b0:	bf28      	it	cs
   b65b2:	f04c 0c02 	orrcs.w	ip, ip, #2
   b65b6:	fa43 f305 	asr.w	r3, r3, r5
   b65ba:	18c0      	adds	r0, r0, r3
   b65bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   b65c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b65c4:	d507      	bpl.n	b65d6 <__adddf3+0xe6>
   b65c6:	f04f 0e00 	mov.w	lr, #0
   b65ca:	f1dc 0c00 	rsbs	ip, ip, #0
   b65ce:	eb7e 0000 	sbcs.w	r0, lr, r0
   b65d2:	eb6e 0101 	sbc.w	r1, lr, r1
   b65d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   b65da:	d31b      	bcc.n	b6614 <__adddf3+0x124>
   b65dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   b65e0:	d30c      	bcc.n	b65fc <__adddf3+0x10c>
   b65e2:	0849      	lsrs	r1, r1, #1
   b65e4:	ea5f 0030 	movs.w	r0, r0, rrx
   b65e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   b65ec:	f104 0401 	add.w	r4, r4, #1
   b65f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   b65f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   b65f8:	f080 809a 	bcs.w	b6730 <__adddf3+0x240>
   b65fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   b6600:	bf08      	it	eq
   b6602:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6606:	f150 0000 	adcs.w	r0, r0, #0
   b660a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b660e:	ea41 0105 	orr.w	r1, r1, r5
   b6612:	bd30      	pop	{r4, r5, pc}
   b6614:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   b6618:	4140      	adcs	r0, r0
   b661a:	eb41 0101 	adc.w	r1, r1, r1
   b661e:	3c01      	subs	r4, #1
   b6620:	bf28      	it	cs
   b6622:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   b6626:	d2e9      	bcs.n	b65fc <__adddf3+0x10c>
   b6628:	f091 0f00 	teq	r1, #0
   b662c:	bf04      	itt	eq
   b662e:	4601      	moveq	r1, r0
   b6630:	2000      	moveq	r0, #0
   b6632:	fab1 f381 	clz	r3, r1
   b6636:	bf08      	it	eq
   b6638:	3320      	addeq	r3, #32
   b663a:	f1a3 030b 	sub.w	r3, r3, #11
   b663e:	f1b3 0220 	subs.w	r2, r3, #32
   b6642:	da0c      	bge.n	b665e <__adddf3+0x16e>
   b6644:	320c      	adds	r2, #12
   b6646:	dd08      	ble.n	b665a <__adddf3+0x16a>
   b6648:	f102 0c14 	add.w	ip, r2, #20
   b664c:	f1c2 020c 	rsb	r2, r2, #12
   b6650:	fa01 f00c 	lsl.w	r0, r1, ip
   b6654:	fa21 f102 	lsr.w	r1, r1, r2
   b6658:	e00c      	b.n	b6674 <__adddf3+0x184>
   b665a:	f102 0214 	add.w	r2, r2, #20
   b665e:	bfd8      	it	le
   b6660:	f1c2 0c20 	rsble	ip, r2, #32
   b6664:	fa01 f102 	lsl.w	r1, r1, r2
   b6668:	fa20 fc0c 	lsr.w	ip, r0, ip
   b666c:	bfdc      	itt	le
   b666e:	ea41 010c 	orrle.w	r1, r1, ip
   b6672:	4090      	lslle	r0, r2
   b6674:	1ae4      	subs	r4, r4, r3
   b6676:	bfa2      	ittt	ge
   b6678:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   b667c:	4329      	orrge	r1, r5
   b667e:	bd30      	popge	{r4, r5, pc}
   b6680:	ea6f 0404 	mvn.w	r4, r4
   b6684:	3c1f      	subs	r4, #31
   b6686:	da1c      	bge.n	b66c2 <__adddf3+0x1d2>
   b6688:	340c      	adds	r4, #12
   b668a:	dc0e      	bgt.n	b66aa <__adddf3+0x1ba>
   b668c:	f104 0414 	add.w	r4, r4, #20
   b6690:	f1c4 0220 	rsb	r2, r4, #32
   b6694:	fa20 f004 	lsr.w	r0, r0, r4
   b6698:	fa01 f302 	lsl.w	r3, r1, r2
   b669c:	ea40 0003 	orr.w	r0, r0, r3
   b66a0:	fa21 f304 	lsr.w	r3, r1, r4
   b66a4:	ea45 0103 	orr.w	r1, r5, r3
   b66a8:	bd30      	pop	{r4, r5, pc}
   b66aa:	f1c4 040c 	rsb	r4, r4, #12
   b66ae:	f1c4 0220 	rsb	r2, r4, #32
   b66b2:	fa20 f002 	lsr.w	r0, r0, r2
   b66b6:	fa01 f304 	lsl.w	r3, r1, r4
   b66ba:	ea40 0003 	orr.w	r0, r0, r3
   b66be:	4629      	mov	r1, r5
   b66c0:	bd30      	pop	{r4, r5, pc}
   b66c2:	fa21 f004 	lsr.w	r0, r1, r4
   b66c6:	4629      	mov	r1, r5
   b66c8:	bd30      	pop	{r4, r5, pc}
   b66ca:	f094 0f00 	teq	r4, #0
   b66ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   b66d2:	bf06      	itte	eq
   b66d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   b66d8:	3401      	addeq	r4, #1
   b66da:	3d01      	subne	r5, #1
   b66dc:	e74e      	b.n	b657c <__adddf3+0x8c>
   b66de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b66e2:	bf18      	it	ne
   b66e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   b66e8:	d029      	beq.n	b673e <__adddf3+0x24e>
   b66ea:	ea94 0f05 	teq	r4, r5
   b66ee:	bf08      	it	eq
   b66f0:	ea90 0f02 	teqeq	r0, r2
   b66f4:	d005      	beq.n	b6702 <__adddf3+0x212>
   b66f6:	ea54 0c00 	orrs.w	ip, r4, r0
   b66fa:	bf04      	itt	eq
   b66fc:	4619      	moveq	r1, r3
   b66fe:	4610      	moveq	r0, r2
   b6700:	bd30      	pop	{r4, r5, pc}
   b6702:	ea91 0f03 	teq	r1, r3
   b6706:	bf1e      	ittt	ne
   b6708:	2100      	movne	r1, #0
   b670a:	2000      	movne	r0, #0
   b670c:	bd30      	popne	{r4, r5, pc}
   b670e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   b6712:	d105      	bne.n	b6720 <__adddf3+0x230>
   b6714:	0040      	lsls	r0, r0, #1
   b6716:	4149      	adcs	r1, r1
   b6718:	bf28      	it	cs
   b671a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   b671e:	bd30      	pop	{r4, r5, pc}
   b6720:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   b6724:	bf3c      	itt	cc
   b6726:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   b672a:	bd30      	popcc	{r4, r5, pc}
   b672c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b6730:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   b6734:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6738:	f04f 0000 	mov.w	r0, #0
   b673c:	bd30      	pop	{r4, r5, pc}
   b673e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   b6742:	bf1a      	itte	ne
   b6744:	4619      	movne	r1, r3
   b6746:	4610      	movne	r0, r2
   b6748:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   b674c:	bf1c      	itt	ne
   b674e:	460b      	movne	r3, r1
   b6750:	4602      	movne	r2, r0
   b6752:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6756:	bf06      	itte	eq
   b6758:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   b675c:	ea91 0f03 	teqeq	r1, r3
   b6760:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   b6764:	bd30      	pop	{r4, r5, pc}
   b6766:	bf00      	nop

000b6768 <__aeabi_ui2d>:
   b6768:	f090 0f00 	teq	r0, #0
   b676c:	bf04      	itt	eq
   b676e:	2100      	moveq	r1, #0
   b6770:	4770      	bxeq	lr
   b6772:	b530      	push	{r4, r5, lr}
   b6774:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6778:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b677c:	f04f 0500 	mov.w	r5, #0
   b6780:	f04f 0100 	mov.w	r1, #0
   b6784:	e750      	b.n	b6628 <__adddf3+0x138>
   b6786:	bf00      	nop

000b6788 <__aeabi_i2d>:
   b6788:	f090 0f00 	teq	r0, #0
   b678c:	bf04      	itt	eq
   b678e:	2100      	moveq	r1, #0
   b6790:	4770      	bxeq	lr
   b6792:	b530      	push	{r4, r5, lr}
   b6794:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b6798:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b679c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   b67a0:	bf48      	it	mi
   b67a2:	4240      	negmi	r0, r0
   b67a4:	f04f 0100 	mov.w	r1, #0
   b67a8:	e73e      	b.n	b6628 <__adddf3+0x138>
   b67aa:	bf00      	nop

000b67ac <__aeabi_f2d>:
   b67ac:	0042      	lsls	r2, r0, #1
   b67ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
   b67b2:	ea4f 0131 	mov.w	r1, r1, rrx
   b67b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   b67ba:	bf1f      	itttt	ne
   b67bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   b67c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   b67c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   b67c8:	4770      	bxne	lr
   b67ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   b67ce:	bf08      	it	eq
   b67d0:	4770      	bxeq	lr
   b67d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   b67d6:	bf04      	itt	eq
   b67d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   b67dc:	4770      	bxeq	lr
   b67de:	b530      	push	{r4, r5, lr}
   b67e0:	f44f 7460 	mov.w	r4, #896	; 0x380
   b67e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   b67e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b67ec:	e71c      	b.n	b6628 <__adddf3+0x138>
   b67ee:	bf00      	nop

000b67f0 <__aeabi_ul2d>:
   b67f0:	ea50 0201 	orrs.w	r2, r0, r1
   b67f4:	bf08      	it	eq
   b67f6:	4770      	bxeq	lr
   b67f8:	b530      	push	{r4, r5, lr}
   b67fa:	f04f 0500 	mov.w	r5, #0
   b67fe:	e00a      	b.n	b6816 <__aeabi_l2d+0x16>

000b6800 <__aeabi_l2d>:
   b6800:	ea50 0201 	orrs.w	r2, r0, r1
   b6804:	bf08      	it	eq
   b6806:	4770      	bxeq	lr
   b6808:	b530      	push	{r4, r5, lr}
   b680a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   b680e:	d502      	bpl.n	b6816 <__aeabi_l2d+0x16>
   b6810:	4240      	negs	r0, r0
   b6812:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   b6816:	f44f 6480 	mov.w	r4, #1024	; 0x400
   b681a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   b681e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   b6822:	f43f aed8 	beq.w	b65d6 <__adddf3+0xe6>
   b6826:	f04f 0203 	mov.w	r2, #3
   b682a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b682e:	bf18      	it	ne
   b6830:	3203      	addne	r2, #3
   b6832:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   b6836:	bf18      	it	ne
   b6838:	3203      	addne	r2, #3
   b683a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   b683e:	f1c2 0320 	rsb	r3, r2, #32
   b6842:	fa00 fc03 	lsl.w	ip, r0, r3
   b6846:	fa20 f002 	lsr.w	r0, r0, r2
   b684a:	fa01 fe03 	lsl.w	lr, r1, r3
   b684e:	ea40 000e 	orr.w	r0, r0, lr
   b6852:	fa21 f102 	lsr.w	r1, r1, r2
   b6856:	4414      	add	r4, r2
   b6858:	e6bd      	b.n	b65d6 <__adddf3+0xe6>
   b685a:	bf00      	nop

000b685c <__aeabi_dmul>:
   b685c:	b570      	push	{r4, r5, r6, lr}
   b685e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b686a:	bf1d      	ittte	ne
   b686c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6870:	ea94 0f0c 	teqne	r4, ip
   b6874:	ea95 0f0c 	teqne	r5, ip
   b6878:	f000 f8de 	bleq	b6a38 <__aeabi_dmul+0x1dc>
   b687c:	442c      	add	r4, r5
   b687e:	ea81 0603 	eor.w	r6, r1, r3
   b6882:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   b6886:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   b688a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   b688e:	bf18      	it	ne
   b6890:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   b6894:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6898:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   b689c:	d038      	beq.n	b6910 <__aeabi_dmul+0xb4>
   b689e:	fba0 ce02 	umull	ip, lr, r0, r2
   b68a2:	f04f 0500 	mov.w	r5, #0
   b68a6:	fbe1 e502 	umlal	lr, r5, r1, r2
   b68aa:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   b68ae:	fbe0 e503 	umlal	lr, r5, r0, r3
   b68b2:	f04f 0600 	mov.w	r6, #0
   b68b6:	fbe1 5603 	umlal	r5, r6, r1, r3
   b68ba:	f09c 0f00 	teq	ip, #0
   b68be:	bf18      	it	ne
   b68c0:	f04e 0e01 	orrne.w	lr, lr, #1
   b68c4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   b68c8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   b68cc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   b68d0:	d204      	bcs.n	b68dc <__aeabi_dmul+0x80>
   b68d2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   b68d6:	416d      	adcs	r5, r5
   b68d8:	eb46 0606 	adc.w	r6, r6, r6
   b68dc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   b68e0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   b68e4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   b68e8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   b68ec:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   b68f0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b68f4:	bf88      	it	hi
   b68f6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b68fa:	d81e      	bhi.n	b693a <__aeabi_dmul+0xde>
   b68fc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   b6900:	bf08      	it	eq
   b6902:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   b6906:	f150 0000 	adcs.w	r0, r0, #0
   b690a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b690e:	bd70      	pop	{r4, r5, r6, pc}
   b6910:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   b6914:	ea46 0101 	orr.w	r1, r6, r1
   b6918:	ea40 0002 	orr.w	r0, r0, r2
   b691c:	ea81 0103 	eor.w	r1, r1, r3
   b6920:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   b6924:	bfc2      	ittt	gt
   b6926:	ebd4 050c 	rsbsgt	r5, r4, ip
   b692a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b692e:	bd70      	popgt	{r4, r5, r6, pc}
   b6930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6934:	f04f 0e00 	mov.w	lr, #0
   b6938:	3c01      	subs	r4, #1
   b693a:	f300 80ab 	bgt.w	b6a94 <__aeabi_dmul+0x238>
   b693e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   b6942:	bfde      	ittt	le
   b6944:	2000      	movle	r0, #0
   b6946:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   b694a:	bd70      	pople	{r4, r5, r6, pc}
   b694c:	f1c4 0400 	rsb	r4, r4, #0
   b6950:	3c20      	subs	r4, #32
   b6952:	da35      	bge.n	b69c0 <__aeabi_dmul+0x164>
   b6954:	340c      	adds	r4, #12
   b6956:	dc1b      	bgt.n	b6990 <__aeabi_dmul+0x134>
   b6958:	f104 0414 	add.w	r4, r4, #20
   b695c:	f1c4 0520 	rsb	r5, r4, #32
   b6960:	fa00 f305 	lsl.w	r3, r0, r5
   b6964:	fa20 f004 	lsr.w	r0, r0, r4
   b6968:	fa01 f205 	lsl.w	r2, r1, r5
   b696c:	ea40 0002 	orr.w	r0, r0, r2
   b6970:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   b6974:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   b6978:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b697c:	fa21 f604 	lsr.w	r6, r1, r4
   b6980:	eb42 0106 	adc.w	r1, r2, r6
   b6984:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b6988:	bf08      	it	eq
   b698a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b698e:	bd70      	pop	{r4, r5, r6, pc}
   b6990:	f1c4 040c 	rsb	r4, r4, #12
   b6994:	f1c4 0520 	rsb	r5, r4, #32
   b6998:	fa00 f304 	lsl.w	r3, r0, r4
   b699c:	fa20 f005 	lsr.w	r0, r0, r5
   b69a0:	fa01 f204 	lsl.w	r2, r1, r4
   b69a4:	ea40 0002 	orr.w	r0, r0, r2
   b69a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   b69b0:	f141 0100 	adc.w	r1, r1, #0
   b69b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b69b8:	bf08      	it	eq
   b69ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b69be:	bd70      	pop	{r4, r5, r6, pc}
   b69c0:	f1c4 0520 	rsb	r5, r4, #32
   b69c4:	fa00 f205 	lsl.w	r2, r0, r5
   b69c8:	ea4e 0e02 	orr.w	lr, lr, r2
   b69cc:	fa20 f304 	lsr.w	r3, r0, r4
   b69d0:	fa01 f205 	lsl.w	r2, r1, r5
   b69d4:	ea43 0302 	orr.w	r3, r3, r2
   b69d8:	fa21 f004 	lsr.w	r0, r1, r4
   b69dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b69e0:	fa21 f204 	lsr.w	r2, r1, r4
   b69e4:	ea20 0002 	bic.w	r0, r0, r2
   b69e8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   b69ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   b69f0:	bf08      	it	eq
   b69f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   b69f6:	bd70      	pop	{r4, r5, r6, pc}
   b69f8:	f094 0f00 	teq	r4, #0
   b69fc:	d10f      	bne.n	b6a1e <__aeabi_dmul+0x1c2>
   b69fe:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   b6a02:	0040      	lsls	r0, r0, #1
   b6a04:	eb41 0101 	adc.w	r1, r1, r1
   b6a08:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6a0c:	bf08      	it	eq
   b6a0e:	3c01      	subeq	r4, #1
   b6a10:	d0f7      	beq.n	b6a02 <__aeabi_dmul+0x1a6>
   b6a12:	ea41 0106 	orr.w	r1, r1, r6
   b6a16:	f095 0f00 	teq	r5, #0
   b6a1a:	bf18      	it	ne
   b6a1c:	4770      	bxne	lr
   b6a1e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   b6a22:	0052      	lsls	r2, r2, #1
   b6a24:	eb43 0303 	adc.w	r3, r3, r3
   b6a28:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   b6a2c:	bf08      	it	eq
   b6a2e:	3d01      	subeq	r5, #1
   b6a30:	d0f7      	beq.n	b6a22 <__aeabi_dmul+0x1c6>
   b6a32:	ea43 0306 	orr.w	r3, r3, r6
   b6a36:	4770      	bx	lr
   b6a38:	ea94 0f0c 	teq	r4, ip
   b6a3c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6a40:	bf18      	it	ne
   b6a42:	ea95 0f0c 	teqne	r5, ip
   b6a46:	d00c      	beq.n	b6a62 <__aeabi_dmul+0x206>
   b6a48:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a4c:	bf18      	it	ne
   b6a4e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a52:	d1d1      	bne.n	b69f8 <__aeabi_dmul+0x19c>
   b6a54:	ea81 0103 	eor.w	r1, r1, r3
   b6a58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a5c:	f04f 0000 	mov.w	r0, #0
   b6a60:	bd70      	pop	{r4, r5, r6, pc}
   b6a62:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6a66:	bf06      	itte	eq
   b6a68:	4610      	moveq	r0, r2
   b6a6a:	4619      	moveq	r1, r3
   b6a6c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6a70:	d019      	beq.n	b6aa6 <__aeabi_dmul+0x24a>
   b6a72:	ea94 0f0c 	teq	r4, ip
   b6a76:	d102      	bne.n	b6a7e <__aeabi_dmul+0x222>
   b6a78:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   b6a7c:	d113      	bne.n	b6aa6 <__aeabi_dmul+0x24a>
   b6a7e:	ea95 0f0c 	teq	r5, ip
   b6a82:	d105      	bne.n	b6a90 <__aeabi_dmul+0x234>
   b6a84:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   b6a88:	bf1c      	itt	ne
   b6a8a:	4610      	movne	r0, r2
   b6a8c:	4619      	movne	r1, r3
   b6a8e:	d10a      	bne.n	b6aa6 <__aeabi_dmul+0x24a>
   b6a90:	ea81 0103 	eor.w	r1, r1, r3
   b6a94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   b6a98:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6a9c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   b6aa0:	f04f 0000 	mov.w	r0, #0
   b6aa4:	bd70      	pop	{r4, r5, r6, pc}
   b6aa6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   b6aaa:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   b6aae:	bd70      	pop	{r4, r5, r6, pc}

000b6ab0 <__aeabi_ddiv>:
   b6ab0:	b570      	push	{r4, r5, r6, lr}
   b6ab2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   b6ab6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   b6aba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   b6abe:	bf1d      	ittte	ne
   b6ac0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   b6ac4:	ea94 0f0c 	teqne	r4, ip
   b6ac8:	ea95 0f0c 	teqne	r5, ip
   b6acc:	f000 f8a7 	bleq	b6c1e <__aeabi_ddiv+0x16e>
   b6ad0:	eba4 0405 	sub.w	r4, r4, r5
   b6ad4:	ea81 0e03 	eor.w	lr, r1, r3
   b6ad8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6adc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   b6ae0:	f000 8088 	beq.w	b6bf4 <__aeabi_ddiv+0x144>
   b6ae4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   b6ae8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   b6aec:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   b6af0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   b6af4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   b6af8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   b6afc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   b6b00:	ea4f 2600 	mov.w	r6, r0, lsl #8
   b6b04:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   b6b08:	429d      	cmp	r5, r3
   b6b0a:	bf08      	it	eq
   b6b0c:	4296      	cmpeq	r6, r2
   b6b0e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   b6b12:	f504 7440 	add.w	r4, r4, #768	; 0x300
   b6b16:	d202      	bcs.n	b6b1e <__aeabi_ddiv+0x6e>
   b6b18:	085b      	lsrs	r3, r3, #1
   b6b1a:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b1e:	1ab6      	subs	r6, r6, r2
   b6b20:	eb65 0503 	sbc.w	r5, r5, r3
   b6b24:	085b      	lsrs	r3, r3, #1
   b6b26:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b2a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   b6b2e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   b6b32:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b36:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b3a:	bf22      	ittt	cs
   b6b3c:	1ab6      	subcs	r6, r6, r2
   b6b3e:	4675      	movcs	r5, lr
   b6b40:	ea40 000c 	orrcs.w	r0, r0, ip
   b6b44:	085b      	lsrs	r3, r3, #1
   b6b46:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b4a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b4e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b52:	bf22      	ittt	cs
   b6b54:	1ab6      	subcs	r6, r6, r2
   b6b56:	4675      	movcs	r5, lr
   b6b58:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   b6b5c:	085b      	lsrs	r3, r3, #1
   b6b5e:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b62:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b66:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b6a:	bf22      	ittt	cs
   b6b6c:	1ab6      	subcs	r6, r6, r2
   b6b6e:	4675      	movcs	r5, lr
   b6b70:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   b6b74:	085b      	lsrs	r3, r3, #1
   b6b76:	ea4f 0232 	mov.w	r2, r2, rrx
   b6b7a:	ebb6 0e02 	subs.w	lr, r6, r2
   b6b7e:	eb75 0e03 	sbcs.w	lr, r5, r3
   b6b82:	bf22      	ittt	cs
   b6b84:	1ab6      	subcs	r6, r6, r2
   b6b86:	4675      	movcs	r5, lr
   b6b88:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   b6b8c:	ea55 0e06 	orrs.w	lr, r5, r6
   b6b90:	d018      	beq.n	b6bc4 <__aeabi_ddiv+0x114>
   b6b92:	ea4f 1505 	mov.w	r5, r5, lsl #4
   b6b96:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   b6b9a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   b6b9e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   b6ba2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   b6ba6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   b6baa:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   b6bae:	d1c0      	bne.n	b6b32 <__aeabi_ddiv+0x82>
   b6bb0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6bb4:	d10b      	bne.n	b6bce <__aeabi_ddiv+0x11e>
   b6bb6:	ea41 0100 	orr.w	r1, r1, r0
   b6bba:	f04f 0000 	mov.w	r0, #0
   b6bbe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   b6bc2:	e7b6      	b.n	b6b32 <__aeabi_ddiv+0x82>
   b6bc4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   b6bc8:	bf04      	itt	eq
   b6bca:	4301      	orreq	r1, r0
   b6bcc:	2000      	moveq	r0, #0
   b6bce:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   b6bd2:	bf88      	it	hi
   b6bd4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   b6bd8:	f63f aeaf 	bhi.w	b693a <__aeabi_dmul+0xde>
   b6bdc:	ebb5 0c03 	subs.w	ip, r5, r3
   b6be0:	bf04      	itt	eq
   b6be2:	ebb6 0c02 	subseq.w	ip, r6, r2
   b6be6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   b6bea:	f150 0000 	adcs.w	r0, r0, #0
   b6bee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   b6bf2:	bd70      	pop	{r4, r5, r6, pc}
   b6bf4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   b6bf8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   b6bfc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   b6c00:	bfc2      	ittt	gt
   b6c02:	ebd4 050c 	rsbsgt	r5, r4, ip
   b6c06:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   b6c0a:	bd70      	popgt	{r4, r5, r6, pc}
   b6c0c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   b6c10:	f04f 0e00 	mov.w	lr, #0
   b6c14:	3c01      	subs	r4, #1
   b6c16:	e690      	b.n	b693a <__aeabi_dmul+0xde>
   b6c18:	ea45 0e06 	orr.w	lr, r5, r6
   b6c1c:	e68d      	b.n	b693a <__aeabi_dmul+0xde>
   b6c1e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   b6c22:	ea94 0f0c 	teq	r4, ip
   b6c26:	bf08      	it	eq
   b6c28:	ea95 0f0c 	teqeq	r5, ip
   b6c2c:	f43f af3b 	beq.w	b6aa6 <__aeabi_dmul+0x24a>
   b6c30:	ea94 0f0c 	teq	r4, ip
   b6c34:	d10a      	bne.n	b6c4c <__aeabi_ddiv+0x19c>
   b6c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   b6c3a:	f47f af34 	bne.w	b6aa6 <__aeabi_dmul+0x24a>
   b6c3e:	ea95 0f0c 	teq	r5, ip
   b6c42:	f47f af25 	bne.w	b6a90 <__aeabi_dmul+0x234>
   b6c46:	4610      	mov	r0, r2
   b6c48:	4619      	mov	r1, r3
   b6c4a:	e72c      	b.n	b6aa6 <__aeabi_dmul+0x24a>
   b6c4c:	ea95 0f0c 	teq	r5, ip
   b6c50:	d106      	bne.n	b6c60 <__aeabi_ddiv+0x1b0>
   b6c52:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   b6c56:	f43f aefd 	beq.w	b6a54 <__aeabi_dmul+0x1f8>
   b6c5a:	4610      	mov	r0, r2
   b6c5c:	4619      	mov	r1, r3
   b6c5e:	e722      	b.n	b6aa6 <__aeabi_dmul+0x24a>
   b6c60:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   b6c64:	bf18      	it	ne
   b6c66:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   b6c6a:	f47f aec5 	bne.w	b69f8 <__aeabi_dmul+0x19c>
   b6c6e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   b6c72:	f47f af0d 	bne.w	b6a90 <__aeabi_dmul+0x234>
   b6c76:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   b6c7a:	f47f aeeb 	bne.w	b6a54 <__aeabi_dmul+0x1f8>
   b6c7e:	e712      	b.n	b6aa6 <__aeabi_dmul+0x24a>

000b6c80 <__gedf2>:
   b6c80:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   b6c84:	e006      	b.n	b6c94 <__cmpdf2+0x4>
   b6c86:	bf00      	nop

000b6c88 <__ledf2>:
   b6c88:	f04f 0c01 	mov.w	ip, #1
   b6c8c:	e002      	b.n	b6c94 <__cmpdf2+0x4>
   b6c8e:	bf00      	nop

000b6c90 <__cmpdf2>:
   b6c90:	f04f 0c01 	mov.w	ip, #1
   b6c94:	f84d cd04 	str.w	ip, [sp, #-4]!
   b6c98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6c9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6ca0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6ca4:	bf18      	it	ne
   b6ca6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   b6caa:	d01b      	beq.n	b6ce4 <__cmpdf2+0x54>
   b6cac:	b001      	add	sp, #4
   b6cae:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   b6cb2:	bf0c      	ite	eq
   b6cb4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   b6cb8:	ea91 0f03 	teqne	r1, r3
   b6cbc:	bf02      	ittt	eq
   b6cbe:	ea90 0f02 	teqeq	r0, r2
   b6cc2:	2000      	moveq	r0, #0
   b6cc4:	4770      	bxeq	lr
   b6cc6:	f110 0f00 	cmn.w	r0, #0
   b6cca:	ea91 0f03 	teq	r1, r3
   b6cce:	bf58      	it	pl
   b6cd0:	4299      	cmppl	r1, r3
   b6cd2:	bf08      	it	eq
   b6cd4:	4290      	cmpeq	r0, r2
   b6cd6:	bf2c      	ite	cs
   b6cd8:	17d8      	asrcs	r0, r3, #31
   b6cda:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   b6cde:	f040 0001 	orr.w	r0, r0, #1
   b6ce2:	4770      	bx	lr
   b6ce4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   b6ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6cec:	d102      	bne.n	b6cf4 <__cmpdf2+0x64>
   b6cee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   b6cf2:	d107      	bne.n	b6d04 <__cmpdf2+0x74>
   b6cf4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   b6cf8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   b6cfc:	d1d6      	bne.n	b6cac <__cmpdf2+0x1c>
   b6cfe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   b6d02:	d0d3      	beq.n	b6cac <__cmpdf2+0x1c>
   b6d04:	f85d 0b04 	ldr.w	r0, [sp], #4
   b6d08:	4770      	bx	lr
   b6d0a:	bf00      	nop

000b6d0c <__aeabi_cdrcmple>:
   b6d0c:	4684      	mov	ip, r0
   b6d0e:	4610      	mov	r0, r2
   b6d10:	4662      	mov	r2, ip
   b6d12:	468c      	mov	ip, r1
   b6d14:	4619      	mov	r1, r3
   b6d16:	4663      	mov	r3, ip
   b6d18:	e000      	b.n	b6d1c <__aeabi_cdcmpeq>
   b6d1a:	bf00      	nop

000b6d1c <__aeabi_cdcmpeq>:
   b6d1c:	b501      	push	{r0, lr}
   b6d1e:	f7ff ffb7 	bl	b6c90 <__cmpdf2>
   b6d22:	2800      	cmp	r0, #0
   b6d24:	bf48      	it	mi
   b6d26:	f110 0f00 	cmnmi.w	r0, #0
   b6d2a:	bd01      	pop	{r0, pc}

000b6d2c <__aeabi_dcmpeq>:
   b6d2c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d30:	f7ff fff4 	bl	b6d1c <__aeabi_cdcmpeq>
   b6d34:	bf0c      	ite	eq
   b6d36:	2001      	moveq	r0, #1
   b6d38:	2000      	movne	r0, #0
   b6d3a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d3e:	bf00      	nop

000b6d40 <__aeabi_dcmplt>:
   b6d40:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d44:	f7ff ffea 	bl	b6d1c <__aeabi_cdcmpeq>
   b6d48:	bf34      	ite	cc
   b6d4a:	2001      	movcc	r0, #1
   b6d4c:	2000      	movcs	r0, #0
   b6d4e:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d52:	bf00      	nop

000b6d54 <__aeabi_dcmple>:
   b6d54:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d58:	f7ff ffe0 	bl	b6d1c <__aeabi_cdcmpeq>
   b6d5c:	bf94      	ite	ls
   b6d5e:	2001      	movls	r0, #1
   b6d60:	2000      	movhi	r0, #0
   b6d62:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d66:	bf00      	nop

000b6d68 <__aeabi_dcmpge>:
   b6d68:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d6c:	f7ff ffce 	bl	b6d0c <__aeabi_cdrcmple>
   b6d70:	bf94      	ite	ls
   b6d72:	2001      	movls	r0, #1
   b6d74:	2000      	movhi	r0, #0
   b6d76:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d7a:	bf00      	nop

000b6d7c <__aeabi_dcmpgt>:
   b6d7c:	f84d ed08 	str.w	lr, [sp, #-8]!
   b6d80:	f7ff ffc4 	bl	b6d0c <__aeabi_cdrcmple>
   b6d84:	bf34      	ite	cc
   b6d86:	2001      	movcc	r0, #1
   b6d88:	2000      	movcs	r0, #0
   b6d8a:	f85d fb08 	ldr.w	pc, [sp], #8
   b6d8e:	bf00      	nop

000b6d90 <__aeabi_d2uiz>:
   b6d90:	004a      	lsls	r2, r1, #1
   b6d92:	d211      	bcs.n	b6db8 <__aeabi_d2uiz+0x28>
   b6d94:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   b6d98:	d211      	bcs.n	b6dbe <__aeabi_d2uiz+0x2e>
   b6d9a:	d50d      	bpl.n	b6db8 <__aeabi_d2uiz+0x28>
   b6d9c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   b6da0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   b6da4:	d40e      	bmi.n	b6dc4 <__aeabi_d2uiz+0x34>
   b6da6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   b6daa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   b6dae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   b6db2:	fa23 f002 	lsr.w	r0, r3, r2
   b6db6:	4770      	bx	lr
   b6db8:	f04f 0000 	mov.w	r0, #0
   b6dbc:	4770      	bx	lr
   b6dbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   b6dc2:	d102      	bne.n	b6dca <__aeabi_d2uiz+0x3a>
   b6dc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b6dc8:	4770      	bx	lr
   b6dca:	f04f 0000 	mov.w	r0, #0
   b6dce:	4770      	bx	lr

000b6dd0 <__aeabi_uldivmod>:
   b6dd0:	b953      	cbnz	r3, b6de8 <__aeabi_uldivmod+0x18>
   b6dd2:	b94a      	cbnz	r2, b6de8 <__aeabi_uldivmod+0x18>
   b6dd4:	2900      	cmp	r1, #0
   b6dd6:	bf08      	it	eq
   b6dd8:	2800      	cmpeq	r0, #0
   b6dda:	bf1c      	itt	ne
   b6ddc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   b6de0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   b6de4:	f000 b992 	b.w	b710c <__aeabi_idiv0>
   b6de8:	f1ad 0c08 	sub.w	ip, sp, #8
   b6dec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   b6df0:	f000 f824 	bl	b6e3c <__udivmoddi4>
   b6df4:	f8dd e004 	ldr.w	lr, [sp, #4]
   b6df8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   b6dfc:	b004      	add	sp, #16
   b6dfe:	4770      	bx	lr

000b6e00 <__aeabi_d2ulz>:
   b6e00:	b5d0      	push	{r4, r6, r7, lr}
   b6e02:	4b0c      	ldr	r3, [pc, #48]	; (b6e34 <__aeabi_d2ulz+0x34>)
   b6e04:	2200      	movs	r2, #0
   b6e06:	4606      	mov	r6, r0
   b6e08:	460f      	mov	r7, r1
   b6e0a:	f7ff fd27 	bl	b685c <__aeabi_dmul>
   b6e0e:	f7ff ffbf 	bl	b6d90 <__aeabi_d2uiz>
   b6e12:	4604      	mov	r4, r0
   b6e14:	f7ff fca8 	bl	b6768 <__aeabi_ui2d>
   b6e18:	4b07      	ldr	r3, [pc, #28]	; (b6e38 <__aeabi_d2ulz+0x38>)
   b6e1a:	2200      	movs	r2, #0
   b6e1c:	f7ff fd1e 	bl	b685c <__aeabi_dmul>
   b6e20:	4602      	mov	r2, r0
   b6e22:	460b      	mov	r3, r1
   b6e24:	4630      	mov	r0, r6
   b6e26:	4639      	mov	r1, r7
   b6e28:	f7ff fb60 	bl	b64ec <__aeabi_dsub>
   b6e2c:	f7ff ffb0 	bl	b6d90 <__aeabi_d2uiz>
   b6e30:	4621      	mov	r1, r4
   b6e32:	bdd0      	pop	{r4, r6, r7, pc}
   b6e34:	3df00000 	.word	0x3df00000
   b6e38:	41f00000 	.word	0x41f00000

000b6e3c <__udivmoddi4>:
   b6e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   b6e40:	9d08      	ldr	r5, [sp, #32]
   b6e42:	4604      	mov	r4, r0
   b6e44:	468e      	mov	lr, r1
   b6e46:	2b00      	cmp	r3, #0
   b6e48:	d14d      	bne.n	b6ee6 <__udivmoddi4+0xaa>
   b6e4a:	428a      	cmp	r2, r1
   b6e4c:	4694      	mov	ip, r2
   b6e4e:	d969      	bls.n	b6f24 <__udivmoddi4+0xe8>
   b6e50:	fab2 f282 	clz	r2, r2
   b6e54:	b152      	cbz	r2, b6e6c <__udivmoddi4+0x30>
   b6e56:	fa01 f302 	lsl.w	r3, r1, r2
   b6e5a:	f1c2 0120 	rsb	r1, r2, #32
   b6e5e:	fa20 f101 	lsr.w	r1, r0, r1
   b6e62:	fa0c fc02 	lsl.w	ip, ip, r2
   b6e66:	ea41 0e03 	orr.w	lr, r1, r3
   b6e6a:	4094      	lsls	r4, r2
   b6e6c:	ea4f 481c 	mov.w	r8, ip, lsr #16
   b6e70:	0c21      	lsrs	r1, r4, #16
   b6e72:	fbbe f6f8 	udiv	r6, lr, r8
   b6e76:	fa1f f78c 	uxth.w	r7, ip
   b6e7a:	fb08 e316 	mls	r3, r8, r6, lr
   b6e7e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
   b6e82:	fb06 f107 	mul.w	r1, r6, r7
   b6e86:	4299      	cmp	r1, r3
   b6e88:	d90a      	bls.n	b6ea0 <__udivmoddi4+0x64>
   b6e8a:	eb1c 0303 	adds.w	r3, ip, r3
   b6e8e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
   b6e92:	f080 811f 	bcs.w	b70d4 <__udivmoddi4+0x298>
   b6e96:	4299      	cmp	r1, r3
   b6e98:	f240 811c 	bls.w	b70d4 <__udivmoddi4+0x298>
   b6e9c:	3e02      	subs	r6, #2
   b6e9e:	4463      	add	r3, ip
   b6ea0:	1a5b      	subs	r3, r3, r1
   b6ea2:	b2a4      	uxth	r4, r4
   b6ea4:	fbb3 f0f8 	udiv	r0, r3, r8
   b6ea8:	fb08 3310 	mls	r3, r8, r0, r3
   b6eac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   b6eb0:	fb00 f707 	mul.w	r7, r0, r7
   b6eb4:	42a7      	cmp	r7, r4
   b6eb6:	d90a      	bls.n	b6ece <__udivmoddi4+0x92>
   b6eb8:	eb1c 0404 	adds.w	r4, ip, r4
   b6ebc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b6ec0:	f080 810a 	bcs.w	b70d8 <__udivmoddi4+0x29c>
   b6ec4:	42a7      	cmp	r7, r4
   b6ec6:	f240 8107 	bls.w	b70d8 <__udivmoddi4+0x29c>
   b6eca:	4464      	add	r4, ip
   b6ecc:	3802      	subs	r0, #2
   b6ece:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   b6ed2:	1be4      	subs	r4, r4, r7
   b6ed4:	2600      	movs	r6, #0
   b6ed6:	b11d      	cbz	r5, b6ee0 <__udivmoddi4+0xa4>
   b6ed8:	40d4      	lsrs	r4, r2
   b6eda:	2300      	movs	r3, #0
   b6edc:	e9c5 4300 	strd	r4, r3, [r5]
   b6ee0:	4631      	mov	r1, r6
   b6ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6ee6:	428b      	cmp	r3, r1
   b6ee8:	d909      	bls.n	b6efe <__udivmoddi4+0xc2>
   b6eea:	2d00      	cmp	r5, #0
   b6eec:	f000 80ef 	beq.w	b70ce <__udivmoddi4+0x292>
   b6ef0:	2600      	movs	r6, #0
   b6ef2:	e9c5 0100 	strd	r0, r1, [r5]
   b6ef6:	4630      	mov	r0, r6
   b6ef8:	4631      	mov	r1, r6
   b6efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b6efe:	fab3 f683 	clz	r6, r3
   b6f02:	2e00      	cmp	r6, #0
   b6f04:	d14a      	bne.n	b6f9c <__udivmoddi4+0x160>
   b6f06:	428b      	cmp	r3, r1
   b6f08:	d302      	bcc.n	b6f10 <__udivmoddi4+0xd4>
   b6f0a:	4282      	cmp	r2, r0
   b6f0c:	f200 80f9 	bhi.w	b7102 <__udivmoddi4+0x2c6>
   b6f10:	1a84      	subs	r4, r0, r2
   b6f12:	eb61 0303 	sbc.w	r3, r1, r3
   b6f16:	2001      	movs	r0, #1
   b6f18:	469e      	mov	lr, r3
   b6f1a:	2d00      	cmp	r5, #0
   b6f1c:	d0e0      	beq.n	b6ee0 <__udivmoddi4+0xa4>
   b6f1e:	e9c5 4e00 	strd	r4, lr, [r5]
   b6f22:	e7dd      	b.n	b6ee0 <__udivmoddi4+0xa4>
   b6f24:	b902      	cbnz	r2, b6f28 <__udivmoddi4+0xec>
   b6f26:	deff      	udf	#255	; 0xff
   b6f28:	fab2 f282 	clz	r2, r2
   b6f2c:	2a00      	cmp	r2, #0
   b6f2e:	f040 8092 	bne.w	b7056 <__udivmoddi4+0x21a>
   b6f32:	eba1 010c 	sub.w	r1, r1, ip
   b6f36:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b6f3a:	fa1f fe8c 	uxth.w	lr, ip
   b6f3e:	2601      	movs	r6, #1
   b6f40:	0c20      	lsrs	r0, r4, #16
   b6f42:	fbb1 f3f7 	udiv	r3, r1, r7
   b6f46:	fb07 1113 	mls	r1, r7, r3, r1
   b6f4a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6f4e:	fb0e f003 	mul.w	r0, lr, r3
   b6f52:	4288      	cmp	r0, r1
   b6f54:	d908      	bls.n	b6f68 <__udivmoddi4+0x12c>
   b6f56:	eb1c 0101 	adds.w	r1, ip, r1
   b6f5a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   b6f5e:	d202      	bcs.n	b6f66 <__udivmoddi4+0x12a>
   b6f60:	4288      	cmp	r0, r1
   b6f62:	f200 80cb 	bhi.w	b70fc <__udivmoddi4+0x2c0>
   b6f66:	4643      	mov	r3, r8
   b6f68:	1a09      	subs	r1, r1, r0
   b6f6a:	b2a4      	uxth	r4, r4
   b6f6c:	fbb1 f0f7 	udiv	r0, r1, r7
   b6f70:	fb07 1110 	mls	r1, r7, r0, r1
   b6f74:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
   b6f78:	fb0e fe00 	mul.w	lr, lr, r0
   b6f7c:	45a6      	cmp	lr, r4
   b6f7e:	d908      	bls.n	b6f92 <__udivmoddi4+0x156>
   b6f80:	eb1c 0404 	adds.w	r4, ip, r4
   b6f84:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
   b6f88:	d202      	bcs.n	b6f90 <__udivmoddi4+0x154>
   b6f8a:	45a6      	cmp	lr, r4
   b6f8c:	f200 80bb 	bhi.w	b7106 <__udivmoddi4+0x2ca>
   b6f90:	4608      	mov	r0, r1
   b6f92:	eba4 040e 	sub.w	r4, r4, lr
   b6f96:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   b6f9a:	e79c      	b.n	b6ed6 <__udivmoddi4+0x9a>
   b6f9c:	f1c6 0720 	rsb	r7, r6, #32
   b6fa0:	40b3      	lsls	r3, r6
   b6fa2:	fa22 fc07 	lsr.w	ip, r2, r7
   b6fa6:	ea4c 0c03 	orr.w	ip, ip, r3
   b6faa:	fa20 f407 	lsr.w	r4, r0, r7
   b6fae:	fa01 f306 	lsl.w	r3, r1, r6
   b6fb2:	431c      	orrs	r4, r3
   b6fb4:	40f9      	lsrs	r1, r7
   b6fb6:	ea4f 491c 	mov.w	r9, ip, lsr #16
   b6fba:	fa00 f306 	lsl.w	r3, r0, r6
   b6fbe:	fbb1 f8f9 	udiv	r8, r1, r9
   b6fc2:	0c20      	lsrs	r0, r4, #16
   b6fc4:	fa1f fe8c 	uxth.w	lr, ip
   b6fc8:	fb09 1118 	mls	r1, r9, r8, r1
   b6fcc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
   b6fd0:	fb08 f00e 	mul.w	r0, r8, lr
   b6fd4:	4288      	cmp	r0, r1
   b6fd6:	fa02 f206 	lsl.w	r2, r2, r6
   b6fda:	d90b      	bls.n	b6ff4 <__udivmoddi4+0x1b8>
   b6fdc:	eb1c 0101 	adds.w	r1, ip, r1
   b6fe0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   b6fe4:	f080 8088 	bcs.w	b70f8 <__udivmoddi4+0x2bc>
   b6fe8:	4288      	cmp	r0, r1
   b6fea:	f240 8085 	bls.w	b70f8 <__udivmoddi4+0x2bc>
   b6fee:	f1a8 0802 	sub.w	r8, r8, #2
   b6ff2:	4461      	add	r1, ip
   b6ff4:	1a09      	subs	r1, r1, r0
   b6ff6:	b2a4      	uxth	r4, r4
   b6ff8:	fbb1 f0f9 	udiv	r0, r1, r9
   b6ffc:	fb09 1110 	mls	r1, r9, r0, r1
   b7000:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
   b7004:	fb00 fe0e 	mul.w	lr, r0, lr
   b7008:	458e      	cmp	lr, r1
   b700a:	d908      	bls.n	b701e <__udivmoddi4+0x1e2>
   b700c:	eb1c 0101 	adds.w	r1, ip, r1
   b7010:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
   b7014:	d26c      	bcs.n	b70f0 <__udivmoddi4+0x2b4>
   b7016:	458e      	cmp	lr, r1
   b7018:	d96a      	bls.n	b70f0 <__udivmoddi4+0x2b4>
   b701a:	3802      	subs	r0, #2
   b701c:	4461      	add	r1, ip
   b701e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   b7022:	fba0 9402 	umull	r9, r4, r0, r2
   b7026:	eba1 010e 	sub.w	r1, r1, lr
   b702a:	42a1      	cmp	r1, r4
   b702c:	46c8      	mov	r8, r9
   b702e:	46a6      	mov	lr, r4
   b7030:	d356      	bcc.n	b70e0 <__udivmoddi4+0x2a4>
   b7032:	d053      	beq.n	b70dc <__udivmoddi4+0x2a0>
   b7034:	b15d      	cbz	r5, b704e <__udivmoddi4+0x212>
   b7036:	ebb3 0208 	subs.w	r2, r3, r8
   b703a:	eb61 010e 	sbc.w	r1, r1, lr
   b703e:	fa01 f707 	lsl.w	r7, r1, r7
   b7042:	fa22 f306 	lsr.w	r3, r2, r6
   b7046:	40f1      	lsrs	r1, r6
   b7048:	431f      	orrs	r7, r3
   b704a:	e9c5 7100 	strd	r7, r1, [r5]
   b704e:	2600      	movs	r6, #0
   b7050:	4631      	mov	r1, r6
   b7052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   b7056:	f1c2 0320 	rsb	r3, r2, #32
   b705a:	40d8      	lsrs	r0, r3
   b705c:	fa0c fc02 	lsl.w	ip, ip, r2
   b7060:	fa21 f303 	lsr.w	r3, r1, r3
   b7064:	4091      	lsls	r1, r2
   b7066:	4301      	orrs	r1, r0
   b7068:	ea4f 471c 	mov.w	r7, ip, lsr #16
   b706c:	fa1f fe8c 	uxth.w	lr, ip
   b7070:	fbb3 f0f7 	udiv	r0, r3, r7
   b7074:	fb07 3610 	mls	r6, r7, r0, r3
   b7078:	0c0b      	lsrs	r3, r1, #16
   b707a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   b707e:	fb00 f60e 	mul.w	r6, r0, lr
   b7082:	429e      	cmp	r6, r3
   b7084:	fa04 f402 	lsl.w	r4, r4, r2
   b7088:	d908      	bls.n	b709c <__udivmoddi4+0x260>
   b708a:	eb1c 0303 	adds.w	r3, ip, r3
   b708e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
   b7092:	d22f      	bcs.n	b70f4 <__udivmoddi4+0x2b8>
   b7094:	429e      	cmp	r6, r3
   b7096:	d92d      	bls.n	b70f4 <__udivmoddi4+0x2b8>
   b7098:	3802      	subs	r0, #2
   b709a:	4463      	add	r3, ip
   b709c:	1b9b      	subs	r3, r3, r6
   b709e:	b289      	uxth	r1, r1
   b70a0:	fbb3 f6f7 	udiv	r6, r3, r7
   b70a4:	fb07 3316 	mls	r3, r7, r6, r3
   b70a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   b70ac:	fb06 f30e 	mul.w	r3, r6, lr
   b70b0:	428b      	cmp	r3, r1
   b70b2:	d908      	bls.n	b70c6 <__udivmoddi4+0x28a>
   b70b4:	eb1c 0101 	adds.w	r1, ip, r1
   b70b8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
   b70bc:	d216      	bcs.n	b70ec <__udivmoddi4+0x2b0>
   b70be:	428b      	cmp	r3, r1
   b70c0:	d914      	bls.n	b70ec <__udivmoddi4+0x2b0>
   b70c2:	3e02      	subs	r6, #2
   b70c4:	4461      	add	r1, ip
   b70c6:	1ac9      	subs	r1, r1, r3
   b70c8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
   b70cc:	e738      	b.n	b6f40 <__udivmoddi4+0x104>
   b70ce:	462e      	mov	r6, r5
   b70d0:	4628      	mov	r0, r5
   b70d2:	e705      	b.n	b6ee0 <__udivmoddi4+0xa4>
   b70d4:	4606      	mov	r6, r0
   b70d6:	e6e3      	b.n	b6ea0 <__udivmoddi4+0x64>
   b70d8:	4618      	mov	r0, r3
   b70da:	e6f8      	b.n	b6ece <__udivmoddi4+0x92>
   b70dc:	454b      	cmp	r3, r9
   b70de:	d2a9      	bcs.n	b7034 <__udivmoddi4+0x1f8>
   b70e0:	ebb9 0802 	subs.w	r8, r9, r2
   b70e4:	eb64 0e0c 	sbc.w	lr, r4, ip
   b70e8:	3801      	subs	r0, #1
   b70ea:	e7a3      	b.n	b7034 <__udivmoddi4+0x1f8>
   b70ec:	4646      	mov	r6, r8
   b70ee:	e7ea      	b.n	b70c6 <__udivmoddi4+0x28a>
   b70f0:	4620      	mov	r0, r4
   b70f2:	e794      	b.n	b701e <__udivmoddi4+0x1e2>
   b70f4:	4640      	mov	r0, r8
   b70f6:	e7d1      	b.n	b709c <__udivmoddi4+0x260>
   b70f8:	46d0      	mov	r8, sl
   b70fa:	e77b      	b.n	b6ff4 <__udivmoddi4+0x1b8>
   b70fc:	3b02      	subs	r3, #2
   b70fe:	4461      	add	r1, ip
   b7100:	e732      	b.n	b6f68 <__udivmoddi4+0x12c>
   b7102:	4630      	mov	r0, r6
   b7104:	e709      	b.n	b6f1a <__udivmoddi4+0xde>
   b7106:	4464      	add	r4, ip
   b7108:	3802      	subs	r0, #2
   b710a:	e742      	b.n	b6f92 <__udivmoddi4+0x156>

000b710c <__aeabi_idiv0>:
   b710c:	4770      	bx	lr
   b710e:	bf00      	nop

000b7110 <atexit>:
   b7110:	2300      	movs	r3, #0
   b7112:	4601      	mov	r1, r0
   b7114:	461a      	mov	r2, r3
   b7116:	4618      	mov	r0, r3
   b7118:	f000 b872 	b.w	b7200 <__register_exitproc>

000b711c <memcpy>:
   b711c:	440a      	add	r2, r1
   b711e:	4291      	cmp	r1, r2
   b7120:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   b7124:	d100      	bne.n	b7128 <memcpy+0xc>
   b7126:	4770      	bx	lr
   b7128:	b510      	push	{r4, lr}
   b712a:	f811 4b01 	ldrb.w	r4, [r1], #1
   b712e:	f803 4f01 	strb.w	r4, [r3, #1]!
   b7132:	4291      	cmp	r1, r2
   b7134:	d1f9      	bne.n	b712a <memcpy+0xe>
   b7136:	bd10      	pop	{r4, pc}

000b7138 <memset>:
   b7138:	4402      	add	r2, r0
   b713a:	4603      	mov	r3, r0
   b713c:	4293      	cmp	r3, r2
   b713e:	d100      	bne.n	b7142 <memset+0xa>
   b7140:	4770      	bx	lr
   b7142:	f803 1b01 	strb.w	r1, [r3], #1
   b7146:	e7f9      	b.n	b713c <memset+0x4>

000b7148 <srand>:
   b7148:	b538      	push	{r3, r4, r5, lr}
   b714a:	4b10      	ldr	r3, [pc, #64]	; (b718c <srand+0x44>)
   b714c:	681d      	ldr	r5, [r3, #0]
   b714e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7150:	4604      	mov	r4, r0
   b7152:	b9b3      	cbnz	r3, b7182 <srand+0x3a>
   b7154:	2018      	movs	r0, #24
   b7156:	f7fd ff97 	bl	b5088 <malloc>
   b715a:	4602      	mov	r2, r0
   b715c:	63a8      	str	r0, [r5, #56]	; 0x38
   b715e:	b920      	cbnz	r0, b716a <srand+0x22>
   b7160:	4b0b      	ldr	r3, [pc, #44]	; (b7190 <srand+0x48>)
   b7162:	480c      	ldr	r0, [pc, #48]	; (b7194 <srand+0x4c>)
   b7164:	2142      	movs	r1, #66	; 0x42
   b7166:	f7fd ffb7 	bl	b50d8 <__assert_func>
   b716a:	490b      	ldr	r1, [pc, #44]	; (b7198 <srand+0x50>)
   b716c:	4b0b      	ldr	r3, [pc, #44]	; (b719c <srand+0x54>)
   b716e:	e9c0 1300 	strd	r1, r3, [r0]
   b7172:	4b0b      	ldr	r3, [pc, #44]	; (b71a0 <srand+0x58>)
   b7174:	6083      	str	r3, [r0, #8]
   b7176:	230b      	movs	r3, #11
   b7178:	8183      	strh	r3, [r0, #12]
   b717a:	2100      	movs	r1, #0
   b717c:	2001      	movs	r0, #1
   b717e:	e9c2 0104 	strd	r0, r1, [r2, #16]
   b7182:	6bab      	ldr	r3, [r5, #56]	; 0x38
   b7184:	2200      	movs	r2, #0
   b7186:	611c      	str	r4, [r3, #16]
   b7188:	615a      	str	r2, [r3, #20]
   b718a:	bd38      	pop	{r3, r4, r5, pc}
   b718c:	2003e60c 	.word	0x2003e60c
   b7190:	000b74bd 	.word	0x000b74bd
   b7194:	000b74d4 	.word	0x000b74d4
   b7198:	abcd330e 	.word	0xabcd330e
   b719c:	e66d1234 	.word	0xe66d1234
   b71a0:	0005deec 	.word	0x0005deec

000b71a4 <strcpy>:
   b71a4:	4603      	mov	r3, r0
   b71a6:	f811 2b01 	ldrb.w	r2, [r1], #1
   b71aa:	f803 2b01 	strb.w	r2, [r3], #1
   b71ae:	2a00      	cmp	r2, #0
   b71b0:	d1f9      	bne.n	b71a6 <strcpy+0x2>
   b71b2:	4770      	bx	lr

000b71b4 <strdup>:
   b71b4:	4b02      	ldr	r3, [pc, #8]	; (b71c0 <strdup+0xc>)
   b71b6:	4601      	mov	r1, r0
   b71b8:	6818      	ldr	r0, [r3, #0]
   b71ba:	f000 b803 	b.w	b71c4 <_strdup_r>
   b71be:	bf00      	nop
   b71c0:	2003e60c 	.word	0x2003e60c

000b71c4 <_strdup_r>:
   b71c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   b71c6:	4604      	mov	r4, r0
   b71c8:	4608      	mov	r0, r1
   b71ca:	460d      	mov	r5, r1
   b71cc:	f000 f80f 	bl	b71ee <strlen>
   b71d0:	1c42      	adds	r2, r0, #1
   b71d2:	4611      	mov	r1, r2
   b71d4:	4620      	mov	r0, r4
   b71d6:	9201      	str	r2, [sp, #4]
   b71d8:	f7fd ff76 	bl	b50c8 <_malloc_r>
   b71dc:	4604      	mov	r4, r0
   b71de:	b118      	cbz	r0, b71e8 <_strdup_r+0x24>
   b71e0:	9a01      	ldr	r2, [sp, #4]
   b71e2:	4629      	mov	r1, r5
   b71e4:	f7ff ff9a 	bl	b711c <memcpy>
   b71e8:	4620      	mov	r0, r4
   b71ea:	b003      	add	sp, #12
   b71ec:	bd30      	pop	{r4, r5, pc}

000b71ee <strlen>:
   b71ee:	4603      	mov	r3, r0
   b71f0:	f813 2b01 	ldrb.w	r2, [r3], #1
   b71f4:	2a00      	cmp	r2, #0
   b71f6:	d1fb      	bne.n	b71f0 <strlen+0x2>
   b71f8:	1a18      	subs	r0, r3, r0
   b71fa:	3801      	subs	r0, #1
   b71fc:	4770      	bx	lr
	...

000b7200 <__register_exitproc>:
   b7200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   b7204:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b72c0 <__register_exitproc+0xc0>
   b7208:	4606      	mov	r6, r0
   b720a:	f8d8 0000 	ldr.w	r0, [r8]
   b720e:	461f      	mov	r7, r3
   b7210:	460d      	mov	r5, r1
   b7212:	4691      	mov	r9, r2
   b7214:	f000 f856 	bl	b72c4 <__retarget_lock_acquire_recursive>
   b7218:	4b25      	ldr	r3, [pc, #148]	; (b72b0 <__register_exitproc+0xb0>)
   b721a:	681c      	ldr	r4, [r3, #0]
   b721c:	b934      	cbnz	r4, b722c <__register_exitproc+0x2c>
   b721e:	4c25      	ldr	r4, [pc, #148]	; (b72b4 <__register_exitproc+0xb4>)
   b7220:	601c      	str	r4, [r3, #0]
   b7222:	4b25      	ldr	r3, [pc, #148]	; (b72b8 <__register_exitproc+0xb8>)
   b7224:	b113      	cbz	r3, b722c <__register_exitproc+0x2c>
   b7226:	681b      	ldr	r3, [r3, #0]
   b7228:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   b722c:	6863      	ldr	r3, [r4, #4]
   b722e:	2b1f      	cmp	r3, #31
   b7230:	dd07      	ble.n	b7242 <__register_exitproc+0x42>
   b7232:	f8d8 0000 	ldr.w	r0, [r8]
   b7236:	f000 f847 	bl	b72c8 <__retarget_lock_release_recursive>
   b723a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   b723e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   b7242:	b34e      	cbz	r6, b7298 <__register_exitproc+0x98>
   b7244:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   b7248:	b988      	cbnz	r0, b726e <__register_exitproc+0x6e>
   b724a:	4b1c      	ldr	r3, [pc, #112]	; (b72bc <__register_exitproc+0xbc>)
   b724c:	b923      	cbnz	r3, b7258 <__register_exitproc+0x58>
   b724e:	f8d8 0000 	ldr.w	r0, [r8]
   b7252:	f000 f838 	bl	b72c6 <__retarget_lock_release>
   b7256:	e7f0      	b.n	b723a <__register_exitproc+0x3a>
   b7258:	f44f 7084 	mov.w	r0, #264	; 0x108
   b725c:	f7fd ff14 	bl	b5088 <malloc>
   b7260:	2800      	cmp	r0, #0
   b7262:	d0f4      	beq.n	b724e <__register_exitproc+0x4e>
   b7264:	2300      	movs	r3, #0
   b7266:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   b726a:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   b726e:	6863      	ldr	r3, [r4, #4]
   b7270:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   b7274:	2201      	movs	r2, #1
   b7276:	409a      	lsls	r2, r3
   b7278:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   b727c:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   b7280:	4313      	orrs	r3, r2
   b7282:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   b7286:	2e02      	cmp	r6, #2
   b7288:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   b728c:	bf02      	ittt	eq
   b728e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   b7292:	4313      	orreq	r3, r2
   b7294:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
   b7298:	6863      	ldr	r3, [r4, #4]
   b729a:	f8d8 0000 	ldr.w	r0, [r8]
   b729e:	1c5a      	adds	r2, r3, #1
   b72a0:	3302      	adds	r3, #2
   b72a2:	6062      	str	r2, [r4, #4]
   b72a4:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   b72a8:	f000 f80e 	bl	b72c8 <__retarget_lock_release_recursive>
   b72ac:	2000      	movs	r0, #0
   b72ae:	e7c6      	b.n	b723e <__register_exitproc+0x3e>
   b72b0:	2003e7e8 	.word	0x2003e7e8
   b72b4:	2003e75c 	.word	0x2003e75c
   b72b8:	00000000 	.word	0x00000000
   b72bc:	000b5089 	.word	0x000b5089
   b72c0:	2003e670 	.word	0x2003e670

000b72c4 <__retarget_lock_acquire_recursive>:
   b72c4:	4770      	bx	lr

000b72c6 <__retarget_lock_release>:
   b72c6:	4770      	bx	lr

000b72c8 <__retarget_lock_release_recursive>:
   b72c8:	4770      	bx	lr

000b72ca <link_code_end>:
	...

000b72cc <dynalib_user>:
   b72cc:	401d 000b 4059 000b 4081 000b 4085 000b     .@..Y@...@...@..
   b72dc:	0000 0000 6157 6574 2072 654c 6576 3a6c     ....Water Level:
   b72ec:	0020 654c 6576 206c 6944 7473 6e61 6563      .Level Distance
   b72fc:	203a 0000                                   : ..

000b7300 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   b7308:	516d 000b 5173 000b 51b1 000b 5181 000b     mQ..sQ...Q...Q..
   b7318:	516f 000b                                   oQ..

000b731c <_ZTVN5spark13EthernetClassE>:
	...
   b7324:	572f 000b 5725 000b 571b 000b 5711 000b     /W..%W...W...W..
   b7334:	5705 000b 56f9 000b 59a5 000b 59ad 000b     .W...V...Y...Y..
   b7344:	56ed 000b 56e5 000b 56db 000b 56d1 000b     .V...V...V...V..
   b7354:	59dd 000b                                   .Y..

000b7358 <_ZTV7TwoWire>:
	...
   b7360:	574d 000b 5797 000b 576f 000b 574f 000b     MW...W..oW..OW..
   b7370:	5777 000b 577f 000b 5787 000b 578f 000b     wW...W...W...W..

000b7380 <_ZTV9IPAddress>:
	...
   b7388:	5873 000b 5863 000b 5865 000b 7061 0070     sX..cX..eX..app.

000b7398 <_ZTVN5spark12NetworkClassE>:
	...
   b73a0:	5965 000b 596f 000b 5979 000b 5983 000b     eY..oY..yY...Y..
   b73b0:	598d 000b 5999 000b 59a5 000b 59ad 000b     .Y...Y...Y...Y..
   b73c0:	59b5 000b 59c1 000b 59c9 000b 59d3 000b     .Y...Y...Y...Y..
   b73d0:	59dd 000b 6977 6972 676e 5300 7379 6574     .Y..wiring.Syste
   b73e0:	206d 6c73 6565 2070 6f63 666e 6769 7275     m sleep configur
   b73f0:	7461 6f69 206e 7369 6920 766e 6c61 6469     ation is invalid
   b7400:	002e 5925 252d 2d6d 6425 2554 3a48 4d25     ..%Y-%m-%dT%H:%M
   b7410:	253a 2553 007a 7361 7463 6d69 0065 0000     :%S%z.asctime...

000b7420 <_ZTV11USARTSerial>:
	...
   b7428:	5f15 000b 5f81 000b 5f59 000b 5ac9 000b     ._..._..Y_...Z..
   b7438:	5f29 000b 5f45 000b 5f37 000b 5f53 000b     )_..E_..7_..S_..
   b7448:	5f17 000b 5f1b 000b                         ._..._..

000b7450 <_ZTV9USBSerial>:
	...
   b7458:	5fbf 000b 6027 000b 5ffd 000b 5ac9 000b     ._..'`..._...Z..
   b7468:	5fef 000b 5fc1 000b 5fd1 000b 6021 000b     ._..._..._..!`..
   b7478:	5fe1 000b 5fb9 000b                         ._..._..

000b7480 <_ZTVN5spark9WiFiClassE>:
	...
   b7488:	6117 000b 610d 000b 6103 000b 60b9 000b     .a...a...a...`..
   b7498:	60f7 000b 60eb 000b 59a5 000b 59ad 000b     .`...`...Y...Y..
   b74a8:	60df 000b 60d7 000b 60cd 000b 60c3 000b     .`...`...`...`..
   b74b8:	59dd 000b                                   .Y..

000b74bc <_ZSt7nothrow>:
   b74bc:	5200 4545 544e 6d20 6c61 6f6c 2063 7573     .REENT malloc su
   b74cc:	6363 6565 6564 0064 742f 706d 6a2f 6e65     cceeded./tmp/jen
   b74dc:	696b 736e 472d 4343 312d 2d30 6970 6570     kins-GCC-10-pipe
   b74ec:	696c 656e 342d 5f38 3032 3032 3131 3432     line-48_20201124
   b74fc:	315f 3036 3136 3038 3336 2f39 7273 2f63     _1606180639/src/
   b750c:	656e 6c77 6269 6e2f 7765 696c 2f62 696c     newlib/newlib/li
   b751c:	6362 732f 6474 696c 2f62 6172 646e 632e     bc/stdlib/rand.c
	...

000b752d <link_const_variable_data_end>:
   b752d:	00          	.byte	0x00
	...

000b7530 <link_constructors_location>:
   b7530:	000b4101 	.word	0x000b4101
   b7534:	000b515d 	.word	0x000b515d
   b7538:	000b5739 	.word	0x000b5739
   b753c:	000b5955 	.word	0x000b5955
   b7540:	000b5ab5 	.word	0x000b5ab5
   b7544:	000b5b5d 	.word	0x000b5b5d
   b7548:	000b5edd 	.word	0x000b5edd
   b754c:	000b5f01 	.word	0x000b5f01
   b7550:	000b6121 	.word	0x000b6121

000b7554 <link_constructors_end>:
	...
